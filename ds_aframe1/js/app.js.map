{"version":3,"sources":["app/js/clouds.js","app/js/index.js","app/js/initialize.js"],"names":[],"mappingsfile":".public/js/app.js","sourcesContent":["\nconst fragmentCloudShader = `\nuniform sampler2D map;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = smoothstep( fogNear, fogFar, depth );\n\n  gl_FragColor = texture2D( map, vUv );\n  gl_FragColor.w *= pow( gl_FragCoord.z, 20.0 );\n  gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\n}\n`\nconst vertexCloudShader = `\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n`\n\nwindow.AFRAME.registerComponent('clouds', {\n  schema: {\n    start_time: {default: new Date()},\n    totalClouds: {default: 800},\n    activeCamera: {default: null},\n    id: {default: null},\n    width: {default: 512},\n    height: {default: 512}\n  },\n  buildClouds: function (scene) {\n    let object = this.el.object3D\n    var loader = new window.THREE.TextureLoader()\n    var texture = loader.load('/images/cloud10.png', scene.render)\n\n    texture.magFilter = window.THREE.LinearMipMapLinearFilter\n    texture.minFilter = window.THREE.LinearMipMapLinearFilter\n    var fog = new window.THREE.Fog(0xc6dff4, 0, 800)\n    let material = new window.THREE.ShaderMaterial({\n      uniforms: {\n        'map': { type: 't', value: texture },\n        'fogColor': { type: 'c', value: fog.color },\n        'fogNear': { type: 'f', value: fog.near },\n        'fogFar': { type: 'f', value: fog.far }\n      },\n      vertexShader: vertexCloudShader,\n      fragmentShader: fragmentCloudShader,\n      depthWrite: false,\n      depthTest: false,\n      transparent: true\n    })\n    let geometry = new window.THREE.Geometry()\n    var plane = new window.THREE.Mesh(new window.THREE.PlaneGeometry(64, 64))\n\n    for (var i = 0; i < this.data.totalClouds; i++) {\n      plane.position.x = Math.random() * 1000 - 500\n      plane.position.y = -Math.random() * Math.random() * 200 - 15\n      plane.position.z = i\n      plane.rotation.z = Math.random() * Math.PI\n      plane.scale.x = plane.scale.y = Math.random() * Math.random() * 1.5 + 0.5\n      window.THREE.GeometryUtils.merge(geometry, plane)\n    }\n\n    let mesh = new window.THREE.Mesh(geometry, material)\n    object.add(mesh)\n    mesh = new window.THREE.Mesh(geometry, material)\n    mesh.position.z = -this.data.totalClouds\n    object.add(mesh)\n  },\n\n  init: function () {\n    this.buildClouds(this.el.sceneEl)\n    this.data.activeCamera = this.el.sceneEl.camera\n  },\n  tick: function () {\n    if (this.data.activeCamera) {\n      let position = ((Date.now() - this.data.start_time) * 0.03) % this.data.totalClouds\n      this.data.activeCamera.position.x += (this.data.activeCamera.position.x) * 0.01\n      this.data.activeCamera.position.y += (this.data.activeCamera.position.y) * 0.01\n      this.data.activeCamera.position.z = -position + this.data.totalClouds\n    }\n  }\n})\n","require('aframe')\nrequire('./initialize')","require('aframe-animation-component')\nrequire('aframe-effects')\nrequire('aframe-text-geometry-component')\nrequire('aframe-environment-component')\nvar extras = require('aframe-extras')\nrequire('./clouds')\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('Initialized app')\n})\n"]}