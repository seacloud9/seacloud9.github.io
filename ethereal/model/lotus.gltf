{
    "accessors": {
        "accessors_accessor_buffer_Cylinder_0": {
            "bufferView": "bufferViews_bufferView_buffer_Cylinder_0",
            "byteOffset": 0,
            "byteStride": 2,
            "componentType": 5123,
            "count": 372,
            "max": [
                191
            ],
            "min": [
                0
            ],
            "name": "accessor_buffer_Cylinder_0",
            "type": "SCALAR"
        },
        "accessors_accessor_buffer_Cylinder_NORMAL_0": {
            "bufferView": "bufferViews_bufferView_buffer_Cylinder_NORMAL_0",
            "byteOffset": 0,
            "byteStride": 12,
            "componentType": 5126,
            "count": 192,
            "max": [
                0.9951847195625305,
                0.9951847791671753,
                1.0
            ],
            "min": [
                -0.9951847791671753,
                -0.9951847195625305,
                -1.0
            ],
            "name": "accessor_buffer_Cylinder_NORMAL_0",
            "type": "VEC3"
        },
        "accessors_accessor_buffer_Cylinder_POSITION_0": {
            "bufferView": "bufferViews_bufferView_buffer_Cylinder_POSITION_0",
            "byteOffset": 0,
            "byteStride": 12,
            "componentType": 5126,
            "count": 192,
            "max": [
                1.0,
                1.0,
                1.0
            ],
            "min": [
                -1.0,
                -1.0,
                -1.0
            ],
            "name": "accessor_buffer_Cylinder_POSITION_0",
            "type": "VEC3"
        }
    },
    "asset": {
        "profile": {
            "api": "WebGL",
            "version": "1.0"
        },
        "version": "1.0"
    },
    "bufferViews": {
        "bufferViews_bufferView_buffer_Cylinder_0": {
            "buffer": "buffers_buffer_lotus",
            "byteLength": 744,
            "byteOffset": 4608,
            "name": "bufferView_buffer_Cylinder_0",
            "target": 34963
        },
        "bufferViews_bufferView_buffer_Cylinder_NORMAL_0": {
            "buffer": "buffers_buffer_lotus",
            "byteLength": 2304,
            "byteOffset": 2304,
            "name": "bufferView_buffer_Cylinder_NORMAL_0",
            "target": 34962
        },
        "bufferViews_bufferView_buffer_Cylinder_POSITION_0": {
            "buffer": "buffers_buffer_lotus",
            "byteLength": 2304,
            "byteOffset": 0,
            "name": "bufferView_buffer_Cylinder_POSITION_0",
            "target": 34962
        }
    },
    "buffers": {
        "buffers_buffer_lotus": {
            "byteLength": 5352,
            "name": "buffer_lotus",
            "type": "arraybuffer",
            "uri": "buffer_lotus.bin"
        }
    },
    "cameras": {
        "cameras_Camera": {
            "name": "Camera",
            "perspective": {
                "aspectRatio": 1.703595982340029,
                "yfov": 0.5033799409866333,
                "zfar": 100.0,
                "znear": 0.10000000149011612
            },
            "type": "perspective"
        }
    },
    "glExtensionsUsed": [],
    "materials": {
        "materials_Blue": {
            "name": "Blue",
            "technique": "techniques_Blue",
            "values": {}
        },
        "materials_PinkGlass": {
            "name": "PinkGlass",
            "technique": "techniques_PinkGlass",
            "values": {}
        },
        "materials_PinkGlow": {
            "name": "PinkGlow",
            "technique": "techniques_PinkGlow",
            "values": {}
        },
        "materials_blueglass": {
            "name": "blueglass",
            "technique": "techniques_blueglass",
            "values": {}
        },
        "materials_greenGlass": {
            "name": "greenGlass",
            "technique": "techniques_greenGlass",
            "values": {}
        },
        "materials_greenGlow": {
            "name": "greenGlow",
            "technique": "techniques_greenGlow",
            "values": {}
        }
    },
    "meshes": {
        "meshes_Cylinder": {
            "extras": {
                "mesh_cached": 0
            },
            "name": "Cylinder",
            "primitives": [
                {
                    "attributes": {
                        "NORMAL": "accessors_accessor_buffer_Cylinder_NORMAL_0",
                        "POSITION": "accessors_accessor_buffer_Cylinder_POSITION_0"
                    },
                    "indices": "accessors_accessor_buffer_Cylinder_0",
                    "material": "materials_greenGlass",
                    "mode": 4
                }
            ]
        }
    },
    "nodes": {
        "nodes_Camera": {
            "camera": "cameras_Camera",
            "name": "Camera",
            "rotation": [
                0.483536034822464,
                0.20870360732078552,
                0.33687159419059753,
                0.7804827094078064
            ],
            "scale": [
                1.0,
                1.0,
                1.0
            ],
            "translation": [
                7.481131553649902,
                -6.5076398849487305,
                5.34366512298584
            ]
        },
        "nodes_Hemi": {
            "name": "Hemi",
            "rotation": [
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "scale": [
                1.0,
                1.0,
                1.0
            ],
            "translation": [
                -0.16564162075519562,
                -0.38629260659217834,
                1.1258221864700317
            ]
        },
        "nodes_Lamp": {
            "name": "Lamp",
            "rotation": [
                0.16907575726509094,
                0.27217137813568115,
                0.7558802962303162,
                0.570947527885437
            ],
            "scale": [
                1.0,
                0.9999999403953552,
                1.0
            ],
            "translation": [
                4.076245307922363,
                1.0054539442062378,
                5.903861999511719
            ]
        },
        "nodes_Scene_root": {
            "children": [
                "nodes_Spot",
                "nodes_lotus",
                "nodes_Hemi",
                "nodes_Sun",
                "nodes_Lamp",
                "nodes_Camera"
            ],
            "matrix": [
                -1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "name": "Scene_root"
        },
        "nodes_Spot": {
            "name": "Spot",
            "rotation": [
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "scale": [
                1.0,
                1.0,
                1.0
            ],
            "translation": [
                0.04525988548994064,
                -0.18895527720451355,
                21.731273651123047
            ]
        },
        "nodes_Sun": {
            "name": "Sun",
            "rotation": [
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "scale": [
                1.0,
                1.0,
                1.0
            ],
            "translation": [
                -28.384519577026367,
                -0.013090655207633972,
                -0.8900642395019531
            ]
        },
        "nodes_greenCore": {
            "meshes": [
                "meshes_Cylinder"
            ],
            "name": "greenCore",
            "rotation": [
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "scale": [
                -0.059062957763671875,
                -0.059062957763671875,
                -0.059062957763671875
            ],
            "translation": [
                -0.025729723274707794,
                0.001349136233329773,
                -0.09012746810913086
            ]
        },
        "nodes_lotus": {
            "children": [
                "nodes_greenCore",
                "nodes_lotusGroup",
                "nodes_lotusGroup2"
            ],
            "name": "lotus",
            "rotation": [
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "scale": [
                1.0,
                1.0,
                1.0
            ],
            "translation": [
                0.04525988548994064,
                -0.18895527720451355,
                0.08510833978652954
            ]
        },
        "nodes_lotusGroup": {
            "children": [
                "nodes_petal1",
                "nodes_petal2",
                "nodes_petal3",
                "nodes_petal4"
            ],
            "name": "lotusGroup",
            "rotation": [
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "scale": [
                1.0,
                1.0,
                1.0
            ],
            "translation": [
                -0.22005531191825867,
                -0.18503129482269287,
                -0.17335325479507446
            ]
        },
        "nodes_lotusGroup2": {
            "children": [
                "nodes_petal1.001",
                "nodes_petal2.001",
                "nodes_petal3.001",
                "nodes_petal4.001"
            ],
            "name": "lotusGroup2",
            "rotation": [
                0.0,
                0.0,
                0.31730467081069946,
                0.948323667049408
            ],
            "scale": [
                0.7851840853691101,
                0.7851840853691101,
                0.7851840853691101
            ],
            "translation": [
                0.010410301387310028,
                -0.17206481099128723,
                -0.1514257788658142
            ]
        },
        "nodes_petal1": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal1",
            "rotation": [
                0.0,
                0.0,
                0.0,
                1.0
            ],
            "scale": [
                14.731578826904297,
                14.731578826904297,
                14.731578826904297
            ],
            "translation": [
                -0.23789066076278687,
                0.8215804100036621,
                0.08824491500854492
            ]
        },
        "nodes_petal1.001": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal1.001",
            "rotation": [
                0.0,
                0.0,
                -8.092091441369575e-09,
                1.0
            ],
            "scale": [
                14.731578826904297,
                14.731579780578613,
                14.73157787322998
            ],
            "translation": [
                -0.28691375255584717,
                0.8087600469589233,
                0.11763517558574677
            ]
        },
        "nodes_petal2": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal2",
            "rotation": [
                0.0,
                0.0,
                -0.7071068286895752,
                0.7071067690849304
            ],
            "scale": [
                14.807927131652832,
                14.807927131652832,
                14.807927131652832
            ],
            "translation": [
                0.8410115242004395,
                0.6396749019622803,
                0.0870608538389206
            ]
        },
        "nodes_petal2.001": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal2.001",
            "rotation": [
                0.0,
                0.0,
                -0.7071068286895752,
                0.7071067690849304
            ],
            "scale": [
                14.807928085327148,
                14.807926177978516,
                14.807926177978516
            ],
            "translation": [
                0.7919885516166687,
                0.6268544793128967,
                0.11645110696554184
            ]
        },
        "nodes_petal3": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal3",
            "rotation": [
                0.0,
                0.0,
                0.7071068286895752,
                0.7071067690849304
            ],
            "scale": [
                14.731578826904297,
                14.731578826904297,
                14.731578826904297
            ],
            "translation": [
                -0.4866432845592499,
                -0.140207439661026,
                0.08824346959590912
            ]
        },
        "nodes_petal3.001": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal3.001",
            "rotation": [
                0.0,
                0.0,
                0.7071068286895752,
                0.7071068286895752
            ],
            "scale": [
                14.731579780578613,
                14.731578826904297,
                14.73157787322998
            ],
            "translation": [
                -0.535666286945343,
                -0.15302789211273193,
                0.11763372272253036
            ]
        },
        "nodes_petal4": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal4",
            "rotation": [
                0.0,
                0.0,
                0.9999939203262329,
                -0.0034904847852885723
            ],
            "scale": [
                14.73157787322998,
                14.73157787322998,
                14.731578826904297
            ],
            "translation": [
                0.5522632598876953,
                -0.35048308968544006,
                0.08824346959590912
            ]
        },
        "nodes_petal4.001": {
            "extras": {
                "arm_cached": 0
            },
            "name": "petal4.001",
            "rotation": [
                0.0,
                0.0,
                0.9999939203262329,
                -0.0034904719796031713
            ],
            "scale": [
                14.73157787322998,
                14.731578826904297,
                14.73157787322998
            ],
            "translation": [
                0.5032401084899902,
                -0.363303542137146,
                0.11763372272253036
            ]
        }
    },
    "programs": {
        "programs_Blue": {
            "attributes": [
                "bl_Vertex",
                "bl_Normal"
            ],
            "fragmentShader": "shaders_BlueFS",
            "name": "Blue",
            "vertexShader": "shaders_BlueVS"
        },
        "programs_PinkGlass": {
            "attributes": [
                "bl_Vertex",
                "bl_Normal"
            ],
            "fragmentShader": "shaders_PinkGlassFS",
            "name": "PinkGlass",
            "vertexShader": "shaders_PinkGlassVS"
        },
        "programs_PinkGlow": {
            "attributes": [
                "bl_Vertex",
                "bl_Normal"
            ],
            "fragmentShader": "shaders_PinkGlowFS",
            "name": "PinkGlow",
            "vertexShader": "shaders_PinkGlowVS"
        },
        "programs_blueglass": {
            "attributes": [
                "bl_Vertex",
                "bl_Normal"
            ],
            "fragmentShader": "shaders_blueglassFS",
            "name": "blueglass",
            "vertexShader": "shaders_blueglassVS"
        },
        "programs_greenGlass": {
            "attributes": [
                "bl_Vertex",
                "bl_Normal"
            ],
            "fragmentShader": "shaders_greenGlassFS",
            "name": "greenGlass",
            "vertexShader": "shaders_greenGlassVS"
        },
        "programs_greenGlow": {
            "attributes": [
                "bl_Vertex",
                "bl_Normal"
            ],
            "fragmentShader": "shaders_greenGlowFS",
            "name": "greenGlow",
            "vertexShader": "shaders_greenGlowVS"
        }
    },
    "scene": "scenes_Scene",
    "scenes": {
        "scenes_Scene": {
            "extras": {
                "active_camera": "cameras_Camera",
                "background_color": [
                    0.05087608844041824,
                    0.05087608844041824,
                    0.05087608844041824
                ],
                "frames_per_second": 24
            },
            "name": "Scene",
            "nodes": [
                "nodes___scene_root_0_"
            ]
        }
    },
    "shaders": {
        "shaders_BlueFS": {
            "name": "BlueFS",
            "type": 35632,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCiNleHRlbnNpb24gR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzOiBlbmFibGUKCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1hdDQgYmxfUHJvamVjdGlvbk1hdHJpeDsKdW5pZm9ybSBtYXQ0IGJsX01vZGVsVmlld01hdHJpeDsKdW5pZm9ybSBtYXQ0IGJsX01vZGVsVmlld01hdHJpeEludmVyc2U7CnVuaWZvcm0gbWF0MyBibF9Ob3JtYWxNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4SW52ZXJzZTsKLyogQ29udmVydGVycyAqLwoKZmxvYXQgY29udmVydF9yZ2JhX3RvX2Zsb2F0KHZlYzQgY29sb3IpCnsKI2lmZGVmIFVTRV9ORVdfU0hBRElORwoJcmV0dXJuIGNvbG9yLnIgKiAwLjIxMjYgKyBjb2xvci5nICogMC43MTUyICsgY29sb3IuYiAqIDAuMDcyMjsKI2Vsc2UKCXJldHVybiAoY29sb3IuciArIGNvbG9yLmcgKyBjb2xvci5iKSAvIDMuMDsKI2VuZGlmCn0KCmZsb2F0IGV4cF9ibGVuZGVyKGZsb2F0IGYpCnsKCXJldHVybiBwb3coMi43MTgyODE4Mjg0NiwgZik7Cn0KCmZsb2F0IGNvbXBhdGlibGVfcG93KGZsb2F0IHgsIGZsb2F0IHkpCnsKCWlmICh5ID09IDAuMCkgLyogeF4wIC0+IDEsIGluY2x1ZGluZyAwXjAgKi8KCQlyZXR1cm4gMS4wOwoKCS8qIGdsc2wgcG93IGRvZXNuJ3QgYWNjZXB0IG5lZ2F0aXZlIHggKi8KCWlmICh4IDwgMC4wKSB7CgkJaWYgKG1vZCgteSwgMi4wKSA9PSAwLjApCgkJCXJldHVybiBwb3coLXgsIHkpOwoJCWVsc2UKCQkJcmV0dXJuIC1wb3coLXgsIHkpOwoJfQoJZWxzZSBpZiAoeCA9PSAwLjApCgkJcmV0dXJuIDAuMDsKCglyZXR1cm4gcG93KHgsIHkpOwp9Cgp2b2lkIHJnYl90b19oc3YodmVjNCByZ2IsIG91dCB2ZWM0IG91dGNvbCkKewoJZmxvYXQgY21heCwgY21pbiwgaCwgcywgdiwgY2RlbHRhOwoJdmVjMyBjOwoKCWNtYXggPSBtYXgocmdiWzBdLCBtYXgocmdiWzFdLCByZ2JbMl0pKTsKCWNtaW4gPSBtaW4ocmdiWzBdLCBtaW4ocmdiWzFdLCByZ2JbMl0pKTsKCWNkZWx0YSA9IGNtYXggLSBjbWluOwoKCXYgPSBjbWF4OwoJaWYgKGNtYXggIT0gMC4wKQoJCXMgPSBjZGVsdGEgLyBjbWF4OwoJZWxzZSB7CgkJcyA9IDAuMDsKCQloID0gMC4wOwoJfQoKCWlmIChzID09IDAuMCkgewoJCWggPSAwLjA7Cgl9CgllbHNlIHsKCQljID0gKHZlYzMoY21heCwgY21heCwgY21heCkgLSByZ2IueHl6KSAvIGNkZWx0YTsKCgkJaWYgKHJnYi54ID09IGNtYXgpIGggPSBjWzJdIC0gY1sxXTsKCQllbHNlIGlmIChyZ2IueSA9PSBjbWF4KSBoID0gMi4wICsgY1swXSAtICBjWzJdOwoJCWVsc2UgaCA9IDQuMCArIGNbMV0gLSBjWzBdOwoKCQloIC89IDYuMDsKCgkJaWYgKGggPCAwLjApCgkJCWggKz0gMS4wOwoJfQoKCW91dGNvbCA9IHZlYzQoaCwgcywgdiwgcmdiLncpOwp9Cgp2b2lkIGhzdl90b19yZ2IodmVjNCBoc3YsIG91dCB2ZWM0IG91dGNvbCkKewoJZmxvYXQgaSwgZiwgcCwgcSwgdCwgaCwgcywgdjsKCXZlYzMgcmdiOwoKCWggPSBoc3ZbMF07CglzID0gaHN2WzFdOwoJdiA9IGhzdlsyXTsKCglpZiAocyA9PSAwLjApIHsKCQlyZ2IgPSB2ZWMzKHYsIHYsIHYpOwoJfQoJZWxzZSB7CgkJaWYgKGggPT0gMS4wKQoJCQloID0gMC4wOwoKCQloICo9IDYuMDsKCQlpID0gZmxvb3IoaCk7CgkJZiA9IGggLSBpOwoJCXJnYiA9IHZlYzMoZiwgZiwgZik7CgkJcCA9IHYgKiAoMS4wIC0gcyk7CgkJcSA9IHYgKiAoMS4wIC0gKHMgKiBmKSk7CgkJdCA9IHYgKiAoMS4wIC0gKHMgKiAoMS4wIC0gZikpKTsKCgkJaWYgKGkgPT0gMC4wKSByZ2IgPSB2ZWMzKHYsIHQsIHApOwoJCWVsc2UgaWYgKGkgPT0gMS4wKSByZ2IgPSB2ZWMzKHEsIHYsIHApOwoJCWVsc2UgaWYgKGkgPT0gMi4wKSByZ2IgPSB2ZWMzKHAsIHYsIHQpOwoJCWVsc2UgaWYgKGkgPT0gMy4wKSByZ2IgPSB2ZWMzKHAsIHEsIHYpOwoJCWVsc2UgaWYgKGkgPT0gNC4wKSByZ2IgPSB2ZWMzKHQsIHAsIHYpOwoJCWVsc2UgcmdiID0gdmVjMyh2LCBwLCBxKTsKCX0KCglvdXRjb2wgPSB2ZWM0KHJnYiwgaHN2LncpOwp9CgpmbG9hdCBzcmdiX3RvX2xpbmVhcnJnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDQwNDUpCgkJcmV0dXJuIChjIDwgMC4wKSA/IDAuMCA6IGMgKiAoMS4wIC8gMTIuOTIpOwoJZWxzZQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOwp9CgpmbG9hdCBsaW5lYXJyZ2JfdG9fc3JnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDAzMTMwOCkKCQlyZXR1cm4gKGMgPCAwLjApID8gMC4wIDogYyAqIDEyLjkyOwoJZWxzZQoJCXJldHVybiAxLjA1NSAqIHBvdyhjLCAxLjAgLyAyLjQpIC0gMC4wNTU7Cn0KCnZvaWQgc3JnYl90b19saW5lYXJyZ2IodmVjNCBjb2xfZnJvbSwgb3V0IHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCnZvaWQgbGluZWFycmdiX3RvX3NyZ2IodmVjNCBjb2xfZnJvbSwgb3V0IHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IGxpbmVhcnJnYl90b19zcmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBsaW5lYXJyZ2JfdG9fc3JnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gbGluZWFycmdiX3RvX3NyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCnZvaWQgY29sb3JfdG9fbm9ybWFsKHZlYzMgY29sb3IsIG91dCB2ZWMzIG5vcm1hbCkKewoJbm9ybWFsLnggPSAgMi4wICogKChjb2xvci5yKSAtIDAuNSk7Cglub3JtYWwueSA9IC0yLjAgKiAoKGNvbG9yLmcpIC0gMC41KTsKCW5vcm1hbC56ID0gIDIuMCAqICgoY29sb3IuYikgLSAwLjUpOwp9Cgp2b2lkIGNvbG9yX3RvX25vcm1hbF9uZXdfc2hhZGluZyh2ZWMzIGNvbG9yLCBvdXQgdmVjMyBub3JtYWwpCnsKCW5vcm1hbC54ID0gIDIuMCAqICgoY29sb3IucikgLSAwLjUpOwoJbm9ybWFsLnkgPSAgMi4wICogKChjb2xvci5nKSAtIDAuNSk7Cglub3JtYWwueiA9ICAyLjAgKiAoKGNvbG9yLmIpIC0gMC41KTsKfQoKdm9pZCBjb2xvcl90b19ibGVuZGVyX25vcm1hbF9uZXdfc2hhZGluZyh2ZWMzIGNvbG9yLCBvdXQgdmVjMyBub3JtYWwpCnsKCW5vcm1hbC54ID0gIDIuMCAqICgoY29sb3IucikgLSAwLjUpOwoJbm9ybWFsLnkgPSAtMi4wICogKChjb2xvci5nKSAtIDAuNSk7Cglub3JtYWwueiA9IC0yLjAgKiAoKGNvbG9yLmIpIC0gMC41KTsKfQoKI2RlZmluZSBNX1BJIDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYKI2RlZmluZSBNXzFfUEkgMC4zMTgzMDk4ODYxODM3OTA2OQoKLyoqKioqKioqKioqIFNIQURFUiBOT0RFUyAqKioqKioqKioqKioqKiovCgp2b2lkIHZjb2xfYXR0cmlidXRlKHZlYzQgYXR0dmNvbCwgb3V0IHZlYzQgdmNvbCkKewoJdmNvbCA9IHZlYzQoYXR0dmNvbC54LCBhdHR2Y29sLnksIGF0dHZjb2wueiwgMS4wKTsKfQoKdm9pZCB1dl9hdHRyaWJ1dGUodmVjMiBhdHR1diwgb3V0IHZlYzMgdXYpCnsKCXV2ID0gdmVjMyhhdHR1diAqIDIuMCAtIHZlYzIoMS4wLCAxLjApLCAwLjApOwp9Cgp2b2lkIGdlb20oCiAgICAgICAgdmVjMyBjbywgdmVjMyBub3IsIG1hdDQgdmlld2ludm1hdCwgdmVjMyBhdHRvcmNvLCB2ZWMyIGF0dHV2LCB2ZWM0IGF0dHZjb2wsCiAgICAgICAgb3V0IHZlYzMgZ2xvYmFsLCBvdXQgdmVjMyBsb2NhbCwgb3V0IHZlYzMgdmlldywgb3V0IHZlYzMgb3Jjbywgb3V0IHZlYzMgdXYsCiAgICAgICAgb3V0IHZlYzMgbm9ybWFsLCBvdXQgdmVjNCB2Y29sLCBvdXQgZmxvYXQgdmNvbF9hbHBoYSwgb3V0IGZsb2F0IGZyb250YmFjaykKewoJbG9jYWwgPSBjbzsKCXZpZXcgPSAoYmxfUHJvamVjdGlvbk1hdHJpeFszXVszXSA9PSAwLjApID8gbm9ybWFsaXplKGxvY2FsKSA6IHZlYzMoMC4wLCAwLjAsIC0xLjApOwoJZ2xvYmFsID0gKHZpZXdpbnZtYXQgKiB2ZWM0KGxvY2FsLCAxLjApKS54eXo7CglvcmNvID0gYXR0b3JjbzsKCXV2X2F0dHJpYnV0ZShhdHR1diwgdXYpOwoJbm9ybWFsID0gLW5vcm1hbGl6ZShub3IpOyAgIC8qIGJsZW5kZXIgcmVuZGVyIG5vcm1hbCBpcyBuZWdhdGVkICovCgl2Y29sX2F0dHJpYnV0ZShhdHR2Y29sLCB2Y29sKTsKCXNyZ2JfdG9fbGluZWFycmdiKHZjb2wsIHZjb2wpOwoJdmNvbF9hbHBoYSA9IGF0dHZjb2wuYTsKCWZyb250YmFjayA9IChnbF9Gcm9udEZhY2luZykgPyAxLjAgOiAwLjA7Cn0KCnZvaWQgcGFydGljbGVfaW5mbygKICAgICAgICB2ZWM0IHNwcm9wcywgdmVjMyBsb2MsIHZlYzMgdmVsLCB2ZWMzIGF2ZWwsCiAgICAgICAgb3V0IGZsb2F0IGluZGV4LCBvdXQgZmxvYXQgYWdlLCBvdXQgZmxvYXQgbGlmZV90aW1lLCBvdXQgdmVjMyBsb2NhdGlvbiwKICAgICAgICBvdXQgZmxvYXQgc2l6ZSwgb3V0IHZlYzMgdmVsb2NpdHksIG91dCB2ZWMzIGFuZ3VsYXJfdmVsb2NpdHkpCnsKCWluZGV4ID0gc3Byb3BzLng7CglhZ2UgPSBzcHJvcHMueTsKCWxpZmVfdGltZSA9IHNwcm9wcy56OwoJc2l6ZSA9IHNwcm9wcy53OwoKCWxvY2F0aW9uID0gbG9jOwoJdmVsb2NpdHkgPSB2ZWw7Cglhbmd1bGFyX3ZlbG9jaXR5ID0gYXZlbDsKfQoKdm9pZCB2ZWN0X25vcm1hbGl6ZSh2ZWMzIHZpbiwgb3V0IHZlYzMgdm91dCkKewoJdm91dCA9IG5vcm1hbGl6ZSh2aW4pOwp9Cgp2b2lkIGRpcmVjdGlvbl90cmFuc2Zvcm1fbTR2Myh2ZWMzIHZpbiwgbWF0NCBtYXQsIG91dCB2ZWMzIHZvdXQpCnsKCXZvdXQgPSAobWF0ICogdmVjNCh2aW4sIDAuMCkpLnh5ejsKfQoKdm9pZCBwb2ludF90cmFuc2Zvcm1fbTR2Myh2ZWMzIHZpbiwgbWF0NCBtYXQsIG91dCB2ZWMzIHZvdXQpCnsKCXZvdXQgPSAobWF0ICogdmVjNCh2aW4sIDEuMCkpLnh5ejsKfQoKdm9pZCBwb2ludF90ZXhjb19yZW1hcF9zcXVhcmUodmVjMyB2aW4sIG91dCB2ZWMzIHZvdXQpCnsKCXZvdXQgPSB2ZWMzKHZpbiAtIHZlYzMoMC41LCAwLjUsIDAuNSkpICogMi4wOwp9Cgp2b2lkIHBvaW50X21hcF90b19zcGhlcmUodmVjMyB2aW4sIG91dCB2ZWMzIHZvdXQpCnsKCWZsb2F0IGxlbiA9IGxlbmd0aCh2aW4pOwoJZmxvYXQgdiwgdTsKCWlmIChsZW4gPiAwLjApIHsKCQlpZiAodmluLnggPT0gMC4wICYmIHZpbi55ID09IDAuMCkKCQkJdSA9IDAuMDsKCQllbHNlCgkJCXUgPSAoMS4wIC0gYXRhbih2aW4ueCwgdmluLnkpIC8gTV9QSSkgLyAyLjA7CgoJCXYgPSAxLjAgLSBhY29zKHZpbi56IC8gbGVuKSAvIE1fUEk7Cgl9CgllbHNlCgkJdiA9IHUgPSAwLjA7CgoJdm91dCA9IHZlYzModSwgdiwgMC4wKTsKfQoKdm9pZCBwb2ludF9tYXBfdG9fdHViZSh2ZWMzIHZpbiwgb3V0IHZlYzMgdm91dCkKewoJZmxvYXQgdSwgdjsKCXYgPSAodmluLnogKyAxLjApICogMC41OwoJZmxvYXQgbGVuID0gc3FydCh2aW4ueCAqIHZpbi54ICsgdmluLnkgKiB2aW5bMV0pOwoJaWYgKGxlbiA+IDAuMCkKCQl1ID0gKDEuMCAtIChhdGFuKHZpbi54IC8gbGVuLCB2aW4ueSAvIGxlbikgLyBNX1BJKSkgKiAwLjU7CgllbHNlCgkJdiA9IHUgPSAwLjA7CgoJdm91dCA9IHZlYzModSwgdiwgMC4wKTsKfQoKdm9pZCBtYXBwaW5nKHZlYzMgdmVjLCBtYXQ0IG1hdCwgdmVjMyBtaW52ZWMsIHZlYzMgbWF4dmVjLCBmbG9hdCBkb21pbiwgZmxvYXQgZG9tYXgsIG91dCB2ZWMzIG91dHZlYykKewoJb3V0dmVjID0gKG1hdCAqIHZlYzQodmVjLCAxLjApKS54eXo7CglpZiAoZG9taW4gPT0gMS4wKQoJCW91dHZlYyA9IG1heChvdXR2ZWMsIG1pbnZlYyk7CglpZiAoZG9tYXggPT0gMS4wKQoJCW91dHZlYyA9IG1pbihvdXR2ZWMsIG1heHZlYyk7Cn0KCnZvaWQgY2FtZXJhKHZlYzMgY28sIG91dCB2ZWMzIG91dHZpZXcsIG91dCBmbG9hdCBvdXRkZXB0aCwgb3V0IGZsb2F0IG91dGRpc3QpCnsKCW91dGRlcHRoID0gYWJzKGNvLnopOwoJb3V0ZGlzdCA9IGxlbmd0aChjbyk7CglvdXR2aWV3ID0gbm9ybWFsaXplKGNvKTsKfQoKdm9pZCBsYW1wKAogICAgICAgIHZlYzQgY29sLCBmbG9hdCBlbmVyZ3ksIHZlYzMgbHYsIGZsb2F0IGRpc3QsIHZlYzMgc2hhZG93LCBmbG9hdCB2aXNpZmFjLAogICAgICAgIG91dCB2ZWM0IG91dGNvbCwgb3V0IHZlYzMgb3V0bHYsIG91dCBmbG9hdCBvdXRkaXN0LCBvdXQgdmVjNCBvdXRzaGFkb3csIG91dCBmbG9hdCBvdXR2aXNpZmFjKQp7CglvdXRjb2wgPSBjb2wgKiBlbmVyZ3k7CglvdXRsdiA9IGx2OwoJb3V0ZGlzdCA9IGRpc3Q7CglvdXRzaGFkb3cgPSB2ZWM0KHNoYWRvdywgMS4wKTsKCW91dHZpc2lmYWMgPSB2aXNpZmFjOwp9Cgp2b2lkIG1hdGhfYWRkKGZsb2F0IHZhbDEsIGZsb2F0IHZhbDIsIG91dCBmbG9hdCBvdXR2YWwpCnsKCW91dHZhbCA9IHZhbDEgKyB2YWwyOwp9Cgp2b2lkIG1hdGhfc3VidHJhY3QoZmxvYXQgdmFsMSwgZmxvYXQgdmFsMiwgb3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gdmFsMSAtIHZhbDI7Cn0KCnZvaWQgbWF0aF9tdWx0aXBseShmbG9hdCB2YWwxLCBmbG9hdCB2YWwyLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2YWwgPSB2YWwxICogdmFsMjsKfQoKdm9pZCBtYXRoX2RpdmlkZShmbG9hdCB2YWwxLCBmbG9hdCB2YWwyLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglpZiAodmFsMiA9PSAwLjApCgkJb3V0dmFsID0gMC4wOwoJZWxzZQoJCW91dHZhbCA9IHZhbDEgLyB2YWwyOwp9Cgp2b2lkIG1hdGhfc2luZShmbG9hdCB2YWwsIG91dCBmbG9hdCBvdXR2YWwpCnsKCW91dHZhbCA9IHNpbih2YWwpOwp9Cgp2b2lkIG1hdGhfY29zaW5lKGZsb2F0IHZhbCwgb3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gY29zKHZhbCk7Cn0KCnZvaWQgbWF0aF90YW5nZW50KGZsb2F0IHZhbCwgb3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gdGFuKHZhbCk7Cn0KCnZvaWQgbWF0aF9hc2luKGZsb2F0IHZhbCwgb3V0IGZsb2F0IG91dHZhbCkKewoJaWYgKHZhbCA8PSAxLjAgJiYgdmFsID49IC0xLjApCgkJb3V0dmFsID0gYXNpbih2YWwpOwoJZWxzZQoJCW91dHZhbCA9IDAuMDsKfQoKdm9pZCBtYXRoX2Fjb3MoZmxvYXQgdmFsLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglpZiAodmFsIDw9IDEuMCAmJiB2YWwgPj0gLTEuMCkKCQlvdXR2YWwgPSBhY29zKHZhbCk7CgllbHNlCgkJb3V0dmFsID0gMC4wOwp9Cgp2b2lkIG1hdGhfYXRhbihmbG9hdCB2YWwsIG91dCBmbG9hdCBvdXR2YWwpCnsKCW91dHZhbCA9IGF0YW4odmFsKTsKfQoKdm9pZCBtYXRoX3BvdyhmbG9hdCB2YWwxLCBmbG9hdCB2YWwyLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglpZiAodmFsMSA+PSAwLjApIHsKCQlvdXR2YWwgPSBjb21wYXRpYmxlX3Bvdyh2YWwxLCB2YWwyKTsKCX0KCWVsc2UgewoJCWZsb2F0IHZhbDJfbW9kXzEgPSBtb2QoYWJzKHZhbDIpLCAxLjApOwoKCQlpZiAodmFsMl9tb2RfMSA+IDAuOTk5IHx8IHZhbDJfbW9kXzEgPCAwLjAwMSkKCQkJb3V0dmFsID0gY29tcGF0aWJsZV9wb3codmFsMSwgZmxvb3IodmFsMiArIDAuNSkpOwoJCWVsc2UKCQkJb3V0dmFsID0gMC4wOwoJfQp9Cgp2b2lkIG1hdGhfbG9nKGZsb2F0IHZhbDEsIGZsb2F0IHZhbDIsIG91dCBmbG9hdCBvdXR2YWwpCnsKCWlmICh2YWwxID4gMC4wICAmJiB2YWwyID4gMC4wKQoJCW91dHZhbCA9IGxvZzIodmFsMSkgLyBsb2cyKHZhbDIpOwoJZWxzZQoJCW91dHZhbCA9IDAuMDsKfQoKdm9pZCBtYXRoX21heChmbG9hdCB2YWwxLCBmbG9hdCB2YWwyLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2YWwgPSBtYXgodmFsMSwgdmFsMik7Cn0KCnZvaWQgbWF0aF9taW4oZmxvYXQgdmFsMSwgZmxvYXQgdmFsMiwgb3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gbWluKHZhbDEsIHZhbDIpOwp9Cgp2b2lkIG1hdGhfcm91bmQoZmxvYXQgdmFsLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2YWwgPSBmbG9vcih2YWwgKyAwLjUpOwp9Cgp2b2lkIG1hdGhfbGVzc190aGFuKGZsb2F0IHZhbDEsIGZsb2F0IHZhbDIsIG91dCBmbG9hdCBvdXR2YWwpCnsKCWlmICh2YWwxIDwgdmFsMikKCQlvdXR2YWwgPSAxLjA7CgllbHNlCgkJb3V0dmFsID0gMC4wOwp9Cgp2b2lkIG1hdGhfZ3JlYXRlcl90aGFuKGZsb2F0IHZhbDEsIGZsb2F0IHZhbDIsIG91dCBmbG9hdCBvdXR2YWwpCnsKCWlmICh2YWwxID4gdmFsMikKCQlvdXR2YWwgPSAxLjA7CgllbHNlCgkJb3V0dmFsID0gMC4wOwp9Cgp2b2lkIG1hdGhfbW9kdWxvKGZsb2F0IHZhbDEsIGZsb2F0IHZhbDIsIG91dCBmbG9hdCBvdXR2YWwpCnsKCWlmICh2YWwyID09IDAuMCkKCQlvdXR2YWwgPSAwLjA7CgllbHNlCgkJb3V0dmFsID0gbW9kKHZhbDEsIHZhbDIpOwoKCS8qIGNoYW5nZSBzaWduIHRvIG1hdGNoIEMgY29udmVudGlvbiwgbW9kIHZhcnlpbmcgR0xTTCB3aWxsIHRha2UgYWJzb2x1dGUgZm9yIG5lZ2F0aXZlIG51bWJlcnMsCgkgKiBzZWUgaHR0cHM6Ly93d3cub3BlbmdsLm9yZy9zZGsvZG9jcy9tYW4vaHRtbC9tb2QueGh0bWwgKi8KCW91dHZhbCA9ICh2YWwxID4gMC4wKSA/IG91dHZhbCA6IC1vdXR2YWw7Cn0KCnZvaWQgbWF0aF9hYnMoZmxvYXQgdmFsMSwgb3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gYWJzKHZhbDEpOwp9Cgp2b2lkIHNxdWVlemUoZmxvYXQgdmFsLCBmbG9hdCB3aWR0aCwgZmxvYXQgY2VudGVyLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2YWwgPSAxLjAgLyAoMS4wICsgcG93KDIuNzE4MjgxODMsIC0oKHZhbCAtIGNlbnRlcikgKiB3aWR0aCkpKTsKfQoKdm9pZCB2ZWNfbWF0aF9hZGQodmVjMyB2MSwgdmVjMyB2Miwgb3V0IHZlYzMgb3V0dmVjLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2ZWMgPSB2MSArIHYyOwoJb3V0dmFsID0gKGFicyhvdXR2ZWNbMF0pICsgYWJzKG91dHZlY1sxXSkgKyBhYnMob3V0dmVjWzJdKSkgLyAzLjA7Cn0KCnZvaWQgdmVjX21hdGhfc3ViKHZlYzMgdjEsIHZlYzMgdjIsIG91dCB2ZWMzIG91dHZlYywgb3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmVjID0gdjEgLSB2MjsKCW91dHZhbCA9IChhYnMob3V0dmVjWzBdKSArIGFicyhvdXR2ZWNbMV0pICsgYWJzKG91dHZlY1syXSkpIC8gMy4wOwp9Cgp2b2lkIHZlY19tYXRoX2F2ZXJhZ2UodmVjMyB2MSwgdmVjMyB2Miwgb3V0IHZlYzMgb3V0dmVjLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2ZWMgPSB2MSArIHYyOwoJb3V0dmFsID0gbGVuZ3RoKG91dHZlYyk7CglvdXR2ZWMgPSBub3JtYWxpemUob3V0dmVjKTsKfQp2b2lkIHZlY19tYXRoX21peChmbG9hdCBzdHJlbmd0aCwgdmVjMyB2MSwgdmVjMyB2Miwgb3V0IHZlYzMgb3V0dmVjKQp7CglvdXR2ZWMgPSBzdHJlbmd0aCAqIHYxICsgKDEgLSBzdHJlbmd0aCkgKiB2MjsKfQoKdm9pZCB2ZWNfbWF0aF9kb3QodmVjMyB2MSwgdmVjMyB2Miwgb3V0IHZlYzMgb3V0dmVjLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2ZWMgPSB2ZWMzKDAsIDAsIDApOwoJb3V0dmFsID0gZG90KHYxLCB2Mik7Cn0KCnZvaWQgdmVjX21hdGhfY3Jvc3ModmVjMyB2MSwgdmVjMyB2Miwgb3V0IHZlYzMgb3V0dmVjLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2ZWMgPSBjcm9zcyh2MSwgdjIpOwoJb3V0dmFsID0gbGVuZ3RoKG91dHZlYyk7CglvdXR2ZWMgLz0gb3V0dmFsOwp9Cgp2b2lkIHZlY19tYXRoX25vcm1hbGl6ZSh2ZWMzIHYsIG91dCB2ZWMzIG91dHZlYywgb3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gbGVuZ3RoKHYpOwoJb3V0dmVjID0gbm9ybWFsaXplKHYpOwp9Cgp2b2lkIHZlY19tYXRoX25lZ2F0ZSh2ZWMzIHYsIG91dCB2ZWMzIG91dHYpCnsKCW91dHYgPSAtdjsKfQoKdm9pZCBpbnZlcnRfeih2ZWMzIHYsIG91dCB2ZWMzIG91dHYpCnsKCXYueiA9IC12Lno7CglvdXR2ID0gdjsKfQoKdm9pZCBub3JtYWwodmVjMyBkaXIsIHZlYzMgbm9yLCBvdXQgdmVjMyBvdXRub3IsIG91dCBmbG9hdCBvdXRkb3QpCnsKCW91dG5vciA9IG5vcjsKCW91dGRvdCA9IC1kb3QoZGlyLCBub3IpOwp9Cgp2b2lkIG5vcm1hbF9uZXdfc2hhZGluZyh2ZWMzIGRpciwgdmVjMyBub3IsIG91dCB2ZWMzIG91dG5vciwgb3V0IGZsb2F0IG91dGRvdCkKewoJb3V0bm9yID0gbm9ybWFsaXplKG5vcik7CglvdXRkb3QgPSBkb3Qobm9ybWFsaXplKGRpciksIG5vcik7Cn0KCnZvaWQgY3VydmVzX3ZlYyhmbG9hdCBmYWMsIHZlYzMgdmVjLCBzYW1wbGVyMkQgY3VydmVtYXAsIG91dCB2ZWMzIG91dHZlYykKewoJb3V0dmVjLnggPSB0ZXh0dXJlMkQoY3VydmVtYXAsIHZlYzIoKHZlYy54ICsgMS4wKSAqIDAuNSwgMC4wKSkueDsKCW91dHZlYy55ID0gdGV4dHVyZTJEKGN1cnZlbWFwLCB2ZWMyKCh2ZWMueSArIDEuMCkgKiAwLjUsIDAuMCkpLnk7CglvdXR2ZWMueiA9IHRleHR1cmUyRChjdXJ2ZW1hcCwgdmVjMigodmVjLnogKyAxLjApICogMC41LCAwLjApKS56OwoKCWlmIChmYWMgIT0gMS4wKQoJCW91dHZlYyA9IChvdXR2ZWMgKiBmYWMpICsgKHZlYyAqICgxLjAgLSBmYWMpKTsKCn0KCnZvaWQgY3VydmVzX3JnYihmbG9hdCBmYWMsIHZlYzQgY29sLCBzYW1wbGVyMkQgY3VydmVtYXAsIG91dCB2ZWM0IG91dGNvbCkKewoJb3V0Y29sLnIgPSB0ZXh0dXJlMkQoY3VydmVtYXAsIHZlYzIodGV4dHVyZTJEKGN1cnZlbWFwLCB2ZWMyKGNvbC5yLCAwLjApKS5hLCAwLjApKS5yOwoJb3V0Y29sLmcgPSB0ZXh0dXJlMkQoY3VydmVtYXAsIHZlYzIodGV4dHVyZTJEKGN1cnZlbWFwLCB2ZWMyKGNvbC5nLCAwLjApKS5hLCAwLjApKS5nOwoJb3V0Y29sLmIgPSB0ZXh0dXJlMkQoY3VydmVtYXAsIHZlYzIodGV4dHVyZTJEKGN1cnZlbWFwLCB2ZWMyKGNvbC5iLCAwLjApKS5hLCAwLjApKS5iOwoKCWlmIChmYWMgIT0gMS4wKQoJCW91dGNvbCA9IChvdXRjb2wgKiBmYWMpICsgKGNvbCAqICgxLjAgLSBmYWMpKTsKCglvdXRjb2wuYSA9IGNvbC5hOwp9Cgp2b2lkIHNldF92YWx1ZShmbG9hdCB2YWwsIG91dCBmbG9hdCBvdXR2YWwpCnsKCW91dHZhbCA9IHZhbDsKfQoKdm9pZCBzZXRfcmdiKHZlYzMgY29sLCBvdXQgdmVjMyBvdXRjb2wpCnsKCW91dGNvbCA9IGNvbDsKfQoKdm9pZCBzZXRfcmdiYSh2ZWM0IGNvbCwgb3V0IHZlYzQgb3V0Y29sKQp7CglvdXRjb2wgPSBjb2w7Cn0KCnZvaWQgc2V0X3ZhbHVlX3plcm8ob3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gMC4wOwp9Cgp2b2lkIHNldF92YWx1ZV9vbmUob3V0IGZsb2F0IG91dHZhbCkKewoJb3V0dmFsID0gMS4wOwp9Cgp2b2lkIHNldF9yZ2JfemVybyhvdXQgdmVjMyBvdXR2YWwpCnsKCW91dHZhbCA9IHZlYzMoMC4wKTsKfQoKdm9pZCBzZXRfcmdiX29uZShvdXQgdmVjMyBvdXR2YWwpCnsKCW91dHZhbCA9IHZlYzMoMS4wKTsKfQoKdm9pZCBzZXRfcmdiYV96ZXJvKG91dCB2ZWM0IG91dHZhbCkKewoJb3V0dmFsID0gdmVjNCgwLjApOwp9Cgp2b2lkIHNldF9yZ2JhX29uZShvdXQgdmVjNCBvdXR2YWwpCnsKCW91dHZhbCA9IHZlYzQoMS4wKTsKfQoKdm9pZCBicmlnaHRuZXNzX2NvbnRyYXN0KHZlYzQgY29sLCBmbG9hdCBicmlnaHRuZXNzLCBmbG9hdCBjb250cmFzdCwgb3V0IHZlYzQgb3V0Y29sKQp7CglmbG9hdCBhID0gMS4wICsgY29udHJhc3Q7CglmbG9hdCBiID0gYnJpZ2h0bmVzcyAtIGNvbnRyYXN0ICogMC41OwoKCW91dGNvbC5yID0gbWF4KGEgKiBjb2wuciArIGIsIDAuMCk7CglvdXRjb2wuZyA9IG1heChhICogY29sLmcgKyBiLCAwLjApOwoJb3V0Y29sLmIgPSBtYXgoYSAqIGNvbC5iICsgYiwgMC4wKTsKCW91dGNvbC5hID0gY29sLmE7Cn0KCnZvaWQgbWl4X2JsZW5kKGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglvdXRjb2wgPSBtaXgoY29sMSwgY29sMiwgZmFjKTsKCW91dGNvbC5hID0gY29sMS5hOwp9Cgp2b2lkIG1peF9hZGQoZmxvYXQgZmFjLCB2ZWM0IGNvbDEsIHZlYzQgY29sMiwgb3V0IHZlYzQgb3V0Y29sKQp7CglmYWMgPSBjbGFtcChmYWMsIDAuMCwgMS4wKTsKCW91dGNvbCA9IG1peChjb2wxLCBjb2wxICsgY29sMiwgZmFjKTsKCW91dGNvbC5hID0gY29sMS5hOwp9Cgp2b2lkIG1peF9tdWx0KGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglvdXRjb2wgPSBtaXgoY29sMSwgY29sMSAqIGNvbDIsIGZhYyk7CglvdXRjb2wuYSA9IGNvbDEuYTsKfQoKdm9pZCBtaXhfc2NyZWVuKGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglmbG9hdCBmYWNtID0gMS4wIC0gZmFjOwoKCW91dGNvbCA9IHZlYzQoMS4wKSAtICh2ZWM0KGZhY20pICsgZmFjICogKHZlYzQoMS4wKSAtIGNvbDIpKSAqICh2ZWM0KDEuMCkgLSBjb2wxKTsKCW91dGNvbC5hID0gY29sMS5hOwp9Cgp2b2lkIG1peF9vdmVybGF5KGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglmbG9hdCBmYWNtID0gMS4wIC0gZmFjOwoKCW91dGNvbCA9IGNvbDE7CgoJaWYgKG91dGNvbC5yIDwgMC41KQoJCW91dGNvbC5yICo9IGZhY20gKyAyLjAgKiBmYWMgKiBjb2wyLnI7CgllbHNlCgkJb3V0Y29sLnIgPSAxLjAgLSAoZmFjbSArIDIuMCAqIGZhYyAqICgxLjAgLSBjb2wyLnIpKSAqICgxLjAgLSBvdXRjb2wucik7CgoJaWYgKG91dGNvbC5nIDwgMC41KQoJCW91dGNvbC5nICo9IGZhY20gKyAyLjAgKiBmYWMgKiBjb2wyLmc7CgllbHNlCgkJb3V0Y29sLmcgPSAxLjAgLSAoZmFjbSArIDIuMCAqIGZhYyAqICgxLjAgLSBjb2wyLmcpKSAqICgxLjAgLSBvdXRjb2wuZyk7CgoJaWYgKG91dGNvbC5iIDwgMC41KQoJCW91dGNvbC5iICo9IGZhY20gKyAyLjAgKiBmYWMgKiBjb2wyLmI7CgllbHNlCgkJb3V0Y29sLmIgPSAxLjAgLSAoZmFjbSArIDIuMCAqIGZhYyAqICgxLjAgLSBjb2wyLmIpKSAqICgxLjAgLSBvdXRjb2wuYik7Cn0KCnZvaWQgbWl4X3N1YihmbG9hdCBmYWMsIHZlYzQgY29sMSwgdmVjNCBjb2wyLCBvdXQgdmVjNCBvdXRjb2wpCnsKCWZhYyA9IGNsYW1wKGZhYywgMC4wLCAxLjApOwoJb3V0Y29sID0gbWl4KGNvbDEsIGNvbDEgLSBjb2wyLCBmYWMpOwoJb3V0Y29sLmEgPSBjb2wxLmE7Cn0KCnZvaWQgbWl4X2RpdihmbG9hdCBmYWMsIHZlYzQgY29sMSwgdmVjNCBjb2wyLCBvdXQgdmVjNCBvdXRjb2wpCnsKCWZhYyA9IGNsYW1wKGZhYywgMC4wLCAxLjApOwoJZmxvYXQgZmFjbSA9IDEuMCAtIGZhYzsKCglvdXRjb2wgPSBjb2wxOwoKCWlmIChjb2wyLnIgIT0gMC4wKSBvdXRjb2wuciA9IGZhY20gKiBvdXRjb2wuciArIGZhYyAqIG91dGNvbC5yIC8gY29sMi5yOwoJaWYgKGNvbDIuZyAhPSAwLjApIG91dGNvbC5nID0gZmFjbSAqIG91dGNvbC5nICsgZmFjICogb3V0Y29sLmcgLyBjb2wyLmc7CglpZiAoY29sMi5iICE9IDAuMCkgb3V0Y29sLmIgPSBmYWNtICogb3V0Y29sLmIgKyBmYWMgKiBvdXRjb2wuYiAvIGNvbDIuYjsKfQoKdm9pZCBtaXhfZGlmZihmbG9hdCBmYWMsIHZlYzQgY29sMSwgdmVjNCBjb2wyLCBvdXQgdmVjNCBvdXRjb2wpCnsKCWZhYyA9IGNsYW1wKGZhYywgMC4wLCAxLjApOwoJb3V0Y29sID0gbWl4KGNvbDEsIGFicyhjb2wxIC0gY29sMiksIGZhYyk7CglvdXRjb2wuYSA9IGNvbDEuYTsKfQoKdm9pZCBtaXhfZGFyayhmbG9hdCBmYWMsIHZlYzQgY29sMSwgdmVjNCBjb2wyLCBvdXQgdmVjNCBvdXRjb2wpCnsKCWZhYyA9IGNsYW1wKGZhYywgMC4wLCAxLjApOwoJb3V0Y29sLnJnYiA9IG1pbihjb2wxLnJnYiwgY29sMi5yZ2IgKiBmYWMpOwoJb3V0Y29sLmEgPSBjb2wxLmE7Cn0KCnZvaWQgbWl4X2xpZ2h0KGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglvdXRjb2wucmdiID0gbWF4KGNvbDEucmdiLCBjb2wyLnJnYiAqIGZhYyk7CglvdXRjb2wuYSA9IGNvbDEuYTsKfQoKdm9pZCBtaXhfZG9kZ2UoZmxvYXQgZmFjLCB2ZWM0IGNvbDEsIHZlYzQgY29sMiwgb3V0IHZlYzQgb3V0Y29sKQp7CglmYWMgPSBjbGFtcChmYWMsIDAuMCwgMS4wKTsKCW91dGNvbCA9IGNvbDE7CgoJaWYgKG91dGNvbC5yICE9IDAuMCkgewoJCWZsb2F0IHRtcCA9IDEuMCAtIGZhYyAqIGNvbDIucjsKCQlpZiAodG1wIDw9IDAuMCkKCQkJb3V0Y29sLnIgPSAxLjA7CgkJZWxzZSBpZiAoKHRtcCA9IG91dGNvbC5yIC8gdG1wKSA+IDEuMCkKCQkJb3V0Y29sLnIgPSAxLjA7CgkJZWxzZQoJCQlvdXRjb2wuciA9IHRtcDsKCX0KCWlmIChvdXRjb2wuZyAhPSAwLjApIHsKCQlmbG9hdCB0bXAgPSAxLjAgLSBmYWMgKiBjb2wyLmc7CgkJaWYgKHRtcCA8PSAwLjApCgkJCW91dGNvbC5nID0gMS4wOwoJCWVsc2UgaWYgKCh0bXAgPSBvdXRjb2wuZyAvIHRtcCkgPiAxLjApCgkJCW91dGNvbC5nID0gMS4wOwoJCWVsc2UKCQkJb3V0Y29sLmcgPSB0bXA7Cgl9CglpZiAob3V0Y29sLmIgIT0gMC4wKSB7CgkJZmxvYXQgdG1wID0gMS4wIC0gZmFjICogY29sMi5iOwoJCWlmICh0bXAgPD0gMC4wKQoJCQlvdXRjb2wuYiA9IDEuMDsKCQllbHNlIGlmICgodG1wID0gb3V0Y29sLmIgLyB0bXApID4gMS4wKQoJCQlvdXRjb2wuYiA9IDEuMDsKCQllbHNlCgkJCW91dGNvbC5iID0gdG1wOwoJfQp9Cgp2b2lkIG1peF9idXJuKGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglmbG9hdCB0bXAsIGZhY20gPSAxLjAgLSBmYWM7CgoJb3V0Y29sID0gY29sMTsKCgl0bXAgPSBmYWNtICsgZmFjICogY29sMi5yOwoJaWYgKHRtcCA8PSAwLjApCgkJb3V0Y29sLnIgPSAwLjA7CgllbHNlIGlmICgodG1wID0gKDEuMCAtICgxLjAgLSBvdXRjb2wucikgLyB0bXApKSA8IDAuMCkKCQlvdXRjb2wuciA9IDAuMDsKCWVsc2UgaWYgKHRtcCA+IDEuMCkKCQlvdXRjb2wuciA9IDEuMDsKCWVsc2UKCQlvdXRjb2wuciA9IHRtcDsKCgl0bXAgPSBmYWNtICsgZmFjICogY29sMi5nOwoJaWYgKHRtcCA8PSAwLjApCgkJb3V0Y29sLmcgPSAwLjA7CgllbHNlIGlmICgodG1wID0gKDEuMCAtICgxLjAgLSBvdXRjb2wuZykgLyB0bXApKSA8IDAuMCkKCQlvdXRjb2wuZyA9IDAuMDsKCWVsc2UgaWYgKHRtcCA+IDEuMCkKCQlvdXRjb2wuZyA9IDEuMDsKCWVsc2UKCQlvdXRjb2wuZyA9IHRtcDsKCgl0bXAgPSBmYWNtICsgZmFjICogY29sMi5iOwoJaWYgKHRtcCA8PSAwLjApCgkJb3V0Y29sLmIgPSAwLjA7CgllbHNlIGlmICgodG1wID0gKDEuMCAtICgxLjAgLSBvdXRjb2wuYikgLyB0bXApKSA8IDAuMCkKCQlvdXRjb2wuYiA9IDAuMDsKCWVsc2UgaWYgKHRtcCA+IDEuMCkKCQlvdXRjb2wuYiA9IDEuMDsKCWVsc2UKCQlvdXRjb2wuYiA9IHRtcDsKfQoKdm9pZCBtaXhfaHVlKGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglmbG9hdCBmYWNtID0gMS4wIC0gZmFjOwoKCW91dGNvbCA9IGNvbDE7CgoJdmVjNCBoc3YsIGhzdjIsIHRtcDsKCXJnYl90b19oc3YoY29sMiwgaHN2Mik7CgoJaWYgKGhzdjIueSAhPSAwLjApIHsKCQlyZ2JfdG9faHN2KG91dGNvbCwgaHN2KTsKCQloc3YueCA9IGhzdjIueDsKCQloc3ZfdG9fcmdiKGhzdiwgdG1wKTsKCgkJb3V0Y29sID0gbWl4KG91dGNvbCwgdG1wLCBmYWMpOwoJCW91dGNvbC5hID0gY29sMS5hOwoJfQp9Cgp2b2lkIG1peF9zYXQoZmxvYXQgZmFjLCB2ZWM0IGNvbDEsIHZlYzQgY29sMiwgb3V0IHZlYzQgb3V0Y29sKQp7CglmYWMgPSBjbGFtcChmYWMsIDAuMCwgMS4wKTsKCWZsb2F0IGZhY20gPSAxLjAgLSBmYWM7CgoJb3V0Y29sID0gY29sMTsKCgl2ZWM0IGhzdiwgaHN2MjsKCXJnYl90b19oc3Yob3V0Y29sLCBoc3YpOwoKCWlmIChoc3YueSAhPSAwLjApIHsKCQlyZ2JfdG9faHN2KGNvbDIsIGhzdjIpOwoKCQloc3YueSA9IGZhY20gKiBoc3YueSArIGZhYyAqIGhzdjIueTsKCQloc3ZfdG9fcmdiKGhzdiwgb3V0Y29sKTsKCX0KfQoKdm9pZCBtaXhfdmFsKGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CglmbG9hdCBmYWNtID0gMS4wIC0gZmFjOwoKCXZlYzQgaHN2LCBoc3YyOwoJcmdiX3RvX2hzdihjb2wxLCBoc3YpOwoJcmdiX3RvX2hzdihjb2wyLCBoc3YyKTsKCgloc3YueiA9IGZhY20gKiBoc3YueiArIGZhYyAqIGhzdjIuejsKCWhzdl90b19yZ2IoaHN2LCBvdXRjb2wpOwp9Cgp2b2lkIG1peF9jb2xvcihmbG9hdCBmYWMsIHZlYzQgY29sMSwgdmVjNCBjb2wyLCBvdXQgdmVjNCBvdXRjb2wpCnsKCWZhYyA9IGNsYW1wKGZhYywgMC4wLCAxLjApOwoJZmxvYXQgZmFjbSA9IDEuMCAtIGZhYzsKCglvdXRjb2wgPSBjb2wxOwoKCXZlYzQgaHN2LCBoc3YyLCB0bXA7CglyZ2JfdG9faHN2KGNvbDIsIGhzdjIpOwoKCWlmIChoc3YyLnkgIT0gMC4wKSB7CgkJcmdiX3RvX2hzdihvdXRjb2wsIGhzdik7CgkJaHN2LnggPSBoc3YyLng7CgkJaHN2LnkgPSBoc3YyLnk7CgkJaHN2X3RvX3JnYihoc3YsIHRtcCk7CgoJCW91dGNvbCA9IG1peChvdXRjb2wsIHRtcCwgZmFjKTsKCQlvdXRjb2wuYSA9IGNvbDEuYTsKCX0KfQoKdm9pZCBtaXhfc29mdChmbG9hdCBmYWMsIHZlYzQgY29sMSwgdmVjNCBjb2wyLCBvdXQgdmVjNCBvdXRjb2wpCnsKCWZhYyA9IGNsYW1wKGZhYywgMC4wLCAxLjApOwoJZmxvYXQgZmFjbSA9IDEuMCAtIGZhYzsKCgl2ZWM0IG9uZSA9IHZlYzQoMS4wKTsKCXZlYzQgc2NyID0gb25lIC0gKG9uZSAtIGNvbDIpICogKG9uZSAtIGNvbDEpOwoJb3V0Y29sID0gZmFjbSAqIGNvbDEgKyBmYWMgKiAoKG9uZSAtIGNvbDEpICogY29sMiAqIGNvbDEgKyBjb2wxICogc2NyKTsKfQoKdm9pZCBtaXhfbGluZWFyKGZsb2F0IGZhYywgdmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJZmFjID0gY2xhbXAoZmFjLCAwLjAsIDEuMCk7CgoJb3V0Y29sID0gY29sMSArIGZhYyAqICgyLjAgKiAoY29sMiAtIHZlYzQoMC41KSkpOwp9Cgp2b2lkIHZhbHRvcmdiKGZsb2F0IGZhYywgc2FtcGxlcjJEIGNvbG9ybWFwLCBvdXQgdmVjNCBvdXRjb2wsIG91dCBmbG9hdCBvdXRhbHBoYSkKewoJb3V0Y29sID0gdGV4dHVyZTJEKGNvbG9ybWFwLCB2ZWMyKGZhYywgMC4wKSk7CglvdXRhbHBoYSA9IG91dGNvbC5hOwp9Cgp2b2lkIHJnYnRvYncodmVjNCBjb2xvciwgb3V0IGZsb2F0IG91dHZhbCkKewojaWZkZWYgVVNFX05FV19TSEFESU5HCglvdXR2YWwgPSBjb2xvci5yICogMC4yMTI2ICsgY29sb3IuZyAqIDAuNzE1MiArIGNvbG9yLmIgKiAwLjA3MjI7CiNlbHNlCglvdXR2YWwgPSBjb2xvci5yICogMC4zNSArIGNvbG9yLmcgKiAwLjQ1ICsgY29sb3IuYiAqIDAuMjsgLyoga2VlcCB0aGVzZSBmYWN0b3JzIHZhcnlpbmcgc3luYyB3aXRoIHRleHR1cmUuaDpSR0JUT0JXICovCiNlbmRpZgp9Cgp2b2lkIGludmVydChmbG9hdCBmYWMsIHZlYzQgY29sLCBvdXQgdmVjNCBvdXRjb2wpCnsKCW91dGNvbC54eXogPSBtaXgoY29sLnh5eiwgdmVjMygxLjAsIDEuMCwgMS4wKSAtIGNvbC54eXosIGZhYyk7CglvdXRjb2wudyA9IGNvbC53Owp9Cgp2b2lkIGNsYW1wX3ZlYzModmVjMyB2ZWMsIHZlYzMgbWluLCB2ZWMzIG1heCwgb3V0IHZlYzMgb3V0X3ZlYykKewoJb3V0X3ZlYyA9IGNsYW1wKHZlYywgbWluLCBtYXgpOwp9Cgp2b2lkIGNsYW1wX3ZhbChmbG9hdCB2YWx1ZSwgZmxvYXQgbWluLCBmbG9hdCBtYXgsIG91dCBmbG9hdCBvdXRfdmFsdWUpCnsKCW91dF92YWx1ZSA9IGNsYW1wKHZhbHVlLCBtaW4sIG1heCk7Cn0KCnZvaWQgaHVlX3NhdChmbG9hdCBodWUsIGZsb2F0IHNhdCwgZmxvYXQgdmFsdWUsIGZsb2F0IGZhYywgdmVjNCBjb2wsIG91dCB2ZWM0IG91dGNvbCkKewoJdmVjNCBoc3Y7CgoJcmdiX3RvX2hzdihjb2wsIGhzdik7CgoJaHN2WzBdICs9IChodWUgLSAwLjUpOwoJaWYgKGhzdlswXSA+IDEuMCkgaHN2WzBdIC09IDEuMDsgZWxzZSBpZiAoaHN2WzBdIDwgMC4wKSBoc3ZbMF0gKz0gMS4wOwoJaHN2WzFdICo9IHNhdDsKCWlmIChoc3ZbMV0gPiAxLjApIGhzdlsxXSA9IDEuMDsgZWxzZSBpZiAoaHN2WzFdIDwgMC4wKSBoc3ZbMV0gPSAwLjA7Cgloc3ZbMl0gKj0gdmFsdWU7CglpZiAoaHN2WzJdID4gMS4wKSBoc3ZbMl0gPSAxLjA7IGVsc2UgaWYgKGhzdlsyXSA8IDAuMCkgaHN2WzJdID0gMC4wOwoKCWhzdl90b19yZ2IoaHN2LCBvdXRjb2wpOwoKCW91dGNvbCA9IG1peChjb2wsIG91dGNvbCwgZmFjKTsKfQoKdm9pZCBzZXBhcmF0ZV9yZ2IodmVjNCBjb2wsIG91dCBmbG9hdCByLCBvdXQgZmxvYXQgZywgb3V0IGZsb2F0IGIpCnsKCXIgPSBjb2wucjsKCWcgPSBjb2wuZzsKCWIgPSBjb2wuYjsKfQoKdm9pZCBjb21iaW5lX3JnYihmbG9hdCByLCBmbG9hdCBnLCBmbG9hdCBiLCBvdXQgdmVjNCBjb2wpCnsKCWNvbCA9IHZlYzQociwgZywgYiwgMS4wKTsKfQoKdm9pZCBzZXBhcmF0ZV94eXoodmVjMyB2ZWMsIG91dCBmbG9hdCB4LCBvdXQgZmxvYXQgeSwgb3V0IGZsb2F0IHopCnsKCXggPSB2ZWMucjsKCXkgPSB2ZWMuZzsKCXogPSB2ZWMuYjsKfQoKdm9pZCBjb21iaW5lX3h5eihmbG9hdCB4LCBmbG9hdCB5LCBmbG9hdCB6LCBvdXQgdmVjMyB2ZWMpCnsKCXZlYyA9IHZlYzMoeCwgeSwgeik7Cn0KCnZvaWQgc2VwYXJhdGVfaHN2KHZlYzQgY29sLCBvdXQgZmxvYXQgaCwgb3V0IGZsb2F0IHMsIG91dCBmbG9hdCB2KQp7Cgl2ZWM0IGhzdjsKCglyZ2JfdG9faHN2KGNvbCwgaHN2KTsKCWggPSBoc3ZbMF07CglzID0gaHN2WzFdOwoJdiA9IGhzdlsyXTsKfQoKdm9pZCBjb21iaW5lX2hzdihmbG9hdCBoLCBmbG9hdCBzLCBmbG9hdCB2LCBvdXQgdmVjNCBjb2wpCnsKCWhzdl90b19yZ2IodmVjNChoLCBzLCB2LCAxLjApLCBjb2wpOwp9Cgp2b2lkIG91dHB1dF9ub2RlKHZlYzQgcmdiLCBmbG9hdCBhbHBoYSwgb3V0IHZlYzQgb3V0cmdiKQp7CglvdXRyZ2IgPSB2ZWM0KHJnYi5yZ2IsIGFscGhhKTsKfQoKLyoqKioqKioqKioqIFRFWFRVUkVTICoqKioqKioqKioqKioqKi8KCnZvaWQgdGV4dHVyZV9mbGlwX2JsZW5kKHZlYzMgdmVjLCBvdXQgdmVjMyBvdXR2ZWMpCnsKCW91dHZlYyA9IHZlYy55eHo7Cn0KCnZvaWQgdGV4dHVyZV9ibGVuZF9saW4odmVjMyB2ZWMsIG91dCBmbG9hdCBvdXR2YWwpCnsKCW91dHZhbCA9ICgxLjAgKyB2ZWMueCkgLyAyLjA7Cn0KCnZvaWQgdGV4dHVyZV9ibGVuZF9xdWFkKHZlYzMgdmVjLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2YWwgPSBtYXgoKDEuMCArIHZlYy54KSAvIDIuMCwgMC4wKTsKCW91dHZhbCAqPSBvdXR2YWw7Cn0KCnZvaWQgdGV4dHVyZV93b29kX3Npbih2ZWMzIHZlYywgb3V0IGZsb2F0IHZhbHVlLCBvdXQgdmVjNCBjb2xvciwgb3V0IHZlYzMgbm9ybWFsKQp7CglmbG9hdCBhID0gc3FydCh2ZWMueCAqIHZlYy54ICsgdmVjLnkgKiB2ZWMueSArIHZlYy56ICogdmVjLnopICogMjAuMDsKCWZsb2F0IHdpID0gMC41ICsgMC41ICogc2luKGEpOwoKCXZhbHVlID0gd2k7Cgljb2xvciA9IHZlYzQod2ksIHdpLCB3aSwgMS4wKTsKCW5vcm1hbCA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7Cn0KCnZvaWQgdGV4dHVyZV9pbWFnZSh2ZWMzIHZlYywgc2FtcGxlcjJEIGltYSwgb3V0IGZsb2F0IHZhbHVlLCBvdXQgdmVjNCBjb2xvciwgb3V0IHZlYzMgbm9ybWFsKQp7Cgljb2xvciA9IHRleHR1cmUyRChpbWEsICh2ZWMueHkgKyB2ZWMyKDEuMCwgMS4wKSkgKiAwLjUpOwoJdmFsdWUgPSBjb2xvci5hOwoKCW5vcm1hbC54ID0gMi4wICogKGNvbG9yLnIgLSAwLjUpOwoJbm9ybWFsLnkgPSAyLjAgKiAoMC41IC0gY29sb3IuZyk7Cglub3JtYWwueiA9IDIuMCAqIChjb2xvci5iIC0gMC41KTsKfQoKLyoqKioqKioqKioqKiogTVRFWCAqKioqKioqKioqKioqKioqKi8KCnZvaWQgdGV4Y29fb3Jjbyh2ZWMzIGF0dG9yY28sIG91dCB2ZWMzIG9yY28pCnsKCW9yY28gPSBhdHRvcmNvOwp9Cgp2b2lkIHRleGNvX3V2KHZlYzIgYXR0dXYsIG91dCB2ZWMzIHV2KQp7CgkvKiBkaXNhYmxlZCBmb3Igbm93LCB3b3JrcyB0b2dldGhlciB3aXRoIGxlYXZpbmcgb3V0IG10ZXhfMmRfbWFwcGluZwoJICAgdXYgPSB2ZWMzKGF0dHV2KjIuMCAtIHZlYzIoMS4wLCAxLjApLCAwLjApOyAqLwoJdXYgPSB2ZWMzKGF0dHV2LCAwLjApOwp9Cgp2b2lkIHRleGNvX25vcm0odmVjMyBub3JtYWwsIG91dCB2ZWMzIG91dG5vcm1hbCkKewoJLyogY29ycmVzcG9uZHMgdG8gc2hpLT5vcm4sIHdoaWNoIGlzIG5lZ2F0ZWQgc28gY2FuY2VscwoJICAgb3V0IGJsZW5kZXIgbm9ybWFsIG5lZ2F0aW9uICovCglvdXRub3JtYWwgPSBub3JtYWxpemUobm9ybWFsKTsKfQoKdm9pZCB0ZXhjb190YW5nZW50KHZlYzQgdGFuZ2VudCwgb3V0IHZlYzMgb3V0dGFuZ2VudCkKewoJb3V0dGFuZ2VudCA9IG5vcm1hbGl6ZSh0YW5nZW50Lnh5eik7Cn0KCnZvaWQgdGV4Y29fZ2xvYmFsKG1hdDQgdmlld2ludm1hdCwgdmVjMyBjbywgb3V0IHZlYzMgZ2xvYmFsKQp7CglnbG9iYWwgPSAodmlld2ludm1hdCAqIHZlYzQoY28sIDEuMCkpLnh5ejsKfQoKdm9pZCB0ZXhjb19vYmplY3QobWF0NCB2aWV3aW52bWF0LCBtYXQ0IG9iaW52bWF0LCB2ZWMzIGNvLCBvdXQgdmVjMyBvYmplY3QpCnsKCW9iamVjdCA9IChvYmludm1hdCAqICh2aWV3aW52bWF0ICogdmVjNChjbywgMS4wKSkpLnh5ejsKfQoKdm9pZCB0ZXhjb19yZWZsKHZlYzMgdm4sIHZlYzMgdmlldywgb3V0IHZlYzMgcmVmKQp7CglyZWYgPSB2aWV3IC0gMi4wICogZG90KHZuLCB2aWV3KSAqIHZuOwp9Cgp2b2lkIHNoYWRlX25vcm0odmVjMyBub3JtYWwsIG91dCB2ZWMzIG91dG5vcm1hbCkKewoJLyogYmxlbmRlciByZW5kZXIgbm9ybWFsIGlzIG5lZ2F0ZWQgKi8KCW91dG5vcm1hbCA9IC1ub3JtYWxpemUobm9ybWFsKTsKfQoKdm9pZCBtdGV4X21pcnJvcih2ZWMzIHRjb2wsIHZlYzQgcmVmY29sLCBmbG9hdCB0aW4sIGZsb2F0IGNvbG1pcmZhYywgb3V0IHZlYzQgb3V0cmVmY29sKQp7CglvdXRyZWZjb2wgPSBtaXgocmVmY29sLCB2ZWM0KDEuMCwgdGNvbCksIHRpbiAqIGNvbG1pcmZhYyk7Cn0KCnZvaWQgbXRleF9yZ2JfYmxlbmQodmVjMyBvdXRjb2wsIHZlYzMgdGV4Y29sLCBmbG9hdCBmYWN0LCBmbG9hdCBmYWNnLCBvdXQgdmVjMyBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCglmYWN0ICo9IGZhY2c7CglmYWNtID0gMS4wIC0gZmFjdDsKCglpbmNvbCA9IGZhY3QgKiB0ZXhjb2wgKyBmYWNtICogb3V0Y29sOwp9Cgp2b2lkIG10ZXhfcmdiX211bCh2ZWMzIG91dGNvbCwgdmVjMyB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCB2ZWMzIGluY29sKQp7CglmbG9hdCBmYWNtOwoKCWZhY3QgKj0gZmFjZzsKCWZhY20gPSAxLjAgLSBmYWN0OwoKCWluY29sID0gKGZhY20gKyBmYWN0ICogdGV4Y29sKSAqIG91dGNvbDsKfQoKdm9pZCBtdGV4X3JnYl9zY3JlZW4odmVjMyBvdXRjb2wsIHZlYzMgdGV4Y29sLCBmbG9hdCBmYWN0LCBmbG9hdCBmYWNnLCBvdXQgdmVjMyBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCglmYWN0ICo9IGZhY2c7CglmYWNtID0gMS4wIC0gZmFjdDsKCglpbmNvbCA9IHZlYzMoMS4wKSAtICh2ZWMzKGZhY20pICsgZmFjdCAqICh2ZWMzKDEuMCkgLSB0ZXhjb2wpKSAqICh2ZWMzKDEuMCkgLSBvdXRjb2wpOwp9Cgp2b2lkIG10ZXhfcmdiX292ZXJsYXkodmVjMyBvdXRjb2wsIHZlYzMgdGV4Y29sLCBmbG9hdCBmYWN0LCBmbG9hdCBmYWNnLCBvdXQgdmVjMyBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCglmYWN0ICo9IGZhY2c7CglmYWNtID0gMS4wIC0gZmFjdDsKCglpZiAob3V0Y29sLnIgPCAwLjUpCgkJaW5jb2wuciA9IG91dGNvbC5yICogKGZhY20gKyAyLjAgKiBmYWN0ICogdGV4Y29sLnIpOwoJZWxzZQoJCWluY29sLnIgPSAxLjAgLSAoZmFjbSArIDIuMCAqIGZhY3QgKiAoMS4wIC0gdGV4Y29sLnIpKSAqICgxLjAgLSBvdXRjb2wucik7CgoJaWYgKG91dGNvbC5nIDwgMC41KQoJCWluY29sLmcgPSBvdXRjb2wuZyAqIChmYWNtICsgMi4wICogZmFjdCAqIHRleGNvbC5nKTsKCWVsc2UKCQlpbmNvbC5nID0gMS4wIC0gKGZhY20gKyAyLjAgKiBmYWN0ICogKDEuMCAtIHRleGNvbC5nKSkgKiAoMS4wIC0gb3V0Y29sLmcpOwoKCWlmIChvdXRjb2wuYiA8IDAuNSkKCQlpbmNvbC5iID0gb3V0Y29sLmIgKiAoZmFjbSArIDIuMCAqIGZhY3QgKiB0ZXhjb2wuYik7CgllbHNlCgkJaW5jb2wuYiA9IDEuMCAtIChmYWNtICsgMi4wICogZmFjdCAqICgxLjAgLSB0ZXhjb2wuYikpICogKDEuMCAtIG91dGNvbC5iKTsKfQoKdm9pZCBtdGV4X3JnYl9zdWIodmVjMyBvdXRjb2wsIHZlYzMgdGV4Y29sLCBmbG9hdCBmYWN0LCBmbG9hdCBmYWNnLCBvdXQgdmVjMyBpbmNvbCkKewoJaW5jb2wgPSAtZmFjdCAqIGZhY2cgKiB0ZXhjb2wgKyBvdXRjb2w7Cn0KCnZvaWQgbXRleF9yZ2JfYWRkKHZlYzMgb3V0Y29sLCB2ZWMzIHRleGNvbCwgZmxvYXQgZmFjdCwgZmxvYXQgZmFjZywgb3V0IHZlYzMgaW5jb2wpCnsKCWluY29sID0gZmFjdCAqIGZhY2cgKiB0ZXhjb2wgKyBvdXRjb2w7Cn0KCnZvaWQgbXRleF9yZ2JfZGl2KHZlYzMgb3V0Y29sLCB2ZWMzIHRleGNvbCwgZmxvYXQgZmFjdCwgZmxvYXQgZmFjZywgb3V0IHZlYzMgaW5jb2wpCnsKCWZsb2F0IGZhY207CgoJZmFjdCAqPSBmYWNnOwoJZmFjbSA9IDEuMCAtIGZhY3Q7CgoJaWYgKHRleGNvbC5yICE9IDAuMCkgaW5jb2wuciA9IGZhY20gKiBvdXRjb2wuciArIGZhY3QgKiBvdXRjb2wuciAvIHRleGNvbC5yOwoJaWYgKHRleGNvbC5nICE9IDAuMCkgaW5jb2wuZyA9IGZhY20gKiBvdXRjb2wuZyArIGZhY3QgKiBvdXRjb2wuZyAvIHRleGNvbC5nOwoJaWYgKHRleGNvbC5iICE9IDAuMCkgaW5jb2wuYiA9IGZhY20gKiBvdXRjb2wuYiArIGZhY3QgKiBvdXRjb2wuYiAvIHRleGNvbC5iOwp9Cgp2b2lkIG10ZXhfcmdiX2RpZmYodmVjMyBvdXRjb2wsIHZlYzMgdGV4Y29sLCBmbG9hdCBmYWN0LCBmbG9hdCBmYWNnLCBvdXQgdmVjMyBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCglmYWN0ICo9IGZhY2c7CglmYWNtID0gMS4wIC0gZmFjdDsKCglpbmNvbCA9IGZhY20gKiBvdXRjb2wgKyBmYWN0ICogYWJzKHRleGNvbCAtIG91dGNvbCk7Cn0KCnZvaWQgbXRleF9yZ2JfZGFyayh2ZWMzIG91dGNvbCwgdmVjMyB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCB2ZWMzIGluY29sKQp7CglmbG9hdCBmYWNtLCBjb2w7CgoJZmFjdCAqPSBmYWNnOwoJZmFjbSA9IDEuMCAtIGZhY3Q7CgoJaW5jb2wuciA9IG1pbihvdXRjb2wuciwgdGV4Y29sLnIpICogZmFjdCArIG91dGNvbC5yICogZmFjbTsKCWluY29sLmcgPSBtaW4ob3V0Y29sLmcsIHRleGNvbC5nKSAqIGZhY3QgKyBvdXRjb2wuZyAqIGZhY207CglpbmNvbC5iID0gbWluKG91dGNvbC5iLCB0ZXhjb2wuYikgKiBmYWN0ICsgb3V0Y29sLmIgKiBmYWNtOwp9Cgp2b2lkIG10ZXhfcmdiX2xpZ2h0KHZlYzMgb3V0Y29sLCB2ZWMzIHRleGNvbCwgZmxvYXQgZmFjdCwgZmxvYXQgZmFjZywgb3V0IHZlYzMgaW5jb2wpCnsKCWZsb2F0IGZhY20sIGNvbDsKCglmYWN0ICo9IGZhY2c7CgoJY29sID0gZmFjdCAqIHRleGNvbC5yOwoJaWYgKGNvbCA+IG91dGNvbC5yKSBpbmNvbC5yID0gY29sOyBlbHNlIGluY29sLnIgPSBvdXRjb2wucjsKCWNvbCA9IGZhY3QgKiB0ZXhjb2wuZzsKCWlmIChjb2wgPiBvdXRjb2wuZykgaW5jb2wuZyA9IGNvbDsgZWxzZSBpbmNvbC5nID0gb3V0Y29sLmc7Cgljb2wgPSBmYWN0ICogdGV4Y29sLmI7CglpZiAoY29sID4gb3V0Y29sLmIpIGluY29sLmIgPSBjb2w7IGVsc2UgaW5jb2wuYiA9IG91dGNvbC5iOwp9Cgp2b2lkIG10ZXhfcmdiX2h1ZSh2ZWMzIG91dGNvbCwgdmVjMyB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCB2ZWMzIGluY29sKQp7Cgl2ZWM0IGNvbDsKCgltaXhfaHVlKGZhY3QgKiBmYWNnLCB2ZWM0KG91dGNvbCwgMS4wKSwgdmVjNCh0ZXhjb2wsIDEuMCksIGNvbCk7CglpbmNvbC5yZ2IgPSBjb2wucmdiOwp9Cgp2b2lkIG10ZXhfcmdiX3NhdCh2ZWMzIG91dGNvbCwgdmVjMyB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCB2ZWMzIGluY29sKQp7Cgl2ZWM0IGNvbDsKCgltaXhfc2F0KGZhY3QgKiBmYWNnLCB2ZWM0KG91dGNvbCwgMS4wKSwgdmVjNCh0ZXhjb2wsIDEuMCksIGNvbCk7CglpbmNvbC5yZ2IgPSBjb2wucmdiOwp9Cgp2b2lkIG10ZXhfcmdiX3ZhbCh2ZWMzIG91dGNvbCwgdmVjMyB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCB2ZWMzIGluY29sKQp7Cgl2ZWM0IGNvbDsKCgltaXhfdmFsKGZhY3QgKiBmYWNnLCB2ZWM0KG91dGNvbCwgMS4wKSwgdmVjNCh0ZXhjb2wsIDEuMCksIGNvbCk7CglpbmNvbC5yZ2IgPSBjb2wucmdiOwp9Cgp2b2lkIG10ZXhfcmdiX2NvbG9yKHZlYzMgb3V0Y29sLCB2ZWMzIHRleGNvbCwgZmxvYXQgZmFjdCwgZmxvYXQgZmFjZywgb3V0IHZlYzMgaW5jb2wpCnsKCXZlYzQgY29sOwoKCW1peF9jb2xvcihmYWN0ICogZmFjZywgdmVjNChvdXRjb2wsIDEuMCksIHZlYzQodGV4Y29sLCAxLjApLCBjb2wpOwoJaW5jb2wucmdiID0gY29sLnJnYjsKfQoKdm9pZCBtdGV4X3JnYl9zb2Z0KHZlYzMgb3V0Y29sLCB2ZWMzIHRleGNvbCwgZmxvYXQgZmFjdCwgZmxvYXQgZmFjZywgb3V0IHZlYzMgaW5jb2wpCnsKCXZlYzQgY29sOwoKCW1peF9zb2Z0KGZhY3QgKiBmYWNnLCB2ZWM0KG91dGNvbCwgMS4wKSwgdmVjNCh0ZXhjb2wsIDEuMCksIGNvbCk7CglpbmNvbC5yZ2IgPSBjb2wucmdiOwp9Cgp2b2lkIG10ZXhfcmdiX2xpbmVhcih2ZWMzIG91dGNvbCwgdmVjMyB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCB2ZWMzIGluY29sKQp7CglmYWN0ICo9IGZhY2c7CgoJaWYgKHRleGNvbC5yID4gMC41KQoJCWluY29sLnIgPSBvdXRjb2wuciArIGZhY3QgKiAoMi4wICogKHRleGNvbC5yIC0gMC41KSk7CgllbHNlCgkJaW5jb2wuciA9IG91dGNvbC5yICsgZmFjdCAqICgyLjAgKiAodGV4Y29sLnIpIC0gMS4wKTsKCglpZiAodGV4Y29sLmcgPiAwLjUpCgkJaW5jb2wuZyA9IG91dGNvbC5nICsgZmFjdCAqICgyLjAgKiAodGV4Y29sLmcgLSAwLjUpKTsKCWVsc2UKCQlpbmNvbC5nID0gb3V0Y29sLmcgKyBmYWN0ICogKDIuMCAqICh0ZXhjb2wuZykgLSAxLjApOwoKCWlmICh0ZXhjb2wuYiA+IDAuNSkKCQlpbmNvbC5iID0gb3V0Y29sLmIgKyBmYWN0ICogKDIuMCAqICh0ZXhjb2wuYiAtIDAuNSkpOwoJZWxzZQoJCWluY29sLmIgPSBvdXRjb2wuYiArIGZhY3QgKiAoMi4wICogKHRleGNvbC5iKSAtIDEuMCk7Cn0KCnZvaWQgbXRleF92YWx1ZV92YXJzKGlub3V0IGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCBmbG9hdCBmYWNtKQp7CglmYWN0ICo9IGFicyhmYWNnKTsKCWZhY20gPSAxLjAgLSBmYWN0OwoKCWlmIChmYWNnIDwgMC4wKSB7CgkJZmxvYXQgdG1wID0gZmFjdDsKCQlmYWN0ID0gZmFjbTsKCQlmYWNtID0gdG1wOwoJfQp9Cgp2b2lkIG10ZXhfdmFsdWVfYmxlbmQoZmxvYXQgb3V0Y29sLCBmbG9hdCB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCBmbG9hdCBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCW10ZXhfdmFsdWVfdmFycyhmYWN0LCBmYWNnLCBmYWNtKTsKCglpbmNvbCA9IGZhY3QgKiB0ZXhjb2wgKyBmYWNtICogb3V0Y29sOwp9Cgp2b2lkIG10ZXhfdmFsdWVfbXVsKGZsb2F0IG91dGNvbCwgZmxvYXQgdGV4Y29sLCBmbG9hdCBmYWN0LCBmbG9hdCBmYWNnLCBvdXQgZmxvYXQgaW5jb2wpCnsKCWZsb2F0IGZhY207CgltdGV4X3ZhbHVlX3ZhcnMoZmFjdCwgZmFjZywgZmFjbSk7CgoJZmFjbSA9IDEuMCAtIGZhY2c7CglpbmNvbCA9IChmYWNtICsgZmFjdCAqIHRleGNvbCkgKiBvdXRjb2w7Cn0KCnZvaWQgbXRleF92YWx1ZV9zY3JlZW4oZmxvYXQgb3V0Y29sLCBmbG9hdCB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCBmbG9hdCBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCW10ZXhfdmFsdWVfdmFycyhmYWN0LCBmYWNnLCBmYWNtKTsKCglmYWNtID0gMS4wIC0gZmFjZzsKCWluY29sID0gMS4wIC0gKGZhY20gKyBmYWN0ICogKDEuMCAtIHRleGNvbCkpICogKDEuMCAtIG91dGNvbCk7Cn0KCnZvaWQgbXRleF92YWx1ZV9zdWIoZmxvYXQgb3V0Y29sLCBmbG9hdCB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCBmbG9hdCBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCW10ZXhfdmFsdWVfdmFycyhmYWN0LCBmYWNnLCBmYWNtKTsKCglmYWN0ID0gLWZhY3Q7CglpbmNvbCA9IGZhY3QgKiB0ZXhjb2wgKyBvdXRjb2w7Cn0KCnZvaWQgbXRleF92YWx1ZV9hZGQoZmxvYXQgb3V0Y29sLCBmbG9hdCB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCBmbG9hdCBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCW10ZXhfdmFsdWVfdmFycyhmYWN0LCBmYWNnLCBmYWNtKTsKCglmYWN0ID0gZmFjdDsKCWluY29sID0gZmFjdCAqIHRleGNvbCArIG91dGNvbDsKfQoKdm9pZCBtdGV4X3ZhbHVlX2RpdihmbG9hdCBvdXRjb2wsIGZsb2F0IHRleGNvbCwgZmxvYXQgZmFjdCwgZmxvYXQgZmFjZywgb3V0IGZsb2F0IGluY29sKQp7CglmbG9hdCBmYWNtOwoJbXRleF92YWx1ZV92YXJzKGZhY3QsIGZhY2csIGZhY20pOwoKCWlmICh0ZXhjb2wgIT0gMC4wKQoJCWluY29sID0gZmFjbSAqIG91dGNvbCArIGZhY3QgKiBvdXRjb2wgLyB0ZXhjb2w7CgllbHNlCgkJaW5jb2wgPSAwLjA7Cn0KCnZvaWQgbXRleF92YWx1ZV9kaWZmKGZsb2F0IG91dGNvbCwgZmxvYXQgdGV4Y29sLCBmbG9hdCBmYWN0LCBmbG9hdCBmYWNnLCBvdXQgZmxvYXQgaW5jb2wpCnsKCWZsb2F0IGZhY207CgltdGV4X3ZhbHVlX3ZhcnMoZmFjdCwgZmFjZywgZmFjbSk7CgoJaW5jb2wgPSBmYWNtICogb3V0Y29sICsgZmFjdCAqIGFicyh0ZXhjb2wgLSBvdXRjb2wpOwp9Cgp2b2lkIG10ZXhfdmFsdWVfZGFyayhmbG9hdCBvdXRjb2wsIGZsb2F0IHRleGNvbCwgZmxvYXQgZmFjdCwgZmxvYXQgZmFjZywgb3V0IGZsb2F0IGluY29sKQp7CglmbG9hdCBmYWNtOwoJbXRleF92YWx1ZV92YXJzKGZhY3QsIGZhY2csIGZhY20pOwoKCWluY29sID0gZmFjbSAqIG91dGNvbCArIGZhY3QgKiBtaW4ob3V0Y29sLCB0ZXhjb2wpOwp9Cgp2b2lkIG10ZXhfdmFsdWVfbGlnaHQoZmxvYXQgb3V0Y29sLCBmbG9hdCB0ZXhjb2wsIGZsb2F0IGZhY3QsIGZsb2F0IGZhY2csIG91dCBmbG9hdCBpbmNvbCkKewoJZmxvYXQgZmFjbTsKCW10ZXhfdmFsdWVfdmFycyhmYWN0LCBmYWNnLCBmYWNtKTsKCglmbG9hdCBjb2wgPSBmYWN0ICogdGV4Y29sOwoJaWYgKGNvbCA+IG91dGNvbCkgaW5jb2wgPSBjb2w7IGVsc2UgaW5jb2wgPSBvdXRjb2w7Cn0KCnZvaWQgbXRleF92YWx1ZV9jbGFtcF9wb3NpdGl2ZShmbG9hdCBmYWMsIG91dCBmbG9hdCBvdXRmYWMpCnsKCW91dGZhYyA9IG1heChmYWMsIDAuMCk7Cn0KCnZvaWQgbXRleF92YWx1ZV9jbGFtcChmbG9hdCBmYWMsIG91dCBmbG9hdCBvdXRmYWMpCnsKCW91dGZhYyA9IGNsYW1wKGZhYywgMC4wLCAxLjApOwp9Cgp2b2lkIG10ZXhfaGFyX2RpdmlkZShmbG9hdCBoYXIsIG91dCBmbG9hdCBvdXRoYXIpCnsKCW91dGhhciA9IGhhciAvIDEyOC4wOwp9Cgp2b2lkIG10ZXhfaGFyX211bHRpcGx5X2NsYW1wKGZsb2F0IGhhciwgb3V0IGZsb2F0IG91dGhhcikKewoJaGFyICo9IDEyOC4wOwoKCWlmIChoYXIgPCAxLjApIG91dGhhciA9IDEuMDsKCWVsc2UgaWYgKGhhciA+IDUxMS4wKSBvdXRoYXIgPSA1MTEuMDsKCWVsc2Ugb3V0aGFyID0gaGFyOwp9Cgp2b2lkIG10ZXhfYWxwaGFfZnJvbV9jb2wodmVjNCBjb2wsIG91dCBmbG9hdCBhbHBoYSkKewoJYWxwaGEgPSBjb2wuYTsKfQoKdm9pZCBtdGV4X2FscGhhX3RvX2NvbCh2ZWM0IGNvbCwgZmxvYXQgYWxwaGEsIG91dCB2ZWM0IG91dGNvbCkKewoJb3V0Y29sID0gdmVjNChjb2wucmdiLCBhbHBoYSk7Cn0KCnZvaWQgbXRleF9hbHBoYV9tdWx0aXBseV92YWx1ZSh2ZWM0IGNvbCwgZmxvYXQgdmFsdWUsIG91dCB2ZWM0IG91dGNvbCkKewoJb3V0Y29sID0gdmVjNChjb2wucmdiLCBjb2wuYSAqIHZhbHVlKTsKfQoKdm9pZCBtdGV4X3JnYnRvaW50KHZlYzQgcmdiLCBvdXQgZmxvYXQgaW50ZW5zaXR5KQp7CglpbnRlbnNpdHkgPSBkb3QodmVjMygwLjM1LCAwLjQ1LCAwLjIpLCByZ2IucmdiKTsKfQoKdm9pZCBtdGV4X3ZhbHVlX2ludmVydChmbG9hdCBpbnZhbHVlLCBvdXQgZmxvYXQgb3V0dmFsdWUpCnsKCW91dHZhbHVlID0gMS4wIC0gaW52YWx1ZTsKfQoKdm9pZCBtdGV4X3JnYl9pbnZlcnQodmVjNCBpbnJnYiwgb3V0IHZlYzQgb3V0cmdiKQp7CglvdXRyZ2IgPSB2ZWM0KHZlYzMoMS4wKSAtIGlucmdiLnJnYiwgaW5yZ2IuYSk7Cn0KCnZvaWQgbXRleF92YWx1ZV9zdGVuY2lsKGZsb2F0IHN0ZW5jaWwsIGZsb2F0IGludGVuc2l0eSwgb3V0IGZsb2F0IG91dHN0ZW5jaWwsIG91dCBmbG9hdCBvdXRpbnRlbnNpdHkpCnsKCWZsb2F0IGZhY3QgPSBpbnRlbnNpdHk7CglvdXRpbnRlbnNpdHkgPSBpbnRlbnNpdHkgKiBzdGVuY2lsOwoJb3V0c3RlbmNpbCA9IHN0ZW5jaWwgKiBmYWN0Owp9Cgp2b2lkIG10ZXhfcmdiX3N0ZW5jaWwoZmxvYXQgc3RlbmNpbCwgdmVjNCByZ2IsIG91dCBmbG9hdCBvdXRzdGVuY2lsLCBvdXQgdmVjNCBvdXRyZ2IpCnsKCWZsb2F0IGZhY3QgPSByZ2IuYTsKCW91dHJnYiA9IHZlYzQocmdiLnJnYiwgcmdiLmEgKiBzdGVuY2lsKTsKCW91dHN0ZW5jaWwgPSBzdGVuY2lsICogZmFjdDsKfQoKdm9pZCBtdGV4X21hcHBpbmdfb2ZzKHZlYzMgdGV4Y28sIHZlYzMgb2ZzLCBvdXQgdmVjMyBvdXR0ZXhjbykKewoJb3V0dGV4Y28gPSB0ZXhjbyArIG9mczsKfQoKdm9pZCBtdGV4X21hcHBpbmdfc2l6ZSh2ZWMzIHRleGNvLCB2ZWMzIHNpemUsIG91dCB2ZWMzIG91dHRleGNvKQp7CglvdXR0ZXhjbyA9IHNpemUgKiB0ZXhjbzsKfQoKdm9pZCBtdGV4XzJkX21hcHBpbmcodmVjMyB2ZWMsIG91dCB2ZWMzIG91dHZlYykKewoJb3V0dmVjID0gdmVjMyh2ZWMueHkgKiAwLjUgKyB2ZWMyKDAuNSksIHZlYy56KTsKfQoKdmVjMyBtdGV4XzJkX21hcHBpbmcodmVjMyB2ZWMpCnsKCXJldHVybiB2ZWMzKHZlYy54eSAqIDAuNSArIHZlYzIoMC41KSwgdmVjLnopOwp9Cgp2b2lkIG10ZXhfY3ViZV9tYXAodmVjMyBjbywgc2FtcGxlckN1YmUgaW1hLCBvdXQgZmxvYXQgdmFsdWUsIG91dCB2ZWM0IGNvbG9yKQp7Cgljb2xvciA9IHRleHR1cmVDdWJlKGltYSwgY28pOwoJdmFsdWUgPSAxLjA7Cn0KCnZvaWQgbXRleF9jdWJlX21hcF9yZWZsX2Zyb21fcmVmbGRpcigKICAgICAgICBzYW1wbGVyQ3ViZSBpbWEsIHZlYzMgcmVmbGVjdGVkZGlyZWN0aW9uLCBvdXQgZmxvYXQgdmFsdWUsIG91dCB2ZWM0IGNvbG9yKQp7CiAgICAgICAgY29sb3IgPSB0ZXh0dXJlQ3ViZShpbWEsIHJlZmxlY3RlZGRpcmVjdGlvbik7CiAgICAgICAgdmFsdWUgPSBjb2xvci5hOwp9Cgp2b2lkIG10ZXhfY3ViZV9tYXBfcmVmbCgKICAgICAgICBzYW1wbGVyQ3ViZSBpbWEsIHZlYzMgdnAsIHZlYzMgdm4sIG1hdDQgdmlld21hdHJpeGludmVyc2UsIG1hdDQgdmlld21hdHJpeCwKICAgICAgICBvdXQgZmxvYXQgdmFsdWUsIG91dCB2ZWM0IGNvbG9yKQp7Cgl2ZWMzIHZpZXdkaXJlY3Rpb24gPSB2ZWMzKHZpZXdtYXRyaXhpbnZlcnNlICogdmVjNCh2cCwgMC4wKSk7Cgl2ZWMzIG5vcm1hbGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSh2ZWMzKHZlYzQodm4sIDAuMCkgKiB2aWV3bWF0cml4KSk7Cgl2ZWMzIHJlZmxlY3RlZGRpcmVjdGlvbiA9IHJlZmxlY3Qodmlld2RpcmVjdGlvbiwgbm9ybWFsZGlyZWN0aW9uKTsKCWNvbG9yID0gdGV4dHVyZUN1YmUoaW1hLCByZWZsZWN0ZWRkaXJlY3Rpb24pOwoJdmFsdWUgPSAxLjA7Cn0KCnZvaWQgbXRleF9pbWFnZSh2ZWMzIHRleGNvLCBzYW1wbGVyMkQgaW1hLCBvdXQgZmxvYXQgdmFsdWUsIG91dCB2ZWM0IGNvbG9yKQp7Cgljb2xvciA9IHRleHR1cmUyRChpbWEsIHRleGNvLnh5KTsKCXZhbHVlID0gMS4wOwp9Cgp2b2lkIG10ZXhfbm9ybWFsKHZlYzMgdGV4Y28sIHNhbXBsZXIyRCBpbWEsIG91dCB2ZWMzIG5vcm1hbCkKewoJLy8gVGhlIGludmVydCBvZiB0aGUgcmVkIGNoYW5uZWwgaXMgdG8gbWFrZQoJLy8gdGhlIG5vcm1hbCBtYXAgY29tcGxpYW50IHdpdGggdGhlIG91dHNpZGUgd29ybGQuCgkvLyBJdCBuZWVkcyB0byBiZSBkb25lIGJlY2F1c2UgdmFyeWluZyBCbGVuZGVyCgkvLyB0aGUgbm9ybWFsIHVzZWQgcG9pbnRzIGlud2FyZC4KCS8vIFNob3VsZCB0aGlzIGV2ZXIgY2hhbmdlIHRoaXMgbmVnYXRlIG11c3QgYmUgcmVtb3ZlZC4KCXZlYzQgY29sb3IgPSB0ZXh0dXJlMkQoaW1hLCB0ZXhjby54eSk7Cglub3JtYWwgPSAyLjAgKiAodmVjMygtY29sb3IuciwgY29sb3IuZywgY29sb3IuYikgLSB2ZWMzKC0wLjUsIDAuNSwgMC41KSk7Cn0KCnZvaWQgbXRleF9idW1wX25vcm1hbHNfaW5pdCh2ZWMzIHZOLCBvdXQgdmVjMyB2Tm9yZywgb3V0IHZlYzMgdk5hY2MsIG91dCBmbG9hdCBmUHJldk1hZ25pdHVkZSkKewoJdk5vcmcgPSB2TjsKCXZOYWNjID0gdk47CglmUHJldk1hZ25pdHVkZSA9IDEuMDsKfQoKLyoqIGhlbHBlciBtZXRob2QgdG8gZXh0cmFjdCB0aGUgdXBwZXIgbGVmdCAzeDMgbWF0cml4IGZyb20gYSA0eDQgbWF0cml4ICovCm1hdDMgdG9fbWF0MyhtYXQ0IG00KQp7CgltYXQzIG0zOwoJbTNbMF0gPSBtNFswXS54eXo7CgltM1sxXSA9IG00WzFdLnh5ejsKCW0zWzJdID0gbTRbMl0ueHl6OwoJcmV0dXJuIG0zOwp9Cgp2b2lkIG10ZXhfYnVtcF9pbml0X29ianNwYWNlKAogICAgICAgIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLAogICAgICAgIG1hdDQgbVZpZXcsIG1hdDQgbVZpZXdJbnYsIG1hdDQgbU9iaiwgbWF0NCBtT2JqSW52LAogICAgICAgIGZsb2F0IGZQcmV2TWFnbml0dWRlX2luLCB2ZWMzIHZOYWNjX2luLAogICAgICAgIG91dCBmbG9hdCBmUHJldk1hZ25pdHVkZV9vdXQsIG91dCB2ZWMzIHZOYWNjX291dCwKICAgICAgICBvdXQgdmVjMyB2UjEsIG91dCB2ZWMzIHZSMiwgb3V0IGZsb2F0IGZEZXQpCnsKCW1hdDMgb2JqMnZpZXcgPSB0b19tYXQzKGJsX01vZGVsVmlld01hdHJpeCk7CgltYXQzIHZpZXcyb2JqID0gdG9fbWF0MyhibF9Nb2RlbFZpZXdNYXRyaXhJbnZlcnNlKTsKCgl2ZWMzIHZTaWdtYVMgPSB2aWV3Mm9iaiAqIGRGZHgoc3VyZl9wb3MpOwoJdmVjMyB2U2lnbWFUID0gdmlldzJvYmogKiBkRmR5KHN1cmZfcG9zKTsKCXZlYzMgdk4gPSBub3JtYWxpemUoc3VyZl9ub3JtICogb2JqMnZpZXcpOwoKCXZSMSA9IGNyb3NzKHZTaWdtYVQsIHZOKTsKCXZSMiA9IGNyb3NzKHZOLCB2U2lnbWFTKTsKCWZEZXQgPSBkb3QodlNpZ21hUywgdlIxKTsKCgkvKiBwcmV0cmFuc2Zvcm0gdk5hY2MgKHZhcnlpbmcgbXRleF9idW1wX2FwcGx5KSB1c2luZyB0aGUgaW52ZXJzZSB0cmFuc3Bvc2VkICovCgl2UjEgPSB2UjEgKiB2aWV3Mm9iajsKCXZSMiA9IHZSMiAqIHZpZXcyb2JqOwoJdk4gPSB2TiAqIHZpZXcyb2JqOwoKCWZsb2F0IGZNYWduaXR1ZGUgPSBhYnMoZkRldCkgKiBsZW5ndGgodk4pOwoJdk5hY2Nfb3V0ID0gdk5hY2NfaW4gKiAoZk1hZ25pdHVkZSAvIGZQcmV2TWFnbml0dWRlX2luKTsKCWZQcmV2TWFnbml0dWRlX291dCA9IGZNYWduaXR1ZGU7Cn0KCnZvaWQgbXRleF9idW1wX2luaXRfdGV4dHVyZXNwYWNlKAogICAgICAgIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLAogICAgICAgIGZsb2F0IGZQcmV2TWFnbml0dWRlX2luLCB2ZWMzIHZOYWNjX2luLAogICAgICAgIG91dCBmbG9hdCBmUHJldk1hZ25pdHVkZV9vdXQsIG91dCB2ZWMzIHZOYWNjX291dCwKICAgICAgICBvdXQgdmVjMyB2UjEsIG91dCB2ZWMzIHZSMiwgb3V0IGZsb2F0IGZEZXQpCnsKCXZlYzMgdlNpZ21hUyA9IGRGZHgoc3VyZl9wb3MpOwoJdmVjMyB2U2lnbWFUID0gZEZkeShzdXJmX3Bvcyk7Cgl2ZWMzIHZOID0gc3VyZl9ub3JtOyAvKiBub3JtYWxpemVkIGludGVycG9sYXRlZCB2ZXJ0ZXggbm9ybWFsICovCgoJdlIxID0gbm9ybWFsaXplKGNyb3NzKHZTaWdtYVQsIHZOKSk7Cgl2UjIgPSBub3JtYWxpemUoY3Jvc3Modk4sIHZTaWdtYVMpKTsKCWZEZXQgPSBzaWduKGRvdCh2U2lnbWFTLCB2UjEpKTsKCglmbG9hdCBmTWFnbml0dWRlID0gYWJzKGZEZXQpOwoJdk5hY2Nfb3V0ID0gdk5hY2NfaW4gKiAoZk1hZ25pdHVkZSAvIGZQcmV2TWFnbml0dWRlX2luKTsKCWZQcmV2TWFnbml0dWRlX291dCA9IGZNYWduaXR1ZGU7Cn0KCnZvaWQgbXRleF9idW1wX2luaXRfdmlld3NwYWNlKAogICAgICAgIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLAogICAgICAgIGZsb2F0IGZQcmV2TWFnbml0dWRlX2luLCB2ZWMzIHZOYWNjX2luLAogICAgICAgIG91dCBmbG9hdCBmUHJldk1hZ25pdHVkZV9vdXQsIG91dCB2ZWMzIHZOYWNjX291dCwKICAgICAgICBvdXQgdmVjMyB2UjEsIG91dCB2ZWMzIHZSMiwgb3V0IGZsb2F0IGZEZXQpCnsKCXZlYzMgdlNpZ21hUyA9IGRGZHgoc3VyZl9wb3MpOwoJdmVjMyB2U2lnbWFUID0gZEZkeShzdXJmX3Bvcyk7Cgl2ZWMzIHZOID0gc3VyZl9ub3JtOyAvKiBub3JtYWxpemVkIGludGVycG9sYXRlZCB2ZXJ0ZXggbm9ybWFsICovCgoJdlIxID0gY3Jvc3ModlNpZ21hVCwgdk4pOwoJdlIyID0gY3Jvc3Modk4sIHZTaWdtYVMpOwoJZkRldCA9IGRvdCh2U2lnbWFTLCB2UjEpOwoKCWZsb2F0IGZNYWduaXR1ZGUgPSBhYnMoZkRldCk7Cgl2TmFjY19vdXQgPSB2TmFjY19pbiAqIChmTWFnbml0dWRlIC8gZlByZXZNYWduaXR1ZGVfaW4pOwoJZlByZXZNYWduaXR1ZGVfb3V0ID0gZk1hZ25pdHVkZTsKfQoKdm9pZCBtdGV4X2J1bXBfdGFwMygKICAgICAgICB2ZWMzIHRleGNvLCBzYW1wbGVyMkQgaW1hLCBmbG9hdCBoU2NhbGUsCiAgICAgICAgb3V0IGZsb2F0IGRCcywgb3V0IGZsb2F0IGRCdCkKewoJdmVjMiBTVGxsID0gdGV4Y28ueHk7Cgl2ZWMyIFNUbHIgPSB0ZXhjby54eSArIGRGZHgodGV4Y28ueHkpOwoJdmVjMiBTVHVsID0gdGV4Y28ueHkgKyBkRmR5KHRleGNvLnh5KTsKCglmbG9hdCBIbGwsIEhsciwgSHVsOwoJcmdidG9idyh0ZXh0dXJlMkQoaW1hLCBTVGxsKSwgSGxsKTsKCXJnYnRvYncodGV4dHVyZTJEKGltYSwgU1RsciksIEhscik7CglyZ2J0b2J3KHRleHR1cmUyRChpbWEsIFNUdWwpLCBIdWwpOwoKCWRCcyA9IGhTY2FsZSAqIChIbHIgLSBIbGwpOwoJZEJ0ID0gaFNjYWxlICogKEh1bCAtIEhsbCk7Cn0KCiNpZmRlZiBCVU1QX0JJQ1VCSUMKCnZvaWQgbXRleF9idW1wX2JpY3ViaWMoCiAgICAgICAgdmVjMyB0ZXhjbywgc2FtcGxlcjJEIGltYSwgZmxvYXQgaFNjYWxlLAogICAgICAgIG91dCBmbG9hdCBkQnMsIG91dCBmbG9hdCBkQnQgKQp7CglmbG9hdCBIbDsKCWZsb2F0IEhyOwoJZmxvYXQgSGQ7CglmbG9hdCBIdTsKCgl2ZWMyIFRleER4ID0gZEZkeCh0ZXhjby54eSk7Cgl2ZWMyIFRleER5ID0gZEZkeSh0ZXhjby54eSk7CgoJdmVjMiBTVGwgPSB0ZXhjby54eSAtIDAuNSAqIFRleER4OwoJdmVjMiBTVHIgPSB0ZXhjby54eSArIDAuNSAqIFRleER4OwoJdmVjMiBTVGQgPSB0ZXhjby54eSAtIDAuNSAqIFRleER5OwoJdmVjMiBTVHUgPSB0ZXhjby54eSArIDAuNSAqIFRleER5OwoKCXJnYnRvYncodGV4dHVyZTJEKGltYSwgU1RsKSwgSGwpOwoJcmdidG9idyh0ZXh0dXJlMkQoaW1hLCBTVHIpLCBIcik7CglyZ2J0b2J3KHRleHR1cmUyRChpbWEsIFNUZCksIEhkKTsKCXJnYnRvYncodGV4dHVyZTJEKGltYSwgU1R1KSwgSHUpOwoKCXZlYzIgZEhkeHkgPSB2ZWMyKEhyIC0gSGwsIEh1IC0gSGQpOwoJZmxvYXQgZkJsZW5kID0gY2xhbXAoMS4wIC0gdGV4dHVyZVF1ZXJ5TE9EKGltYSwgdGV4Y28ueHkpLngsIDAuMCwgMS4wKTsKCWlmIChmQmxlbmQgIT0gMC4wKSB7CgkJLy8gdGhlIGRlcml2YXRpdmUgb2YgdGhlIGJpY3ViaWMgc2FtcGxpbmcgb2YgbGV2ZWwgMAoJCWl2ZWMyIHZEaW07CgkJdkRpbSA9IHRleHR1cmVTaXplKGltYSwgMCk7CgoJCS8vIHRha2luZyB0aGUgZnJhY3QgcGFydCBvZiB0aGUgdGV4dHVyZSBjb29yZGluYXRlIGlzIGEgaGFyZGNvZGVkIHdyYXAgbW9kZS4KCQkvLyB0aGlzIGlzIGFjY2VwdGFibGUgYXMgdGV4dHVyZXMgdXNlIHdyYXAgbW9kZSBleGNsdXNpdmVseSB2YXJ5aW5nIDNEIHZpZXcgZWxzZXdoZXJlIHZhcnlpbmcgYmxlbmRlci4KCQkvLyB0aGlzIGlzIGRvbmUgc28gdGhhdCB3ZSBjYW4gc3RpbGwgZ2V0IGEgdmFsaWQgdGV4ZWwgd2l0aCB1dnMgb3V0c2lkZSB0aGUgMCwxIHJhbmdlCgkJLy8gYnkgdGV4ZWxGZXRjaCBiZWxvdywgYXMgY29vcmRpbmF0ZXMgYXJlIGNsYW1wZWQgd2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uLgoJCXZlYzIgZlRleExvYyA9IHZEaW0gKiBmcmFjdCh0ZXhjby54eSkgLSB2ZWMyKDAuNSwgMC41KTsKCQlpdmVjMiBpVGV4TG9jID0gaXZlYzIoZmxvb3IoZlRleExvYykpOwoJCXZlYzIgdCA9IGNsYW1wKGZUZXhMb2MgLSBpVGV4TG9jLCAwLjAsIDEuMCk7ICAgICAgICAvLyBzYXQganVzdCB0byBiZSBwZWRhbnRpYwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogVGhpcyBibG9jayB3aWxsIHJlcGxhY2UgdGhlIG9uZSBiZWxvdyB3aGVuIG9uZSBjaGFubmVsIHRleHR1cmVzIGFyZSBwcm9wZXJseSBzdXBwb3J0ZWQuICoKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCQl2ZWM0IHZTYW1wbGVzVUwgPSB0ZXh0dXJlR2F0aGVyKGltYSwgKGlUZXhMb2MraXZlYzIoLTEsLTEpICsgdmVjMigwLjUsMC41KSkvdkRpbSk7CgkJdmVjNCB2U2FtcGxlc1VSID0gdGV4dHVyZUdhdGhlcihpbWEsIChpVGV4TG9jK2l2ZWMyKDEsLTEpICsgdmVjMigwLjUsMC41KSkvdkRpbSk7CgkJdmVjNCB2U2FtcGxlc0xMID0gdGV4dHVyZUdhdGhlcihpbWEsIChpVGV4TG9jK2l2ZWMyKC0xLDEpICsgdmVjMigwLjUsMC41KSkvdkRpbSk7CgkJdmVjNCB2U2FtcGxlc0xSID0gdGV4dHVyZUdhdGhlcihpbWEsIChpVGV4TG9jK2l2ZWMyKDEsMSkgKyB2ZWMyKDAuNSwwLjUpKS92RGltKTsKCgkJbWF0NCBIID0gbWF0NCh2U2FtcGxlc1VMLncsIHZTYW1wbGVzVUwueCwgdlNhbXBsZXNMTC53LCB2U2FtcGxlc0xMLngsCgkJICAgICAgICAgICAgdlNhbXBsZXNVTC56LCB2U2FtcGxlc1VMLnksIHZTYW1wbGVzTEwueiwgdlNhbXBsZXNMTC55LAoJCSAgICAgICAgICAgIHZTYW1wbGVzVVIudywgdlNhbXBsZXNVUi54LCB2U2FtcGxlc0xSLncsIHZTYW1wbGVzTFIueCwKCQkgICAgICAgICAgICB2U2FtcGxlc1VSLnosIHZTYW1wbGVzVVIueSwgdlNhbXBsZXNMUi56LCB2U2FtcGxlc0xSLnkpOwogKi8KCQlpdmVjMiBpVGV4TG9jTW9kID0gaVRleExvYyArIGl2ZWMyKC0xLCAtMSk7CgoJCW1hdDQgSDsKCgkJZm9yIChpbnQgaSA9IDA7IGkgPCA0OyBpKyspIHsKCQkJZm9yIChpbnQgaiA9IDA7IGogPCA0OyBqKyspIHsKCQkJCWl2ZWMyIGlUZXhUbXAgPSBpVGV4TG9jTW9kICsgaXZlYzIoaSwgaik7CgoJCQkJLy8gd3JhcCB0ZXh0dXJlIGNvb3JkaW5hdGVzIG1hbnVhbGx5IGZvciB0ZXhlbEZldGNoIHRvIHdvcmsgb24gdXZzIG9pdHNpZGUgdGhlIDAsMSByYW5nZS4KCQkJCS8vIHRoaXMgaXMgZ3VhcmFudGVlZCB0byB3b3JrIHNpbmNlIHdlIHRha2UgdGhlIGZyYWN0aW9uYWwgcGFydCBvZiB0aGUgdXYgYWJvdmUuCgkJCQlpVGV4VG1wLnggPSAoaVRleFRtcC54IDwgMCkgPyBpVGV4VG1wLnggKyB2RGltLnggOiAoKGlUZXhUbXAueCA+PSB2RGltLngpID8gaVRleFRtcC54IC0gdkRpbS54IDogaVRleFRtcC54KTsKCQkJCWlUZXhUbXAueSA9IChpVGV4VG1wLnkgPCAwKSA/IGlUZXhUbXAueSArIHZEaW0ueSA6ICgoaVRleFRtcC55ID49IHZEaW0ueSkgPyBpVGV4VG1wLnkgLSB2RGltLnkgOiBpVGV4VG1wLnkpOwoKCQkJCXJnYnRvYncodGV4ZWxGZXRjaChpbWEsIGlUZXhUbXAsIDApLCBIW2ldW2pdKTsKCQkJfQoJCX0KCgkJZmxvYXQgeCA9IHQueCwgeSA9IHQueTsKCQlmbG9hdCB4MiA9IHggKiB4LCB4MyA9IHgyICogeCwgeTIgPSB5ICogeSwgeTMgPSB5MiAqIHk7CgoJCXZlYzQgWCAgPSB2ZWM0KC0wLjUgKiAoeDMgKyB4KSArIHgyLCAgICAxLjUgKiB4MyAtIDIuNSAqIHgyICsgMSwgLTEuNSAqIHgzICsgMiAqIHgyICsgMC41ICogeCwgMC41ICogKHgzIC0geDIpKTsKCQl2ZWM0IFkgID0gdmVjNCgtMC41ICogKHkzICsgeSkgKyB5MiwgICAgMS41ICogeTMgLSAyLjUgKiB5MiArIDEsIC0xLjUgKiB5MyArIDIgKiB5MiArIDAuNSAqIHksIDAuNSAqICh5MyAtIHkyKSk7CgkJdmVjNCBkWCA9IHZlYzQoLTEuNSAqIHgyICsgMiAqIHggLSAwLjUsIDQuNSAqIHgyIC0gNSAqIHgsICAgICAgICAtNC41ICogeDIgKyA0ICogeCArIDAuNSwgICAgICAxLjUgKiB4MiAtIHgpOwoJCXZlYzQgZFkgPSB2ZWM0KC0xLjUgKiB5MiArIDIgKiB5IC0gMC41LCA0LjUgKiB5MiAtIDUgKiB5LCAgICAgICAgLTQuNSAqIHkyICsgNCAqIHkgKyAwLjUsICAgICAgMS41ICogeTIgLSB5KTsKCgkJLy8gY29tcGxldGUgZGVyaXZhdGl2ZSB2YXJ5aW5nIG5vcm1hbGl6ZWQgY29vcmRpbmF0ZXMgKG11bCBieSB2RGltKQoJCXZlYzIgZEhkU1QgPSB2RGltICogdmVjMihkb3QoWSwgSCAqIGRYKSwgZG90KGRZLCBIICogWCkpOwoKCQkvLyB0cmFuc2Zvcm0gZGVyaXZhdGl2ZSB0byBzY3JlZW4tc3BhY2UKCQl2ZWMyIGRIZHh5X2JpY3ViaWMgPSB2ZWMyKGRIZFNULnggKiBUZXhEeC54ICsgZEhkU1QueSAqIFRleER4LnksCgkJICAgICAgICAgICAgICAgICAgICAgICAgICBkSGRTVC54ICogVGV4RHkueCArIGRIZFNULnkgKiBUZXhEeS55KTsKCgkJLy8gYmxlbmQgYmV0d2VlbiB0aGUgdHdvCgkJZEhkeHkgPSBkSGR4eSAqICgxIC0gZkJsZW5kKSArIGRIZHh5X2JpY3ViaWMgKiBmQmxlbmQ7Cgl9CgoJZEJzID0gaFNjYWxlICogZEhkeHkueDsKCWRCdCA9IGhTY2FsZSAqIGRIZHh5Lnk7Cn0KCiNlbmRpZgoKdm9pZCBtdGV4X2J1bXBfdGFwNSgKICAgICAgICB2ZWMzIHRleGNvLCBzYW1wbGVyMkQgaW1hLCBmbG9hdCBoU2NhbGUsCiAgICAgICAgb3V0IGZsb2F0IGRCcywgb3V0IGZsb2F0IGRCdCkKewoJdmVjMiBUZXhEeCA9IGRGZHgodGV4Y28ueHkpOwoJdmVjMiBUZXhEeSA9IGRGZHkodGV4Y28ueHkpOwoKCXZlYzIgU1RjID0gdGV4Y28ueHk7Cgl2ZWMyIFNUbCA9IHRleGNvLnh5IC0gMC41ICogVGV4RHg7Cgl2ZWMyIFNUciA9IHRleGNvLnh5ICsgMC41ICogVGV4RHg7Cgl2ZWMyIFNUZCA9IHRleGNvLnh5IC0gMC41ICogVGV4RHk7Cgl2ZWMyIFNUdSA9IHRleGNvLnh5ICsgMC41ICogVGV4RHk7CgoJZmxvYXQgSGMsIEhsLCBIciwgSGQsIEh1OwoJcmdidG9idyh0ZXh0dXJlMkQoaW1hLCBTVGMpLCBIYyk7CglyZ2J0b2J3KHRleHR1cmUyRChpbWEsIFNUbCksIEhsKTsKCXJnYnRvYncodGV4dHVyZTJEKGltYSwgU1RyKSwgSHIpOwoJcmdidG9idyh0ZXh0dXJlMkQoaW1hLCBTVGQpLCBIZCk7CglyZ2J0b2J3KHRleHR1cmUyRChpbWEsIFNUdSksIEh1KTsKCglkQnMgPSBoU2NhbGUgKiAoSHIgLSBIbCk7CglkQnQgPSBoU2NhbGUgKiAoSHUgLSBIZCk7Cn0KCnZvaWQgbXRleF9idW1wX2Rlcml2KAogICAgICAgIHZlYzMgdGV4Y28sIHNhbXBsZXIyRCBpbWEsIGZsb2F0IGltYV94LCBmbG9hdCBpbWFfeSwgZmxvYXQgaFNjYWxlLAogICAgICAgIG91dCBmbG9hdCBkQnMsIG91dCBmbG9hdCBkQnQpCnsKCWZsb2F0IHMgPSAxLjA7ICAgICAgLy8gbmVnYXRlIHRoaXMgaWYgZmxpcHBlZCB0ZXh0dXJlIGNvb3JkaW5hdGUKCXZlYzIgVGV4RHggPSBkRmR4KHRleGNvLnh5KTsKCXZlYzIgVGV4RHkgPSBkRmR5KHRleGNvLnh5KTsKCgkvLyB0aGlzIHZhcmlhbnQgdXNpbmcgYSBkZXJpdmF0aXZlIG1hcCBpcyBkZXNjcmliZWQgaGVyZQoJLy8gaHR0cDovL21taWtrZWxzZW4zZC5ibG9nc3BvdC5jb20vMjAxMS8wNy9kZXJpdmF0aXZlLW1hcHMuaHRtbAoJdmVjMiBkaW0gPSB2ZWMyKGltYV94LCBpbWFfeSk7Cgl2ZWMyIGRCZHV2ID0gaFNjYWxlICogZGltICogKDIuMCAqIHRleHR1cmUyRChpbWEsIHRleGNvLnh5KS54eSAtIDEuMCk7CgoJZEJzID0gZEJkdXYueCAqIFRleER4LnggKyBzICogZEJkdXYueSAqIFRleER4Lnk7CglkQnQgPSBkQmR1di54ICogVGV4RHkueCArIHMgKiBkQmR1di55ICogVGV4RHkueTsKfQoKdm9pZCBtdGV4X2J1bXBfYXBwbHkoCiAgICAgICAgZmxvYXQgZkRldCwgZmxvYXQgZEJzLCBmbG9hdCBkQnQsIHZlYzMgdlIxLCB2ZWMzIHZSMiwgdmVjMyB2TmFjY19pbiwKICAgICAgICBvdXQgdmVjMyB2TmFjY19vdXQsIG91dCB2ZWMzIHBlcnR1cmJlZF9ub3JtKQp7Cgl2ZWMzIHZTdXJmR3JhZCA9IHNpZ24oZkRldCkgKiAoZEJzICogdlIxICsgZEJ0ICogdlIyKTsKCgl2TmFjY19vdXQgPSB2TmFjY19pbiAtIHZTdXJmR3JhZDsKCXBlcnR1cmJlZF9ub3JtID0gbm9ybWFsaXplKHZOYWNjX291dCk7Cn0KCnZvaWQgbXRleF9idW1wX2FwcGx5X3RleHNwYWNlKAogICAgICAgIGZsb2F0IGZEZXQsIGZsb2F0IGRCcywgZmxvYXQgZEJ0LCB2ZWMzIHZSMSwgdmVjMyB2UjIsCiAgICAgICAgc2FtcGxlcjJEIGltYSwgdmVjMyB0ZXhjbywgZmxvYXQgaW1hX3gsIGZsb2F0IGltYV95LCB2ZWMzIHZOYWNjX2luLAogICAgICAgIG91dCB2ZWMzIHZOYWNjX291dCwgb3V0IHZlYzMgcGVydHVyYmVkX25vcm0pCnsKCXZlYzIgVGV4RHggPSBkRmR4KHRleGNvLnh5KTsKCXZlYzIgVGV4RHkgPSBkRmR5KHRleGNvLnh5KTsKCgl2ZWMzIHZTdXJmR3JhZCA9IHNpZ24oZkRldCkgKiAoCgkgICAgICAgIGRCcyAvIGxlbmd0aCh2ZWMyKGltYV94ICogVGV4RHgueCwgaW1hX3kgKiBUZXhEeC55KSkgKiB2UjEgKwoJICAgICAgICBkQnQgLyBsZW5ndGgodmVjMihpbWFfeCAqIFRleER5LngsIGltYV95ICogVGV4RHkueSkpICogdlIyKTsKCgl2TmFjY19vdXQgPSB2TmFjY19pbiAtIHZTdXJmR3JhZDsKCXBlcnR1cmJlZF9ub3JtID0gbm9ybWFsaXplKHZOYWNjX291dCk7Cn0KCnZvaWQgbXRleF9uZWdhdGVfdGV4bm9ybWFsKHZlYzMgbm9ybWFsLCBvdXQgdmVjMyBvdXRub3JtYWwpCnsKCW91dG5vcm1hbCA9IHZlYzMoLW5vcm1hbC54LCAtbm9ybWFsLnksIG5vcm1hbC56KTsKfQoKdm9pZCBtdGV4X25zcGFjZV90YW5nZW50KHZlYzQgdGFuZ2VudCwgdmVjMyBub3JtYWwsIHZlYzMgdGV4bm9ybWFsLCBvdXQgdmVjMyBvdXRub3JtYWwpCnsKCXZlYzMgQiA9IHRhbmdlbnQudyAqIGNyb3NzKG5vcm1hbCwgdGFuZ2VudC54eXopOwoKCW91dG5vcm1hbCA9IHRleG5vcm1hbC54ICogdGFuZ2VudC54eXogKyB0ZXhub3JtYWwueSAqIEIgKyB0ZXhub3JtYWwueiAqIG5vcm1hbDsKCW91dG5vcm1hbCA9IG5vcm1hbGl6ZShvdXRub3JtYWwpOwp9Cgp2b2lkIG10ZXhfbnNwYWNlX3dvcmxkKG1hdDQgdmlld21hdCwgdmVjMyB0ZXhub3JtYWwsIG91dCB2ZWMzIG91dG5vcm1hbCkKewoJb3V0bm9ybWFsID0gbm9ybWFsaXplKCh2aWV3bWF0ICogdmVjNCh0ZXhub3JtYWwsIDAuMCkpLnh5eik7Cn0KCnZvaWQgbXRleF9uc3BhY2Vfb2JqZWN0KHZlYzMgdGV4bm9ybWFsLCBvdXQgdmVjMyBvdXRub3JtYWwpCnsKCW91dG5vcm1hbCA9IG5vcm1hbGl6ZShibF9Ob3JtYWxNYXRyaXggKiB0ZXhub3JtYWwpOwp9Cgp2b2lkIG10ZXhfYmxlbmRfbm9ybWFsKGZsb2F0IG5vcmZhYywgdmVjMyBub3JtYWwsIHZlYzMgbmV3bm9ybWFsLCBvdXQgdmVjMyBvdXRub3JtYWwpCnsKCW91dG5vcm1hbCA9ICgxLjAgLSBub3JmYWMpICogbm9ybWFsICsgbm9yZmFjICogbmV3bm9ybWFsOwoJb3V0bm9ybWFsID0gbm9ybWFsaXplKG91dG5vcm1hbCk7Cn0KCi8qKioqKioqIE1BVEVSSUFMICoqKioqKioqKi8KCnZvaWQgbGFtcF92aXNpYmlsaXR5X3N1bl9oZW1pKHZlYzMgbGFtcHZlYywgb3V0IHZlYzMgbHYsIG91dCBmbG9hdCBkaXN0LCBvdXQgZmxvYXQgdmlzaWZhYykKewoJbHYgPSBsYW1wdmVjOwoJZGlzdCA9IDEuMDsKCXZpc2lmYWMgPSAxLjA7Cn0KCnZvaWQgbGFtcF92aXNpYmlsaXR5X290aGVyKHZlYzMgY28sIHZlYzMgbGFtcGNvLCBvdXQgdmVjMyBsdiwgb3V0IGZsb2F0IGRpc3QsIG91dCBmbG9hdCB2aXNpZmFjKQp7CglsdiA9IGNvIC0gbGFtcGNvOwoJZGlzdCA9IGxlbmd0aChsdik7CglsdiA9IG5vcm1hbGl6ZShsdik7Cgl2aXNpZmFjID0gMS4wOwp9Cgp2b2lkIGxhbXBfZmFsbG9mZl9pbnZsaW5lYXIoZmxvYXQgbGFtcGRpc3QsIGZsb2F0IGRpc3QsIG91dCBmbG9hdCB2aXNpZmFjKQp7Cgl2aXNpZmFjID0gbGFtcGRpc3QgLyAobGFtcGRpc3QgKyBkaXN0KTsKfQoKdm9pZCBsYW1wX2ZhbGxvZmZfaW52c3F1YXJlKGZsb2F0IGxhbXBkaXN0LCBmbG9hdCBkaXN0LCBvdXQgZmxvYXQgdmlzaWZhYykKewoJdmlzaWZhYyA9IGxhbXBkaXN0IC8gKGxhbXBkaXN0ICsgZGlzdCAqIGRpc3QpOwp9Cgp2b2lkIGxhbXBfZmFsbG9mZl9zbGlkZXJzKGZsb2F0IGxhbXBkaXN0LCBmbG9hdCBsZDEsIGZsb2F0IGxkMiwgZmxvYXQgZGlzdCwgb3V0IGZsb2F0IHZpc2lmYWMpCnsKCWZsb2F0IGxhbXBkaXN0a3cgPSBsYW1wZGlzdCAqIGxhbXBkaXN0OwoKCXZpc2lmYWMgPSBsYW1wZGlzdCAvIChsYW1wZGlzdCArIGxkMSAqIGRpc3QpOwoJdmlzaWZhYyAqPSBsYW1wZGlzdGt3IC8gKGxhbXBkaXN0a3cgKyBsZDIgKiBkaXN0ICogZGlzdCk7Cn0KCnZvaWQgbGFtcF9mYWxsb2ZmX2ludmNvZWZmaWNpZW50cyhmbG9hdCBjb2VmZl9jb25zdCwgZmxvYXQgY29lZmZfbGluLCBmbG9hdCBjb2VmZl9xdWFkLCBmbG9hdCBkaXN0LCBvdXQgZmxvYXQgdmlzaWZhYykKewoJdmVjMyBjb2VmZiA9IHZlYzMoY29lZmZfY29uc3QsIGNvZWZmX2xpbiwgY29lZmZfcXVhZCk7Cgl2ZWMzIGRfY29lZmYgPSB2ZWMzKDEuMCwgZGlzdCwgZGlzdCAqIGRpc3QpOwoJZmxvYXQgdmlzaWZhY19yID0gZG90KGNvZWZmLCBkX2NvZWZmKTsKCWlmICh2aXNpZmFjX3IgPiAwLjApCgkJdmlzaWZhYyA9IDEuMCAvIHZpc2lmYWNfcjsKCWVsc2UKCQl2aXNpZmFjID0gMC4wOwp9Cgp2b2lkIGxhbXBfZmFsbG9mZl9jdXJ2ZShmbG9hdCBsYW1wZGlzdCwgc2FtcGxlcjJEIGN1cnZlbWFwLCBmbG9hdCBkaXN0LCBvdXQgZmxvYXQgdmlzaWZhYykKewoJdmlzaWZhYyA9IHRleHR1cmUyRChjdXJ2ZW1hcCwgdmVjMihkaXN0IC8gbGFtcGRpc3QsIDAuMCkpLng7Cn0KCnZvaWQgbGFtcF92aXNpYmlsaXR5X3NwaGVyZShmbG9hdCBsYW1wZGlzdCwgZmxvYXQgZGlzdCwgZmxvYXQgdmlzaWZhYywgb3V0IGZsb2F0IG91dHZpc2lmYWMpCnsKCWZsb2F0IHQgPSBsYW1wZGlzdCAtIGRpc3Q7CgoJb3V0dmlzaWZhYyA9IHZpc2lmYWMgKiBtYXgodCwgMC4wKSAvIGxhbXBkaXN0Owp9Cgp2b2lkIGxhbXBfdmlzaWJpbGl0eV9zcG90X3NxdWFyZSh2ZWMzIGxhbXB2ZWMsIG1hdDQgbGFtcGltYXQsIHZlYzIgc2NhbGUsIHZlYzMgbHYsIG91dCBmbG9hdCBpbnByKQp7CglpZiAoZG90KGx2LCBsYW1wdmVjKSA+IDAuMCkgewoJCXZlYzMgbHZyb3QgPSAobGFtcGltYXQgKiB2ZWM0KGx2LCAwLjApKS54eXo7CgkJLyogd2l0aG91dCBjbGV2ZXIgbm9uLXVuaWZvcm0gc2NhbGUsIHdlIGNvdWxkIGRvOiAqLwoJCS8vIGZsb2F0IHggPSBtYXgoYWJzKGx2cm90LnggLyBsdnJvdC56KSwgYWJzKGx2cm90LnkgLyBsdnJvdC56KSk7CgkJZmxvYXQgeCA9IG1heChhYnMoKGx2cm90LnggLyBzY2FsZS54KSAvIGx2cm90LnopLCBhYnMoKGx2cm90LnkgLyBzY2FsZS55KSAvIGx2cm90LnopKTsKCgkJaW5wciA9IDEuMCAvIHNxcnQoMS4wICsgeCAqIHgpOwoJfQoJZWxzZQoJCWlucHIgPSAwLjA7Cn0KCnZvaWQgbGFtcF92aXNpYmlsaXR5X3Nwb3RfY2lyY2xlKHZlYzMgbGFtcHZlYywgbWF0NCBsYW1waW1hdCwgdmVjMiBzY2FsZSwgdmVjMyBsdiwgb3V0IGZsb2F0IGlucHIpCnsKCS8qIHdpdGhvdXQgY2xldmVyIG5vbi11bmlmb3JtIHNjYWxlLCB3ZSBjb3VsZCBkbzogKi8KCS8vIGlucHIgPSBkb3QobHYsIGxhbXB2ZWMpOwoJaWYgKGRvdChsdiwgbGFtcHZlYykgPiAwLjApIHsKCQl2ZWMzIGx2cm90ID0gKGxhbXBpbWF0ICogdmVjNChsdiwgMC4wKSkueHl6OwoJCWZsb2F0IHggPSBhYnMobHZyb3QueCAvIGx2cm90LnopOwoJCWZsb2F0IHkgPSBhYnMobHZyb3QueSAvIGx2cm90LnopOwoKCQlmbG9hdCBlbGxpcHNlID0gYWJzKCh4ICogeCkgLyAoc2NhbGUueCAqIHNjYWxlLngpICsgKHkgKiB5KSAvIChzY2FsZS55ICogc2NhbGUueSkpOwoKCQlpbnByID0gMS4wIC8gc3FydCgxLjAgKyBlbGxpcHNlKTsKCX0KCWVsc2UKCQlpbnByID0gMC4wOwp9Cgp2b2lkIGxhbXBfdmlzaWJpbGl0eV9zcG90KGZsb2F0IHNwb3RzaSwgZmxvYXQgc3BvdGJsLCBmbG9hdCBpbnByLCBmbG9hdCB2aXNpZmFjLCBvdXQgZmxvYXQgb3V0dmlzaWZhYykKewoJZmxvYXQgdCA9IHNwb3RzaTsKCglpZiAoaW5wciA8PSB0KSB7CgkJb3V0dmlzaWZhYyA9IDAuMDsKCX0KCWVsc2UgewoJCXQgPSBpbnByIC0gdDsKCgkJLyogc29mdCBhcmVhICovCgkJaWYgKHNwb3RibCAhPSAwLjApCgkJCWlucHIgKj0gc21vb3Roc3RlcCgwLjAsIDEuMCwgdCAvIHNwb3RibCk7CgoJCW91dHZpc2lmYWMgPSB2aXNpZmFjICogaW5wcjsKCX0KfQoKdm9pZCBsYW1wX3Zpc2liaWxpdHlfY2xhbXAoZmxvYXQgdmlzaWZhYywgb3V0IGZsb2F0IG91dHZpc2lmYWMpCnsKCW91dHZpc2lmYWMgPSAodmlzaWZhYyA8IDAuMDAxKSA/IDAuMCA6IHZpc2lmYWM7Cn0KCnZvaWQgd29ybGRfcGFwZXJfdmlldyh2ZWMzIHZlYywgb3V0IHZlYzMgb3V0dmVjKQp7Cgl2ZWMzIG52ZWMgPSBub3JtYWxpemUodmVjKTsKCW91dHZlYyA9IChibF9Qcm9qZWN0aW9uTWF0cml4WzNdWzNdID09IDAuMCkgPyB2ZWMzKG52ZWMueCwgMC4wLCBudmVjLnkpIDogdmVjMygwLjAsIDAuMCwgLTEuMCk7Cn0KCnZvaWQgd29ybGRfemVuX21hcHBpbmcodmVjMyB2aWV3LCBmbG9hdCB6ZW51cCwgZmxvYXQgemVuZG93biwgb3V0IGZsb2F0IHplbmZhYykKewoJaWYgKHZpZXcueiA+PSAwLjApCgkJemVuZmFjID0gemVudXA7CgllbHNlCgkJemVuZmFjID0gemVuZG93bjsKfQoKdm9pZCB3b3JsZF9ibGVuZF9wYXBlcl9yZWFsKHZlYzMgdmVjLCBvdXQgZmxvYXQgYmxlbmQpCnsKCWJsZW5kID0gYWJzKHZlYy55KTsKfQoKdm9pZCB3b3JsZF9ibGVuZF9wYXBlcih2ZWMzIHZlYywgb3V0IGZsb2F0IGJsZW5kKQp7CglibGVuZCA9ICh2ZWMueSArIDEuMCkgKiAwLjU7Cn0KCnZvaWQgd29ybGRfYmxlbmRfcmVhbCh2ZWMzIHZlYywgb3V0IGZsb2F0IGJsZW5kKQp7CglibGVuZCA9IGFicyhub3JtYWxpemUodmVjKS56KTsKfQoKdm9pZCB3b3JsZF9ibGVuZCh2ZWMzIHZlYywgb3V0IGZsb2F0IGJsZW5kKQp7CglibGVuZCA9IChub3JtYWxpemUodmVjKS56ICsgMS4wKSAqIDAuNTsKfQoKdm9pZCBzaGFkZV92aWV3KHZlYzMgY28sIG91dCB2ZWMzIHZpZXcpCnsKCS8qIGhhbmRsZSBwZXJzcGVjdGl2ZS9vcnRob2dyYXBoaWMgKi8KCXZpZXcgPSAoYmxfUHJvamVjdGlvbk1hdHJpeFszXVszXSA9PSAwLjApID8gbm9ybWFsaXplKGNvKSA6IHZlYzMoMC4wLCAwLjAsIC0xLjApOwp9Cgp2b2lkIHNoYWRlX3RhbmdlbnRfdih2ZWMzIGx2LCB2ZWMzIHRhbmcsIG91dCB2ZWMzIHZuKQp7Cgl2ZWMzIGMgPSBjcm9zcyhsdiwgdGFuZyk7Cgl2ZWMzIHZub3IgPSBjcm9zcyhjLCB0YW5nKTsKCgl2biA9IC1ub3JtYWxpemUodm5vcik7Cn0KCnZvaWQgc2hhZGVfaW5wKHZlYzMgdm4sIHZlYzMgbHYsIG91dCBmbG9hdCBpbnApCnsKCWlucCA9IGRvdCh2biwgbHYpOwp9Cgp2b2lkIHNoYWRlX2lzX25vX2RpZmZ1c2Uob3V0IGZsb2F0IGlzKQp7CglpcyA9IDAuMDsKfQoKdm9pZCBzaGFkZV9pc19oZW1pKGZsb2F0IGlucCwgb3V0IGZsb2F0IGlzKQp7CglpcyA9IDAuNSAqIGlucCArIDAuNTsKfQoKZmxvYXQgYXJlYV9sYW1wX2VuZXJneShtYXQ0IGFyZWEsIHZlYzMgY28sIHZlYzMgdm4pCnsKCXZlYzMgdmVjWzRdLCBjWzRdOwoJZmxvYXQgcmFkWzRdLCBmYWM7CgoJdmVjWzBdID0gbm9ybWFsaXplKGNvIC0gYXJlYVswXS54eXopOwoJdmVjWzFdID0gbm9ybWFsaXplKGNvIC0gYXJlYVsxXS54eXopOwoJdmVjWzJdID0gbm9ybWFsaXplKGNvIC0gYXJlYVsyXS54eXopOwoJdmVjWzNdID0gbm9ybWFsaXplKGNvIC0gYXJlYVszXS54eXopOwoKCWNbMF0gPSBub3JtYWxpemUoY3Jvc3ModmVjWzBdLCB2ZWNbMV0pKTsKCWNbMV0gPSBub3JtYWxpemUoY3Jvc3ModmVjWzFdLCB2ZWNbMl0pKTsKCWNbMl0gPSBub3JtYWxpemUoY3Jvc3ModmVjWzJdLCB2ZWNbM10pKTsKCWNbM10gPSBub3JtYWxpemUoY3Jvc3ModmVjWzNdLCB2ZWNbMF0pKTsKCglyYWRbMF0gPSBhY29zKGRvdCh2ZWNbMF0sIHZlY1sxXSkpOwoJcmFkWzFdID0gYWNvcyhkb3QodmVjWzFdLCB2ZWNbMl0pKTsKCXJhZFsyXSA9IGFjb3MoZG90KHZlY1syXSwgdmVjWzNdKSk7CglyYWRbM10gPSBhY29zKGRvdCh2ZWNbM10sIHZlY1swXSkpOwoKCWZhYyA9ICByYWRbMF0gKiBkb3Qodm4sIGNbMF0pOwoJZmFjICs9IHJhZFsxXSAqIGRvdCh2biwgY1sxXSk7CglmYWMgKz0gcmFkWzJdICogZG90KHZuLCBjWzJdKTsKCWZhYyArPSByYWRbM10gKiBkb3Qodm4sIGNbM10pOwoKCXJldHVybiBtYXgoZmFjLCAwLjApOwp9Cgp2b2lkIHNoYWRlX2lucF9hcmVhKAogICAgICAgIHZlYzMgcG9zaXRpb24sIHZlYzMgbGFtcGNvLCB2ZWMzIGxhbXB2ZWMsIHZlYzMgdm4sIG1hdDQgYXJlYSwgZmxvYXQgYXJlYXNpemUsIGZsb2F0IGssCiAgICAgICAgb3V0IGZsb2F0IGlucCkKewoJdmVjMyBjbyA9IHBvc2l0aW9uOwoJdmVjMyB2ZWMgPSBjbyAtIGxhbXBjbzsKCglpZiAoZG90KHZlYywgbGFtcHZlYykgPCAwLjApIHsKCQlpbnAgPSAwLjA7Cgl9CgllbHNlIHsKCQlmbG9hdCBpbnRlbnMgPSBhcmVhX2xhbXBfZW5lcmd5KGFyZWEsIGNvLCB2bik7CgoJCWlucCA9IHBvdyhpbnRlbnMgKiBhcmVhc2l6ZSwgayk7Cgl9Cn0KCnZvaWQgc2hhZGVfZGlmZnVzZV9vcmVuX25heWVyKGZsb2F0IG5sLCB2ZWMzIG4sIHZlYzMgbCwgdmVjMyB2LCBmbG9hdCByb3VnaCwgb3V0IGZsb2F0IGlzKQp7Cgl2ZWMzIGggPSBub3JtYWxpemUodiArIGwpOwoJZmxvYXQgbmggPSBtYXgoZG90KG4sIGgpLCAwLjApOwoJZmxvYXQgbnYgPSBtYXgoZG90KG4sIHYpLCAwLjApOwoJZmxvYXQgcmVhbG5sID0gZG90KG4sIGwpOwoKCWlmIChyZWFsbmwgPCAwLjApIHsKCQlpcyA9IDAuMDsKCX0KCWVsc2UgaWYgKG5sIDwgMC4wKSB7CgkJaXMgPSAwLjA7Cgl9CgllbHNlIHsKCQlmbG9hdCB2aCA9IG1heChkb3QodiwgaCksIDAuMCk7CgkJZmxvYXQgTGl0X0EgPSBhY29zKHJlYWxubCk7CgkJZmxvYXQgVmlld19BID0gYWNvcyhudik7CgoJCXZlYzMgTGl0X0IgPSBub3JtYWxpemUobCAtIHJlYWxubCAqIG4pOwoJCXZlYzMgVmlld19CID0gbm9ybWFsaXplKHYgLSBudiAqIG4pOwoKCQlmbG9hdCB0ID0gbWF4KGRvdChMaXRfQiwgVmlld19CKSwgMC4wKTsKCgkJZmxvYXQgYSwgYjsKCgkJaWYgKExpdF9BID4gVmlld19BKSB7CgkJCWEgPSBMaXRfQTsKCQkJYiA9IFZpZXdfQTsKCQl9CgkJZWxzZSB7CgkJCWEgPSBWaWV3X0E7CgkJCWIgPSBMaXRfQTsKCQl9CgoJCWZsb2F0IEEgPSAxLjAgLSAoMC41ICogKChyb3VnaCAqIHJvdWdoKSAvICgocm91Z2ggKiByb3VnaCkgKyAwLjMzKSkpOwoJCWZsb2F0IEIgPSAwLjQ1ICogKChyb3VnaCAqIHJvdWdoKSAvICgocm91Z2ggKiByb3VnaCkgKyAwLjA5KSk7CgoJCWIgKj0gMC45NTsKCQlpcyA9IG5sICogKEEgKyAoQiAqIHQgKiBzaW4oYSkgKiB0YW4oYikpKTsKCX0KfQoKdm9pZCBzaGFkZV9kaWZmdXNlX3Rvb24odmVjMyBuLCB2ZWMzIGwsIHZlYzMgdiwgZmxvYXQgc2l6ZSwgZmxvYXQgdHNtb290aCwgb3V0IGZsb2F0IGlzKQp7CglmbG9hdCByc2x0ID0gZG90KG4sIGwpOwoJZmxvYXQgYW5nID0gYWNvcyhyc2x0KTsKCglpZiAoYW5nIDwgc2l6ZSkgaXMgPSAxLjA7CgllbHNlIGlmIChhbmcgPiAoc2l6ZSArIHRzbW9vdGgpIHx8IHRzbW9vdGggPT0gMC4wKSBpcyA9IDAuMDsKCWVsc2UgaXMgPSAxLjAgLSAoKGFuZyAtIHNpemUpIC8gdHNtb290aCk7Cn0KCnZvaWQgc2hhZGVfZGlmZnVzZV9taW5uYWVydChmbG9hdCBubCwgdmVjMyBuLCB2ZWMzIHYsIGZsb2F0IGRhcmtuZXNzLCBvdXQgZmxvYXQgaXMpCnsKCWlmIChubCA8PSAwLjApIHsKCQlpcyA9IDAuMDsKCX0KCWVsc2UgewoJCWZsb2F0IG52ID0gbWF4KGRvdChuLCB2KSwgMC4wKTsKCgkJaWYgKGRhcmtuZXNzIDw9IDEuMCkKCQkJaXMgPSBubCAqIHBvdyhtYXgobnYgKiBubCwgMC4xKSwgZGFya25lc3MgLSAxLjApOwoJCWVsc2UKCQkJaXMgPSBubCAqIHBvdygxLjAwMDEgLSBudiwgZGFya25lc3MgLSAxLjApOwoJfQp9CgpmbG9hdCBmcmVzbmVsX2ZhYyh2ZWMzIHZpZXcsIHZlYzMgdm4sIGZsb2F0IGdyYWQsIGZsb2F0IGZhYykKewoJZmxvYXQgdDEsIHQyOwoJZmxvYXQgZmZhYzsKCglpZiAoZmFjID09IDAuMCkgewoJCWZmYWMgPSAxLjA7Cgl9CgllbHNlIHsKCQl0MSA9IGRvdCh2aWV3LCB2bik7CgkJaWYgKHQxID4gMC4wKSB0MiA9IDEuMCArIHQxOwoJCWVsc2UgdDIgPSAxLjAgLSB0MTsKCgkJdDIgPSBncmFkICsgKDEuMCAtIGdyYWQpICogcG93KHQyLCBmYWMpOwoKCQlpZiAodDIgPCAwLjApIGZmYWMgPSAwLjA7CgkJZWxzZSBpZiAodDIgPiAxLjApIGZmYWMgPSAxLjA7CgkJZWxzZSBmZmFjID0gdDI7Cgl9CgoJcmV0dXJuIGZmYWM7Cn0KCnZvaWQgc2hhZGVfZGlmZnVzZV9mcmVzbmVsKHZlYzMgdm4sIHZlYzMgbHYsIHZlYzMgdmlldywgZmxvYXQgZmFjX2ksIGZsb2F0IGZhYywgb3V0IGZsb2F0IGlzKQp7CglpcyA9IGZyZXNuZWxfZmFjKGx2LCB2biwgZmFjX2ksIGZhYyk7Cn0KCnZvaWQgc2hhZGVfY3ViaWMoZmxvYXQgaXMsIG91dCBmbG9hdCBvdXRpcykKewoJaWYgKGlzID4gMC4wICYmIGlzIDwgMS4wKQoJCW91dGlzID0gc21vb3Roc3RlcCgwLjAsIDEuMCwgaXMpOwoJZWxzZQoJCW91dGlzID0gaXM7Cn0KCnZvaWQgc2hhZGVfdmlzaWZhYyhmbG9hdCBpLCBmbG9hdCB2aXNpZmFjLCBmbG9hdCByZWZsLCBvdXQgZmxvYXQgb3V0aSkKewoJLyppZiAoaSA+IDAuMCkqLwoJb3V0aSA9IG1heChpICogdmlzaWZhYyAqIHJlZmwsIDAuMCk7CgkvKmVsc2UKCSAgICBvdXRpID0gaTsqLwp9Cgp2b2lkIHNoYWRlX3RhbmdlbnRfdl9zcGVjKHZlYzMgdGFuZywgb3V0IHZlYzMgdm4pCnsKCXZuID0gdGFuZzsKfQoKdm9pZCBzaGFkZV9hZGRfdG9fZGlmZnVzZShmbG9hdCBpLCB2ZWMzIGxhbXBjb2wsIHZlYzMgY29sLCBvdXQgdmVjMyBvdXRjb2wpCnsKCWlmIChpID4gMC4wKQoJCW91dGNvbCA9IGkgKiBsYW1wY29sICogY29sOwoJZWxzZQoJCW91dGNvbCA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7Cn0KCnZvaWQgc2hhZGVfaGVtaV9zcGVjKHZlYzMgdm4sIHZlYzMgbHYsIHZlYzMgdmlldywgZmxvYXQgc3BlYywgZmxvYXQgaGFyZCwgZmxvYXQgdmlzaWZhYywgb3V0IGZsb2F0IHQpCnsKCWx2ICs9IHZpZXc7CglsdiA9IG5vcm1hbGl6ZShsdik7CgoJdCA9IGRvdCh2biwgbHYpOwoJdCA9IDAuNSAqIHQgKyAwLjU7CgoJdCA9IHZpc2lmYWMgKiBzcGVjICogcG93KHQsIGhhcmQpOwp9Cgp2b2lkIHNoYWRlX3Bob25nX3NwZWModmVjMyBuLCB2ZWMzIGwsIHZlYzMgdiwgZmxvYXQgaGFyZCwgb3V0IGZsb2F0IHNwZWNmYWMpCnsKCXZlYzMgaCA9IG5vcm1hbGl6ZShsICsgdik7CglmbG9hdCByc2x0ID0gbWF4KGRvdChoLCBuKSwgMC4wKTsKCglzcGVjZmFjID0gcG93KHJzbHQsIGhhcmQpOwp9Cgp2b2lkIHNoYWRlX2Nvb2t0b3JyX3NwZWModmVjMyBuLCB2ZWMzIGwsIHZlYzMgdiwgZmxvYXQgaGFyZCwgb3V0IGZsb2F0IHNwZWNmYWMpCnsKCXZlYzMgaCA9IG5vcm1hbGl6ZSh2ICsgbCk7CglmbG9hdCBuaCA9IGRvdChuLCBoKTsKCglpZiAobmggPCAwLjApIHsKCQlzcGVjZmFjID0gMC4wOwoJfQoJZWxzZSB7CgkJZmxvYXQgbnYgPSBtYXgoZG90KG4sIHYpLCAwLjApOwoJCWZsb2F0IGkgPSBwb3cobmgsIGhhcmQpOwoKCQlpID0gaSAvICgwLjEgKyBudik7CgkJc3BlY2ZhYyA9IGk7Cgl9Cn0KCnZvaWQgc2hhZGVfYmxpbm5fc3BlYyh2ZWMzIG4sIHZlYzMgbCwgdmVjMyB2LCBmbG9hdCByZWZyYWMsIGZsb2F0IHNwZWNfcG93ZXIsIG91dCBmbG9hdCBzcGVjZmFjKQp7CglpZiAocmVmcmFjIDwgMS4wKSB7CgkJc3BlY2ZhYyA9IDAuMDsKCX0KCWVsc2UgaWYgKHNwZWNfcG93ZXIgPT0gMC4wKSB7CgkJc3BlY2ZhYyA9IDAuMDsKCX0KCWVsc2UgewoJCWlmIChzcGVjX3Bvd2VyIDwgMTAwLjApCgkJCXNwZWNfcG93ZXIgPSBzcXJ0KDEuMCAvIHNwZWNfcG93ZXIpOwoJCWVsc2UKCQkJc3BlY19wb3dlciA9IDEwLjAgLyBzcGVjX3Bvd2VyOwoKCQl2ZWMzIGggPSBub3JtYWxpemUodiArIGwpOwoJCWZsb2F0IG5oID0gZG90KG4sIGgpOwoJCWlmIChuaCA8IDAuMCkgewoJCQlzcGVjZmFjID0gMC4wOwoJCX0KCQllbHNlIHsKCQkJZmxvYXQgbnYgPSBtYXgoZG90KG4sIHYpLCAwLjAxKTsKCQkJZmxvYXQgbmwgPSBkb3QobiwgbCk7CgkJCWlmIChubCA8PSAwLjAxKSB7CgkJCQlzcGVjZmFjID0gMC4wOwoJCQl9CgkJCWVsc2UgewoJCQkJZmxvYXQgdmggPSBtYXgoZG90KHYsIGgpLCAwLjAxKTsKCgkJCQlmbG9hdCBhID0gMS4wOwoJCQkJZmxvYXQgYiA9ICgyLjAgKiBuaCAqIG52KSAvIHZoOwoJCQkJZmxvYXQgYyA9ICgyLjAgKiBuaCAqIG5sKSAvIHZoOwoKCQkJCWZsb2F0IGcgPSAwLjA7CgoJCQkJaWYgKGEgPCBiICYmIGEgPCBjKSBnID0gYTsKCQkJCWVsc2UgaWYgKGIgPCBhICYmIGIgPCBjKSBnID0gYjsKCQkJCWVsc2UgaWYgKGMgPCBhICYmIGMgPCBiKSBnID0gYzsKCgkJCQlmbG9hdCBwID0gc3FydCgoKHJlZnJhYyAqIHJlZnJhYykgKyAodmggKiB2aCkgLSAxLjApKTsKCQkJCWZsb2F0IGYgPSAoKCgocCAtIHZoKSAqIChwIC0gdmgpKSAvICgocCArIHZoKSAqIChwICsgdmgpKSkgKgoJCQkJICAgICAgICAgICAoMS4wICsgKCgoKHZoICogKHAgKyB2aCkpIC0gMS4wKSAqICgodmggKiAocCArIHZoKSkgLSAxLjApKSAvCgkJCQkgICAgICAgICAgICAgICAgICAgKCgodmggKiAocCAtIHZoKSkgKyAxLjApICogKCh2aCAqIChwIC0gdmgpKSArIDEuMCkpKSkpOwoJCQkJZmxvYXQgYW5nID0gYWNvcyhuaCk7CgoJCQkJc3BlY2ZhYyA9IG1heChmICogZyAqIGV4cF9ibGVuZGVyKCgtKGFuZyAqIGFuZykgLyAoMi4wICogc3BlY19wb3dlciAqIHNwZWNfcG93ZXIpKSksIDAuMCk7CgkJCX0KCQl9Cgl9Cn0KCnZvaWQgc2hhZGVfd2FyZGlzb19zcGVjKHZlYzMgbiwgdmVjMyBsLCB2ZWMzIHYsIGZsb2F0IHJtcywgb3V0IGZsb2F0IHNwZWNmYWMpCnsKCXZlYzMgaCA9IG5vcm1hbGl6ZShsICsgdik7CglmbG9hdCBuaCA9IG1heChkb3QobiwgaCksIDAuMDAxKTsKCWZsb2F0IG52ID0gbWF4KGRvdChuLCB2KSwgMC4wMDEpOwoJZmxvYXQgbmwgPSBtYXgoZG90KG4sIGwpLCAwLjAwMSk7CglmbG9hdCBhbmdsZSA9IHRhbihhY29zKG5oKSk7CglmbG9hdCBhbHBoYSA9IG1heChybXMsIDAuMDAxKTsKCglzcGVjZmFjID0gbmwgKiAoMS4wIC8gKDQuMCAqIE1fUEkgKiBhbHBoYSAqIGFscGhhKSkgKiAoZXhwX2JsZW5kZXIoLShhbmdsZSAqIGFuZ2xlKSAvIChhbHBoYSAqIGFscGhhKSkgLyAoc3FydChudiAqIG5sKSkpOwp9Cgp2b2lkIHNoYWRlX3Rvb25fc3BlYyh2ZWMzIG4sIHZlYzMgbCwgdmVjMyB2LCBmbG9hdCBzaXplLCBmbG9hdCB0c21vb3RoLCBvdXQgZmxvYXQgc3BlY2ZhYykKewoJdmVjMyBoID0gbm9ybWFsaXplKGwgKyB2KTsKCWZsb2F0IHJzbHQgPSBkb3QoaCwgbik7CglmbG9hdCBhbmcgPSBhY29zKHJzbHQpOwoKCWlmIChhbmcgPCBzaXplKSByc2x0ID0gMS4wOwoJZWxzZSBpZiAoYW5nID49IChzaXplICsgdHNtb290aCkgfHwgdHNtb290aCA9PSAwLjApIHJzbHQgPSAwLjA7CgllbHNlIHJzbHQgPSAxLjAgLSAoKGFuZyAtIHNpemUpIC8gdHNtb290aCk7CgoJc3BlY2ZhYyA9IHJzbHQ7Cn0KCnZvaWQgc2hhZGVfc3BlY19hcmVhX2lucChmbG9hdCBzcGVjZmFjLCBmbG9hdCBpbnAsIG91dCBmbG9hdCBvdXRzcGVjZmFjKQp7CglvdXRzcGVjZmFjID0gc3BlY2ZhYyAqIGlucDsKfQoKdm9pZCBzaGFkZV9zcGVjX3QoZmxvYXQgc2hhZGZhYywgZmxvYXQgc3BlYywgZmxvYXQgdmlzaWZhYywgZmxvYXQgc3BlY2ZhYywgb3V0IGZsb2F0IHQpCnsKCXQgPSBzaGFkZmFjICogc3BlYyAqIHZpc2lmYWMgKiBzcGVjZmFjOwp9Cgp2b2lkIHNoYWRlX2FkZF9zcGVjKGZsb2F0IHQsIHZlYzMgbGFtcGNvbCwgdmVjMyBzcGVjY29sLCBvdXQgdmVjMyBvdXRjb2wpCnsKCW91dGNvbCA9IHQgKiBsYW1wY29sICogc3BlY2NvbDsKfQoKdm9pZCBzaGFkZV9hZGRfbWlycm9yKHZlYzMgbWlyLCB2ZWM0IHJlZmNvbCwgdmVjMyBjb21iaW5lZCwgb3V0IHZlYzMgcmVzdWx0KQp7CglyZXN1bHQgPSBtaXIgKiByZWZjb2wuZ2JhICsgKHZlYzMoMS4wKSAtIG1pciAqIHJlZmNvbC5ycnIpICogY29tYmluZWQ7Cn0KCnZvaWQgYWxwaGFfc3BlY19jb3JyZWN0aW9uKHZlYzMgc3BlYywgZmxvYXQgc3BlY3RyYSwgZmxvYXQgYWxwaGEsIG91dCBmbG9hdCBvdXRhbHBoYSkKewoJaWYgKHNwZWN0cmEgPiAwLjApIHsKCQlmbG9hdCB0ID0gY2xhbXAobWF4KG1heChzcGVjLnIsIHNwZWMuZyksIHNwZWMuYikgKiBzcGVjdHJhLCAwLjAsIDEuMCk7CgkJb3V0YWxwaGEgPSAoMS4wIC0gdCkgKiBhbHBoYSArIHQ7Cgl9CgllbHNlIHsKCQlvdXRhbHBoYSA9IGFscGhhOwoJfQp9Cgp2b2lkIHNoYWRlX2FkZCh2ZWM0IGNvbDEsIHZlYzQgY29sMiwgb3V0IHZlYzQgb3V0Y29sKQp7CglvdXRjb2wgPSBjb2wxICsgY29sMjsKfQoKdm9pZCBzaGFkZV9tYWRkKHZlYzQgY29sLCB2ZWM0IGNvbDEsIHZlYzQgY29sMiwgb3V0IHZlYzQgb3V0Y29sKQp7CglvdXRjb2wgPSBjb2wgKyBjb2wxICogY29sMjsKfQoKdm9pZCBzaGFkZV9hZGRfY2xhbXBlZCh2ZWM0IGNvbDEsIHZlYzQgY29sMiwgb3V0IHZlYzQgb3V0Y29sKQp7CglvdXRjb2wgPSBjb2wxICsgbWF4KGNvbDIsIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKSk7Cn0KCnZvaWQgc2hhZGVfbWFkZF9jbGFtcGVkKHZlYzQgY29sLCB2ZWM0IGNvbDEsIHZlYzQgY29sMiwgb3V0IHZlYzQgb3V0Y29sKQp7CglvdXRjb2wgPSBjb2wgKyBtYXgoY29sMSAqIGNvbDIsIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKSk7Cn0KCnZvaWQgZW52X2FwcGx5KHZlYzQgY29sLCB2ZWMzIGhvciwgdmVjMyB6ZW4sIHZlYzQgZiwgbWF0NCB2bSwgdmVjMyB2biwgb3V0IHZlYzQgb3V0Y29sKQp7Cgl2ZWMzIHZ2ID0gbm9ybWFsaXplKHZtWzJdLnh5eik7CglmbG9hdCBza3lmYWMgPSAwLjUgKiAoMS4wICsgZG90KHZuLCAtdnYpKTsKCW91dGNvbCA9IGNvbCArIGYgKiB2ZWM0KG1peChob3IsIHplbiwgc2t5ZmFjKSwgMCk7Cn0KCnZvaWQgc2hhZGVfbWFkZGYodmVjNCBjb2wsIGZsb2F0IGYsIHZlYzQgY29sMSwgb3V0IHZlYzQgb3V0Y29sKQp7CglvdXRjb2wgPSBjb2wgKyBmICogY29sMTsKfQoKdm9pZCBzaGFkZV9tdWwodmVjNCBjb2wxLCB2ZWM0IGNvbDIsIG91dCB2ZWM0IG91dGNvbCkKewoJb3V0Y29sID0gY29sMSAqIGNvbDI7Cn0KCnZvaWQgc2hhZGVfbXVsX3ZhbHVlKGZsb2F0IGZhYywgdmVjNCBjb2wsIG91dCB2ZWM0IG91dGNvbCkKewoJb3V0Y29sID0gY29sICogZmFjOwp9Cgp2b2lkIHNoYWRlX211bF92YWx1ZV92MyhmbG9hdCBmYWMsIHZlYzMgY29sLCBvdXQgdmVjMyBvdXRjb2wpCnsKCW91dGNvbCA9IGNvbCAqIGZhYzsKfQoKdm9pZCBzaGFkZV9vYmNvbG9yKHZlYzQgY29sLCB2ZWM0IG9iY29sLCBvdXQgdmVjNCBvdXRjb2wpCnsKCW91dGNvbCA9IHZlYzQoY29sLnJnYiAqIG9iY29sLnJnYiwgY29sLmEpOwp9Cgp2b2lkIHJhbXBfcmdidG9idyh2ZWMzIGNvbG9yLCBvdXQgZmxvYXQgb3V0dmFsKQp7CglvdXR2YWwgPSBjb2xvci5yICogMC4zICsgY29sb3IuZyAqIDAuNTggKyBjb2xvci5iICogMC4xMjsKfQoKdm9pZCBzaGFkZV9vbmx5X3NoYWRvdyhmbG9hdCBpLCBmbG9hdCBzaGFkZmFjLCBmbG9hdCBlbmVyZ3ksIHZlYzMgc2hhZGNvbCwgb3V0IHZlYzMgb3V0c2hhZHJnYikKewoJb3V0c2hhZHJnYiA9IGkgKiBlbmVyZ3kgKiAoMS4wIC0gc2hhZGZhYykgKiAodmVjMygxLjApIC0gc2hhZGNvbCk7Cn0KCnZvaWQgc2hhZGVfb25seV9zaGFkb3dfZGlmZnVzZSh2ZWMzIHNoYWRyZ2IsIHZlYzMgcmdiLCB2ZWM0IGRpZmYsIG91dCB2ZWM0IG91dGRpZmYpCnsKCW91dGRpZmYgPSBkaWZmIC0gdmVjNChyZ2IgKiBzaGFkcmdiLCAwLjApOwp9Cgp2b2lkIHNoYWRlX29ubHlfc2hhZG93X3NwZWN1bGFyKHZlYzMgc2hhZHJnYiwgdmVjMyBzcGVjcmdiLCB2ZWM0IHNwZWMsIG91dCB2ZWM0IG91dHNwZWMpCnsKCW91dHNwZWMgPSBzcGVjIC0gdmVjNChzcGVjcmdiICogc2hhZHJnYiwgMC4wKTsKfQoKdm9pZCBzaGFkZV9jbGFtcF9wb3NpdGl2ZSh2ZWM0IGNvbCwgb3V0IHZlYzQgb3V0Y29sKQp7CglvdXRjb2wgPSBtYXgoY29sLCB2ZWM0KDAuMCkpOwp9Cgp2b2lkIHRlc3Rfc2hhZG93YnVmKAogICAgICAgIHZlYzMgcmNvLCBzYW1wbGVyMkQgc2hhZG93bWFwLCBtYXQ0IHNoYWRvd3BlcnNtYXQsIGZsb2F0IHNoYWRvd2JpYXMsIGZsb2F0IGlucCwKICAgICAgICBvdXQgZmxvYXQgcmVzdWx0KQp7CglpZiAoaW5wIDw9IDAuMCkgewoJCXJlc3VsdCA9IDAuMDsKCX0KCWVsc2UgewoJCXZlYzQgY28gPSBzaGFkb3dwZXJzbWF0ICogdmVjNChyY28sIDEuMCk7CgoJCS8vZmxvYXQgYmlhcyA9ICgxLjUgLSBpbnAqaW5wKSpzaGFkb3diaWFzOwoJCWNvLnogLT0gc2hhZG93YmlhcyAqIGNvLnc7CgoJCWlmIChjby53ID4gMC4wICYmIGNvLnggPiAwLjAgJiYgY28ueCAvIGNvLncgPCAxLjAgJiYgY28ueSA+IDAuMCAmJiBjby55IC8gY28udyA8IDEuMCkKCQkJcmVzdWx0ID0gdGV4dHVyZTJEUHJvaihzaGFkb3dtYXAsIGNvKS54OwoJCWVsc2UKCQkJcmVzdWx0ID0gMS4wOwoJfQp9Cgp2b2lkIHRlc3Rfc2hhZG93YnVmX3ZzbSgKICAgICAgICB2ZWMzIHJjbywgc2FtcGxlcjJEIHNoYWRvd21hcCwgbWF0NCBzaGFkb3dwZXJzbWF0LCBmbG9hdCBzaGFkb3diaWFzLCBmbG9hdCBibGVlZGJpYXMsIGZsb2F0IGlucCwKICAgICAgICBvdXQgZmxvYXQgcmVzdWx0KQp7CglpZiAoaW5wIDw9IDAuMCkgewoJCXJlc3VsdCA9IDAuMDsKCX0KCWVsc2UgewoJCXZlYzQgY28gPSBzaGFkb3dwZXJzbWF0ICogdmVjNChyY28sIDEuMCk7CgkJaWYgKGNvLncgPiAwLjAgJiYgY28ueCA+IDAuMCAmJiBjby54IC8gY28udyA8IDEuMCAmJiBjby55ID4gMC4wICYmIGNvLnkgLyBjby53IDwgMS4wKSB7CgkJCXZlYzIgbW9tZW50cyA9IHRleHR1cmUyRFByb2ooc2hhZG93bWFwLCBjbykucmc7CgkJCWZsb2F0IGRpc3QgPSBjby56IC8gY28udzsKCQkJZmxvYXQgcCA9IDAuMDsKCgkJCWlmIChkaXN0IDw9IG1vbWVudHMueCkKCQkJCXAgPSAxLjA7CgoJCQlmbG9hdCB2YXJpYW5jZSA9IG1vbWVudHMueSAtIChtb21lbnRzLnggKiBtb21lbnRzLngpOwoJCQl2YXJpYW5jZSA9IG1heCh2YXJpYW5jZSwgc2hhZG93YmlhcyAvIDEwLjApOwoKCQkJZmxvYXQgZCA9IG1vbWVudHMueCAtIGRpc3Q7CgkJCWZsb2F0IHBfbWF4ID0gdmFyaWFuY2UgLyAodmFyaWFuY2UgKyBkICogZCk7CgoJCQkvLyBOb3cgcmVkdWNlIGxpZ2h0LWJsZWVkaW5nIGJ5IHJlbW92aW5nIHRoZSBbMCwgeF0gdGFpbCBhbmQgbGluZWFybHkgcmVzY2FsaW5nICh4LCAxXQoJCQlwX21heCA9IGNsYW1wKChwX21heCAtIGJsZWVkYmlhcykgLyAoMS4wIC0gYmxlZWRiaWFzKSwgMC4wLCAxLjApOwoKCQkJcmVzdWx0ID0gbWF4KHAsIHBfbWF4KTsKCQl9CgkJZWxzZSB7CgkJCXJlc3VsdCA9IDEuMDsKCQl9Cgl9Cn0KCnZvaWQgc2hhZG93c19vbmx5KAogICAgICAgIHZlYzMgcmNvLCBzYW1wbGVyMkQgc2hhZG93bWFwLCBtYXQ0IHNoYWRvd3BlcnNtYXQsCiAgICAgICAgZmxvYXQgc2hhZG93YmlhcywgdmVjMyBzaGFkb3djb2xvciwgZmxvYXQgaW5wLAogICAgICAgIG91dCB2ZWMzIHJlc3VsdCkKewoJcmVzdWx0ID0gdmVjMygxLjApOwoKCWlmIChpbnAgPiAwLjApIHsKCQlmbG9hdCBzaGFkZmFjOwoKCQl0ZXN0X3NoYWRvd2J1ZihyY28sIHNoYWRvd21hcCwgc2hhZG93cGVyc21hdCwgc2hhZG93YmlhcywgaW5wLCBzaGFkZmFjKTsKCQlyZXN1bHQgLT0gKDEuMCAtIHNoYWRmYWMpICogKHZlYzMoMS4wKSAtIHNoYWRvd2NvbG9yKTsKCX0KfQoKdm9pZCBzaGFkb3dzX29ubHlfdnNtKAogICAgICAgIHZlYzMgcmNvLCBzYW1wbGVyMkQgc2hhZG93bWFwLCBtYXQ0IHNoYWRvd3BlcnNtYXQsCiAgICAgICAgZmxvYXQgc2hhZG93YmlhcywgZmxvYXQgYmxlZWRiaWFzLCB2ZWMzIHNoYWRvd2NvbG9yLCBmbG9hdCBpbnAsCiAgICAgICAgb3V0IHZlYzMgcmVzdWx0KQp7CglyZXN1bHQgPSB2ZWMzKDEuMCk7CgoJaWYgKGlucCA+IDAuMCkgewoJCWZsb2F0IHNoYWRmYWM7CgoJCXRlc3Rfc2hhZG93YnVmX3ZzbShyY28sIHNoYWRvd21hcCwgc2hhZG93cGVyc21hdCwgc2hhZG93YmlhcywgYmxlZWRiaWFzLCBpbnAsIHNoYWRmYWMpOwoJCXJlc3VsdCAtPSAoMS4wIC0gc2hhZGZhYykgKiAodmVjMygxLjApIC0gc2hhZG93Y29sb3IpOwoJfQp9Cgp2b2lkIHNoYWRlX2xpZ2h0X3RleHR1cmUodmVjMyByY28sIHNhbXBsZXIyRCBjb29raWUsIG1hdDQgc2hhZG93cGVyc21hdCwgb3V0IHZlYzQgcmVzdWx0KQp7CgoJdmVjNCBjbyA9IHNoYWRvd3BlcnNtYXQgKiB2ZWM0KHJjbywgMS4wKTsKCglyZXN1bHQgPSB0ZXh0dXJlMkRQcm9qKGNvb2tpZSwgY28pOwp9Cgp2b2lkIHNoYWRlX2V4cG9zdXJlX2NvcnJlY3QodmVjMyBjb2wsIGZsb2F0IGxpbmZhYywgZmxvYXQgbG9nZmFjLCBvdXQgdmVjMyBvdXRjb2wpCnsKCW91dGNvbCA9IGxpbmZhYyAqICgxLjAgLSBleHAoY29sICogbG9nZmFjKSk7Cn0KCnZvaWQgc2hhZGVfbWlzdF9mYWN0b3IoCiAgICAgICAgdmVjMyBjbywgZmxvYXQgZW5hYmxlLCBmbG9hdCBtaXN0c3RhLCBmbG9hdCBtaXN0ZGlzdCwgZmxvYXQgbWlzdHR5cGUsIGZsb2F0IG1pc2ksCiAgICAgICAgb3V0IGZsb2F0IG91dGZhYykKewoJaWYgKGVuYWJsZSA9PSAxLjApIHsKCQlmbG9hdCBmYWMsIHpjb3I7CgoJCXpjb3IgPSAoYmxfUHJvamVjdGlvbk1hdHJpeFszXVszXSA9PSAwLjApID8gbGVuZ3RoKGNvKSA6IC1jb1syXTsKCgkJZmFjID0gY2xhbXAoKHpjb3IgLSBtaXN0c3RhKSAvIG1pc3RkaXN0LCAwLjAsIDEuMCk7CgkJaWYgKG1pc3R0eXBlID09IDAuMCkgZmFjICo9IGZhYzsKCQllbHNlIGlmIChtaXN0dHlwZSA9PSAxLjApIDsKCQllbHNlIGZhYyA9IHNxcnQoZmFjKTsKCgkJb3V0ZmFjID0gMS4wIC0gKDEuMCAtIGZhYykgKiAoMS4wIC0gbWlzaSk7Cgl9CgllbHNlIHsKCQlvdXRmYWMgPSAwLjA7Cgl9Cn0KCnZvaWQgc2hhZGVfd29ybGRfbWl4KHZlYzMgaG9yLCB2ZWM0IGNvbCwgb3V0IHZlYzQgb3V0Y29sKQp7CglmbG9hdCBmYWMgPSBjbGFtcChjb2wuYSwgMC4wLCAxLjApOwoJb3V0Y29sID0gdmVjNChtaXgoaG9yLCBjb2wucmdiLCBmYWMpLCBjb2wuYSk7Cn0KCnZvaWQgc2hhZGVfYWxwaGFfb3BhcXVlKHZlYzQgY29sLCBvdXQgdmVjNCBvdXRjb2wpCnsKCW91dGNvbCA9IHZlYzQoY29sLnJnYiwgMS4wKTsKfQoKdm9pZCBzaGFkZV9hbHBoYV9vYmNvbG9yKHZlYzQgY29sLCB2ZWM0IG9iY29sLCBvdXQgdmVjNCBvdXRjb2wpCnsKCW91dGNvbCA9IHZlYzQoY29sLnJnYiwgY29sLmEgKiBvYmNvbC5hKTsKfQoKLyoqKioqKioqKioqIE5FVyBTSEFERVIgVVRJTElUSUVTICoqKioqKioqKioqKioqLwoKZmxvYXQgZnJlc25lbF9kaWVsZWN0cmljKHZlYzMgSW5jb21pbmcsIHZlYzMgTm9ybWFsLCBmbG9hdCBldGEpCnsKCS8qIGNvbXB1dGUgZnJlc25lbCByZWZsZWN0YW5jZSB3aXRob3V0IGV4cGxpY2l0bHkgY29tcHV0aW5nCgkgKiB0aGUgcmVmcmFjdGVkIGRpcmVjdGlvbiAqLwoJZmxvYXQgYyA9IGFicyhkb3QoSW5jb21pbmcsIE5vcm1hbCkpOwoJZmxvYXQgZyA9IGV0YSAqIGV0YSAtIDEuMCArIGMgKiBjOwoJZmxvYXQgcmVzdWx0OwoKCWlmIChnID4gMC4wKSB7CgkJZyA9IHNxcnQoZyk7CgkJZmxvYXQgQSA9IChnIC0gYykgLyAoZyArIGMpOwoJCWZsb2F0IEIgPSAoYyAqIChnICsgYykgLSAxLjApIC8gKGMgKiAoZyAtIGMpICsgMS4wKTsKCQlyZXN1bHQgPSAwLjUgKiBBICogQSAqICgxLjAgKyBCICogQik7Cgl9CgllbHNlIHsKCQlyZXN1bHQgPSAxLjA7ICAvKiBUSVIgKG5vIHJlZnJhY3RlZCBjb21wb25lbnQpICovCgl9CgoJcmV0dXJuIHJlc3VsdDsKfQoKZmxvYXQgaHlwb3QoZmxvYXQgeCwgZmxvYXQgeSkKewoJcmV0dXJuIHNxcnQoeCAqIHggKyB5ICogeSk7Cn0KCnZvaWQgZ2VuZXJhdGVkX2Zyb21fb3Jjbyh2ZWMzIG9yY28sIG91dCB2ZWMzIGdlbmVyYXRlZCkKewoJZ2VuZXJhdGVkID0gb3JjbyAqIDAuNSArIHZlYzMoMC41KTsKfQoKaW50IGZsb29yX3RvX2ludChmbG9hdCB4KQp7CglyZXR1cm4gaW50KGZsb29yKHgpKTsKfQoKaW50IHF1aWNrX2Zsb29yKGZsb2F0IHgpCnsKCXJldHVybiBpbnQoeCkgLSAoKHggPCAwKSA/IDEgOiAwKTsKfQoKI2lmZGVmIEJJVF9PUEVSQVRJT05TCmZsb2F0IGludGVnZXJfbm9pc2UoaW50IG4pCnsKCWludCBubjsKCW4gPSAobiArIDEwMTMpICYgMHg3ZmZmZmZmZjsKCW4gPSAobiA+PiAxMykgXiBuOwoJbm4gPSAobiAqIChuICogbiAqIDYwNDkzICsgMTk5OTAzMDMpICsgMTM3NjMxMjU4OSkgJiAweDdmZmZmZmZmOwoJcmV0dXJuIDAuNSAqIChmbG9hdChubikgLyAxMDczNzQxODI0LjApOwp9Cgp1aW50IGhhc2godWludCBreCwgdWludCBreSwgdWludCBreikKewojZGVmaW5lIHJvdCh4LCBrKSAoKCh4KSA8PCAoaykpIHwgKCh4KSA+PiAoMzIgLSAoaykpKSkKI2RlZmluZSBmaW5hbChhLCBiLCBjKSBcCnsgXAoJYyBePSBiOyBjIC09IHJvdChiLCAxNCk7IFwKCWEgXj0gYzsgYSAtPSByb3QoYywgMTEpOyBcCgliIF49IGE7IGIgLT0gcm90KGEsIDI1KTsgXAoJYyBePSBiOyBjIC09IHJvdChiLCAxNik7IFwKCWEgXj0gYzsgYSAtPSByb3QoYywgNCk7ICBcCgliIF49IGE7IGIgLT0gcm90KGEsIDE0KTsgXAoJYyBePSBiOyBjIC09IHJvdChiLCAyNCk7IFwKfQoJLy8gbm93IGhhc2ggdGhlIGRhdGEhCgl1aW50IGEsIGIsIGMsIGxlbiA9IDN1OwoJYSA9IGIgPSBjID0gMHhkZWFkYmVlZnUgKyAobGVuIDw8IDJ1KSArIDEzdTsKCgljICs9IGt6OwoJYiArPSBreTsKCWEgKz0ga3g7CglmaW5hbCAoYSwgYiwgYyk7CgoJcmV0dXJuIGM7CiN1bmRlZiByb3QKI3VuZGVmIGZpbmFsCn0KCnVpbnQgaGFzaChpbnQga3gsIGludCBreSwgaW50IGt6KQp7CglyZXR1cm4gaGFzaCh1aW50KGt4KSwgdWludChreSksIHVpbnQoa3opKTsKfQoKZmxvYXQgYml0c190b18wMSh1aW50IGJpdHMpCnsKCWZsb2F0IHggPSBmbG9hdChiaXRzKSAqICgxLjAgLyBmbG9hdCgweGZmZmZmZmZmdSkpOwoJcmV0dXJuIHg7Cn0KCmZsb2F0IGNlbGxub2lzZSh2ZWMzIHApCnsKCWludCBpeCA9IHF1aWNrX2Zsb29yKHAueCk7CglpbnQgaXkgPSBxdWlja19mbG9vcihwLnkpOwoJaW50IGl6ID0gcXVpY2tfZmxvb3IocC56KTsKCglyZXR1cm4gYml0c190b18wMShoYXNoKHVpbnQoaXgpLCB1aW50KGl5KSwgdWludChpeikpKTsKfQoKdmVjMyBjZWxsbm9pc2VfY29sb3IodmVjMyBwKQp7CglmbG9hdCByID0gY2VsbG5vaXNlKHApOwoJZmxvYXQgZyA9IGNlbGxub2lzZSh2ZWMzKHAueSwgcC54LCBwLnopKTsKCWZsb2F0IGIgPSBjZWxsbm9pc2UodmVjMyhwLnksIHAueiwgcC54KSk7CgoJcmV0dXJuIHZlYzMociwgZywgYik7Cn0KI2VuZGlmICAvLyBCSVRfT1BFUkFUSU9OUwoKZmxvYXQgZmxvb3JmcmFjKGZsb2F0IHgsIG91dCBpbnQgaSkKewoJaSA9IGZsb29yX3RvX2ludCh4KTsKCXJldHVybiB4IC0gaTsKfQoKLyoqKioqKioqKioqIE5FVyBTSEFERVIgTk9ERVMgKioqKioqKioqKioqKioqLwoKI2RlZmluZSBOVU1fTElHSFRTIDMKCi8qIGJzZGZzICovCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKdm9pZCBub2RlX2FtYmllbnRfb2NjbHVzaW9uKHZlYzQgY29sb3IsIG91dCB2ZWM0IHJlc3VsdCkKewoJcmVzdWx0ID0gY29sb3I7Cn0KCi8qIGVtaXNzaW9uICovCgp2b2lkIG5vZGVfZW1pc3Npb24odmVjNCBjb2xvciwgZmxvYXQgc3RyZW5ndGgsIHZlYzMgTiwgb3V0IHZlYzQgcmVzdWx0KQp7CglyZXN1bHQgPSBjb2xvciAqIHN0cmVuZ3RoOwp9CgovKiBiYWNrZ3JvdW5kICovCgp2b2lkIGJhY2tncm91bmRfdHJhbnNmb3JtX3RvX3dvcmxkKHZlYzMgdmlld3ZlYywgb3V0IHZlYzMgd29ybGR2ZWMpCnsKCXZlYzQgdiA9IChibF9Qcm9qZWN0aW9uTWF0cml4WzNdWzNdID09IDAuMCkgPyB2ZWM0KHZpZXd2ZWMsIDEuMCkgOiB2ZWM0KDAuMCwgMC4wLCAxLjAsIDEuMCk7Cgl2ZWM0IGNvX2hvbW9nZW5vdXMgPSAoYmxfUHJvamVjdGlvbk1hdHJpeEludmVyc2UgKiB2KTsKCgl2ZWM0IGNvID0gdmVjNChjb19ob21vZ2Vub3VzLnh5eiAvIGNvX2hvbW9nZW5vdXMudywgMC4wKTsKCXdvcmxkdmVjID0gKGJsX01vZGVsVmlld01hdHJpeEludmVyc2UgKiBjbykueHl6Owp9Cgp2b2lkIG5vZGVfYmFja2dyb3VuZCh2ZWM0IGNvbG9yLCBmbG9hdCBzdHJlbmd0aCwgdmVjMyBOLCBvdXQgdmVjNCByZXN1bHQpCnsKCXJlc3VsdCA9IGNvbG9yICogc3RyZW5ndGg7Cn0KCi8qIGNsb3N1cmVzICovCgp2b2lkIG5vZGVfbWl4X3NoYWRlcihmbG9hdCBmYWMsIHZlYzQgc2hhZGVyMSwgdmVjNCBzaGFkZXIyLCBvdXQgdmVjNCBzaGFkZXIpCnsKCXNoYWRlciA9IG1peChzaGFkZXIxLCBzaGFkZXIyLCBmYWMpOwp9Cgp2b2lkIG5vZGVfYWRkX3NoYWRlcih2ZWM0IHNoYWRlcjEsIHZlYzQgc2hhZGVyMiwgb3V0IHZlYzQgc2hhZGVyKQp7CglzaGFkZXIgPSBzaGFkZXIxICsgc2hhZGVyMjsKfQoKLyogZnJlc25lbCAqLwoKdm9pZCBub2RlX2ZyZXNuZWwoZmxvYXQgaW9yLCB2ZWMzIE4sIHZlYzMgSSwgb3V0IGZsb2F0IHJlc3VsdCkKewoJLyogaGFuZGxlIHBlcnNwZWN0aXZlL29ydGhvZ3JhcGhpYyAqLwoJdmVjMyBJX3ZpZXcgPSAoYmxfUHJvamVjdGlvbk1hdHJpeFszXVszXSA9PSAwLjApID8gbm9ybWFsaXplKEkpIDogdmVjMygwLjAsIDAuMCwgLTEuMCk7CgoJZmxvYXQgZXRhID0gbWF4KGlvciwgMC4wMDAwMSk7CglyZXN1bHQgPSBmcmVzbmVsX2RpZWxlY3RyaWMoSV92aWV3LCBOLCAoZ2xfRnJvbnRGYWNpbmcpID8gZXRhIDogMS4wIC8gZXRhKTsKfQoKLyogbGF5ZXJfd2VpZ2h0ICovCgp2b2lkIG5vZGVfbGF5ZXJfd2VpZ2h0KGZsb2F0IGJsZW5kLCB2ZWMzIE4sIHZlYzMgSSwgb3V0IGZsb2F0IGZyZXNuZWwsIG91dCBmbG9hdCBmYWNpbmcpCnsKCS8qIGZyZXNuZWwgKi8KCWZsb2F0IGV0YSA9IG1heCgxLjAgLSBibGVuZCwgMC4wMDAwMSk7Cgl2ZWMzIElfdmlldyA9IChibF9Qcm9qZWN0aW9uTWF0cml4WzNdWzNdID09IDAuMCkgPyBub3JtYWxpemUoSSkgOiB2ZWMzKDAuMCwgMC4wLCAtMS4wKTsKCglmcmVzbmVsID0gZnJlc25lbF9kaWVsZWN0cmljKElfdmlldywgTiwgKGdsX0Zyb250RmFjaW5nKSA/IDEuMCAvIGV0YSA6IGV0YSk7CgoJLyogZmFjaW5nICovCglmYWNpbmcgPSBhYnMoZG90KElfdmlldywgTikpOwoJaWYgKGJsZW5kICE9IDAuNSkgewoJCWJsZW5kID0gY2xhbXAoYmxlbmQsIDAuMCwgMC45OTk5OSk7CgkJYmxlbmQgPSAoYmxlbmQgPCAwLjUpID8gMi4wICogYmxlbmQgOiAwLjUgLyAoMS4wIC0gYmxlbmQpOwoJCWZhY2luZyA9IHBvdyhmYWNpbmcsIGJsZW5kKTsKCX0KCWZhY2luZyA9IDEuMCAtIGZhY2luZzsKfQoKLyogZ2FtbWEgKi8KCnZvaWQgbm9kZV9nYW1tYSh2ZWM0IGNvbCwgZmxvYXQgZ2FtbWEsIG91dCB2ZWM0IG91dGNvbCkKewoJb3V0Y29sID0gY29sOwoKCWlmIChjb2wuciA+IDAuMCkKCQlvdXRjb2wuciA9IGNvbXBhdGlibGVfcG93KGNvbC5yLCBnYW1tYSk7CglpZiAoY29sLmcgPiAwLjApCgkJb3V0Y29sLmcgPSBjb21wYXRpYmxlX3Bvdyhjb2wuZywgZ2FtbWEpOwoJaWYgKGNvbC5iID4gMC4wKQoJCW91dGNvbC5iID0gY29tcGF0aWJsZV9wb3coY29sLmIsIGdhbW1hKTsKfQoKLyogZ2VvbWV0cnkgKi8KCnZvaWQgbm9kZV9hdHRyaWJ1dGUodmVjMyBhdHRyLCBvdXQgdmVjNCBvdXRjb2wsIG91dCB2ZWMzIG91dHZlYywgb3V0IGZsb2F0IG91dGYpCnsKCW91dGNvbCA9IHZlYzQoYXR0ciwgMS4wKTsKCW91dHZlYyA9IGF0dHI7CglvdXRmID0gKGF0dHIueCArIGF0dHIueSArIGF0dHIueikgLyAzLjA7Cn0KCnZvaWQgbm9kZV91dm1hcCh2ZWMzIGF0dHJfdXYsIG91dCB2ZWMzIG91dHZlYykKewoJb3V0dmVjID0gYXR0cl91djsKfQoKdm9pZCBub2RlX2dlb21ldHJ5KAogICAgICAgIHZlYzMgSSwgdmVjMyBOLCBtYXQ0IHRvd29ybGQsCiAgICAgICAgb3V0IHZlYzMgcG9zaXRpb24sIG91dCB2ZWMzIG5vcm1hbCwgb3V0IHZlYzMgdGFuZ2VudCwKICAgICAgICBvdXQgdmVjMyB0cnVlX25vcm1hbCwgb3V0IHZlYzMgaW5jb21pbmcsIG91dCB2ZWMzIHBhcmFtZXRyaWMsCiAgICAgICAgb3V0IGZsb2F0IGJhY2tmYWNpbmcsIG91dCBmbG9hdCBwb2ludGluZXNzKQp7Cglwb3NpdGlvbiA9ICh0b3dvcmxkICogdmVjNChJLCAxLjApKS54eXo7Cglub3JtYWwgPSAodG93b3JsZCAqIHZlYzQoTiwgMC4wKSkueHl6OwoJdGFuZ2VudCA9IHZlYzMoMC4wKTsKCXRydWVfbm9ybWFsID0gbm9ybWFsOwoKCS8qIGhhbmRsZSBwZXJzcGVjdGl2ZS9vcnRob2dyYXBoaWMgKi8KCXZlYzMgSV92aWV3ID0gKGJsX1Byb2plY3Rpb25NYXRyaXhbM11bM10gPT0gMC4wKSA/IG5vcm1hbGl6ZShJKSA6IHZlYzMoMC4wLCAwLjAsIC0xLjApOwoJaW5jb21pbmcgPSAtKHRvd29ybGQgKiB2ZWM0KElfdmlldywgMC4wKSkueHl6OwoKCXBhcmFtZXRyaWMgPSB2ZWMzKDAuMCk7CgliYWNrZmFjaW5nID0gKGdsX0Zyb250RmFjaW5nKSA/IDAuMCA6IDEuMDsKCXBvaW50aW5lc3MgPSAwLjU7Cn0KCnZvaWQgbm9kZV90ZXhfY29vcmQoCiAgICAgICAgdmVjMyBJLCB2ZWMzIE4sIG1hdDQgdmlld2ludm1hdCwgbWF0NCBvYmludm1hdCwgdmVjNCBjYW1lcmFmYWMsCiAgICAgICAgdmVjMyBhdHRyX29yY28sIHZlYzMgYXR0cl91diwKICAgICAgICBvdXQgdmVjMyBnZW5lcmF0ZWQsIG91dCB2ZWMzIG5vcm1hbCwgb3V0IHZlYzMgdXYsIG91dCB2ZWMzIG9iamVjdCwKICAgICAgICBvdXQgdmVjMyBjYW1lcmEsIG91dCB2ZWMzIHdpbmRvdywgb3V0IHZlYzMgcmVmbGVjdGlvbikKewoJZ2VuZXJhdGVkID0gYXR0cl9vcmNvICogMC41ICsgdmVjMygwLjUpOwoJbm9ybWFsID0gbm9ybWFsaXplKChvYmludm1hdCAqICh2aWV3aW52bWF0ICogdmVjNChOLCAwLjApKSkueHl6KTsKCXV2ID0gYXR0cl91djsKCW9iamVjdCA9IChvYmludm1hdCAqICh2aWV3aW52bWF0ICogdmVjNChJLCAxLjApKSkueHl6OwoJY2FtZXJhID0gdmVjMyhJLnh5LCAtSS56KTsKCXZlYzQgcHJvanZlYyA9IGJsX1Byb2plY3Rpb25NYXRyaXggKiB2ZWM0KEksIDEuMCk7Cgl3aW5kb3cgPSB2ZWMzKG10ZXhfMmRfbWFwcGluZyhwcm9qdmVjLnh5eiAvIHByb2p2ZWMudykueHkgKiBjYW1lcmFmYWMueHkgKyBjYW1lcmFmYWMuencsIDAuMCk7CgoJdmVjMyBzaGFkZV9JOwoJc2hhZGVfdmlldyhJLCBzaGFkZV9JKTsKCXZlYzMgdmlld19yZWZsZWN0aW9uID0gcmVmbGVjdChzaGFkZV9JLCBub3JtYWxpemUoTikpOwoJcmVmbGVjdGlvbiA9ICh2aWV3aW52bWF0ICogdmVjNCh2aWV3X3JlZmxlY3Rpb24sIDAuMCkpLnh5ejsKfQoKdm9pZCBub2RlX3RleF9jb29yZF9iYWNrZ3JvdW5kKAogICAgICAgIHZlYzMgSSwgdmVjMyBOLCBtYXQ0IHZpZXdpbnZtYXQsIG1hdDQgb2JpbnZtYXQsIHZlYzQgY2FtZXJhZmFjLAogICAgICAgIHZlYzMgYXR0cl9vcmNvLCB2ZWMzIGF0dHJfdXYsCiAgICAgICAgb3V0IHZlYzMgZ2VuZXJhdGVkLCBvdXQgdmVjMyBub3JtYWwsIG91dCB2ZWMzIHV2LCBvdXQgdmVjMyBvYmplY3QsCiAgICAgICAgb3V0IHZlYzMgY2FtZXJhLCBvdXQgdmVjMyB3aW5kb3csIG91dCB2ZWMzIHJlZmxlY3Rpb24pCnsKCXZlYzQgdiA9IChibF9Qcm9qZWN0aW9uTWF0cml4WzNdWzNdID09IDAuMCkgPyB2ZWM0KEksIDEuMCkgOiB2ZWM0KDAuMCwgMC4wLCAxLjAsIDEuMCk7Cgl2ZWM0IGNvX2hvbW9nZW5vdXMgPSAoYmxfUHJvamVjdGlvbk1hdHJpeEludmVyc2UgKiB2KTsKCgl2ZWM0IGNvID0gdmVjNChjb19ob21vZ2Vub3VzLnh5eiAvIGNvX2hvbW9nZW5vdXMudywgMC4wKTsKCgljbyA9IG5vcm1hbGl6ZShjbyk7Cgl2ZWMzIGNvb3JkcyA9IChibF9Nb2RlbFZpZXdNYXRyaXhJbnZlcnNlICogY28pLnh5ejsKCglnZW5lcmF0ZWQgPSBjb29yZHM7Cglub3JtYWwgPSAtY29vcmRzOwoJdXYgPSB2ZWMzKGF0dHJfdXYueHksIDAuMCk7CglvYmplY3QgPSBjb29yZHM7CgoJY2FtZXJhID0gdmVjMyhjby54eSwgLWNvLnopOwoJd2luZG93ID0gKGJsX1Byb2plY3Rpb25NYXRyaXhbM11bM10gPT0gMC4wKSA/CgkgICAgICAgICB2ZWMzKG10ZXhfMmRfbWFwcGluZyhJKS54eSAqIGNhbWVyYWZhYy54eSArIGNhbWVyYWZhYy56dywgMC4wKSA6CgkgICAgICAgICB2ZWMzKHZlYzIoMC41KSAqIGNhbWVyYWZhYy54eSArIGNhbWVyYWZhYy56dywgMC4wKTsKCglyZWZsZWN0aW9uID0gLWNvb3JkczsKfQoKLyogdGV4dHVyZXMgKi8KCmZsb2F0IGNhbGNfZ3JhZGllbnQodmVjMyBwLCBpbnQgZ3JhZGllbnRfdHlwZSkKewoJZmxvYXQgeCwgeSwgejsKCXggPSBwLng7Cgl5ID0gcC55OwoJeiA9IHAuejsKCWlmIChncmFkaWVudF90eXBlID09IDApIHsgIC8qIGxpbmVhciAqLwoJCXJldHVybiB4OwoJfQoJZWxzZSBpZiAoZ3JhZGllbnRfdHlwZSA9PSAxKSB7ICAvKiBxdWFkcmF0aWMgKi8KCQlmbG9hdCByID0gbWF4KHgsIDAuMCk7CgkJcmV0dXJuIHIgKiByOwoJfQoJZWxzZSBpZiAoZ3JhZGllbnRfdHlwZSA9PSAyKSB7ICAvKiBlYXNpbmcgKi8KCQlmbG9hdCByID0gbWluKG1heCh4LCAwLjApLCAxLjApOwoJCWZsb2F0IHQgPSByICogcjsKCQlyZXR1cm4gKDMuMCAqIHQgLSAyLjAgKiB0ICogcik7Cgl9CgllbHNlIGlmIChncmFkaWVudF90eXBlID09IDMpIHsgIC8qIGRpYWdvbmFsICovCgkJcmV0dXJuICh4ICsgeSkgKiAwLjU7Cgl9CgllbHNlIGlmIChncmFkaWVudF90eXBlID09IDQpIHsgIC8qIHJhZGlhbCAqLwoJCXJldHVybiBhdGFuKHksIHgpIC8gKE1fUEkgKiAyKSArIDAuNTsKCX0KCWVsc2UgewoJCWZsb2F0IHIgPSBtYXgoMS4wIC0gc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopLCAwLjApOwoJCWlmIChncmFkaWVudF90eXBlID09IDUpIHsgIC8qIHF1YWRyYXRpYyBzcGhlcmUgKi8KCQkJcmV0dXJuIHIgKiByOwoJCX0KCQllbHNlIGlmIChncmFkaWVudF90eXBlID09IDYpIHsgIC8qIHNwaGVyZSAqLwoJCQlyZXR1cm4gcjsKCQl9Cgl9CglyZXR1cm4gMC4wOwp9Cgp2b2lkIG5vZGVfdGV4X2dyYWRpZW50KHZlYzMgY28sIGZsb2F0IGdyYWRpZW50X3R5cGUsIG91dCB2ZWM0IGNvbG9yLCBvdXQgZmxvYXQgZmFjKQp7CglmbG9hdCBmID0gY2FsY19ncmFkaWVudChjbywgaW50KGdyYWRpZW50X3R5cGUpKTsKCWYgPSBjbGFtcChmLCAwLjAsIDEuMCk7CgoJY29sb3IgPSB2ZWM0KGYsIGYsIGYsIDEuMCk7CglmYWMgPSBmOwp9Cgp2b2lkIG5vZGVfdGV4X2NoZWNrZXIodmVjMyBjbywgdmVjNCBjb2xvcjEsIHZlYzQgY29sb3IyLCBmbG9hdCBzY2FsZSwgb3V0IHZlYzQgY29sb3IsIG91dCBmbG9hdCBmYWMpCnsKCXZlYzMgcCA9IGNvICogc2NhbGU7CgoJLyogUHJldmVudCBwcmVjaXNpb24gaXNzdWVzIG9uIHVuaXQgY29vcmRpbmF0ZXMuICovCglwLnggPSAocC54ICsgMC4wMDAwMDEpICogMC45OTk5OTk7CglwLnkgPSAocC55ICsgMC4wMDAwMDEpICogMC45OTk5OTk7CglwLnogPSAocC56ICsgMC4wMDAwMDEpICogMC45OTk5OTk7CgoJaW50IHhpID0gaW50KGFicyhmbG9vcihwLngpKSk7CglpbnQgeWkgPSBpbnQoYWJzKGZsb29yKHAueSkpKTsKCWludCB6aSA9IGludChhYnMoZmxvb3IocC56KSkpOwoKCWJvb2wgY2hlY2sgPSAoKG1vZCh4aSwgMikgPT0gbW9kKHlpLCAyKSkgPT0gYm9vbChtb2QoemksIDIpKSk7CgoJY29sb3IgPSBjaGVjayA/IGNvbG9yMSA6IGNvbG9yMjsKCWZhYyA9IGNoZWNrID8gMS4wIDogMC4wOwp9CgojaWZkZWYgQklUX09QRVJBVElPTlMKdmVjMiBjYWxjX2JyaWNrX3RleHR1cmUodmVjMyBwLCBmbG9hdCBtb3J0YXJfc2l6ZSwgZmxvYXQgbW9ydGFyX3Ntb290aCwgZmxvYXQgYmlhcywKICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgYnJpY2tfd2lkdGgsIGZsb2F0IHJvd19oZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IG9mZnNldF9hbW91bnQsIGludCBvZmZzZXRfZnJlcXVlbmN5LAogICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBzcXVhc2hfYW1vdW50LCBpbnQgc3F1YXNoX2ZyZXF1ZW5jeSkKewoJaW50IGJyaWNrbnVtLCByb3dudW07CglmbG9hdCBvZmZzZXQgPSAwLjA7CglmbG9hdCB4LCB5OwoKCXJvd251bSA9IGZsb29yX3RvX2ludChwLnkgLyByb3dfaGVpZ2h0KTsKCglpZiAob2Zmc2V0X2ZyZXF1ZW5jeSAhPSAwICYmIHNxdWFzaF9mcmVxdWVuY3kgIT0gMCkgewoJCWJyaWNrX3dpZHRoICo9IChyb3dudW0gJSBzcXVhc2hfZnJlcXVlbmN5ICE9IDApID8gMS4wIDogc3F1YXNoX2Ftb3VudDsgLyogc3F1YXNoICovCgkJb2Zmc2V0ID0gKHJvd251bSAlIG9mZnNldF9mcmVxdWVuY3kgIT0gMCkgPyAwLjAgOiAoYnJpY2tfd2lkdGggKiBvZmZzZXRfYW1vdW50KTsgLyogb2Zmc2V0ICovCgl9CgoJYnJpY2tudW0gPSBmbG9vcl90b19pbnQoKHAueCArIG9mZnNldCkgLyBicmlja193aWR0aCk7CgoJeCA9IChwLnggKyBvZmZzZXQpIC0gYnJpY2tfd2lkdGggKiBicmlja251bTsKCXkgPSBwLnkgLSByb3dfaGVpZ2h0ICogcm93bnVtOwoKCWZsb2F0IHRpbnQgPSBjbGFtcCgoaW50ZWdlcl9ub2lzZSgocm93bnVtIDw8IDE2KSArIChicmlja251bSAmIDB4RkZGRikpICsgYmlhcyksIDAuMCwgMS4wKTsKCglmbG9hdCBtaW5fZGlzdCA9IG1pbihtaW4oeCwgeSksIG1pbihicmlja193aWR0aCAtIHgsIHJvd19oZWlnaHQgLSB5KSk7CglpZihtaW5fZGlzdCA+PSBtb3J0YXJfc2l6ZSkgewoJCXJldHVybiB2ZWMyKHRpbnQsIDAuMCk7Cgl9CgllbHNlIGlmKG1vcnRhcl9zbW9vdGggPT0gMC4wKSB7CgkJcmV0dXJuIHZlYzIodGludCwgMS4wKTsKCX0KCWVsc2UgewoJCW1pbl9kaXN0ID0gMS4wIC0gbWluX2Rpc3QvbW9ydGFyX3NpemU7CgkJcmV0dXJuIHZlYzIodGludCwgc21vb3Roc3RlcCgwLjAsIG1vcnRhcl9zbW9vdGgsIG1pbl9kaXN0KSk7Cgl9Cn0KI2VuZGlmCgp2b2lkIG5vZGVfdGV4X2JyaWNrKHZlYzMgY28sCiAgICAgICAgICAgICAgICAgICAgdmVjNCBjb2xvcjEsIHZlYzQgY29sb3IyLAogICAgICAgICAgICAgICAgICAgIHZlYzQgbW9ydGFyLCBmbG9hdCBzY2FsZSwKICAgICAgICAgICAgICAgICAgICBmbG9hdCBtb3J0YXJfc2l6ZSwgZmxvYXQgbW9ydGFyX3Ntb290aCwgZmxvYXQgYmlhcywKICAgICAgICAgICAgICAgICAgICBmbG9hdCBicmlja193aWR0aCwgZmxvYXQgcm93X2hlaWdodCwKICAgICAgICAgICAgICAgICAgICBmbG9hdCBvZmZzZXRfYW1vdW50LCBmbG9hdCBvZmZzZXRfZnJlcXVlbmN5LAogICAgICAgICAgICAgICAgICAgIGZsb2F0IHNxdWFzaF9hbW91bnQsIGZsb2F0IHNxdWFzaF9mcmVxdWVuY3ksCiAgICAgICAgICAgICAgICAgICAgb3V0IHZlYzQgY29sb3IsIG91dCBmbG9hdCBmYWMpCnsKI2lmZGVmIEJJVF9PUEVSQVRJT05TCgl2ZWMyIGYyID0gY2FsY19icmlja190ZXh0dXJlKGNvICogc2NhbGUsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcnRhcl9zaXplLCBtb3J0YXJfc21vb3RoLCBiaWFzLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlja193aWR0aCwgcm93X2hlaWdodCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0X2Ftb3VudCwgaW50KG9mZnNldF9mcmVxdWVuY3kpLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhc2hfYW1vdW50LCBpbnQoc3F1YXNoX2ZyZXF1ZW5jeSkpOwoJZmxvYXQgdGludCA9IGYyLng7CglmbG9hdCBmID0gZjIueTsKCWlmIChmICE9IDEuMCkgewoJCWZsb2F0IGZhY20gPSAxLjAgLSB0aW50OwoJCWNvbG9yMSA9IGZhY20gKiBjb2xvcjEgKyB0aW50ICogY29sb3IyOwoJfQoJY29sb3IgPSBtaXgoY29sb3IxLCBtb3J0YXIsIGYpOwoJZmFjID0gZjsKI2Vsc2UKCWNvbG9yID0gdmVjNCgxLjApOwoJZmFjID0gMS4wOwojZW5kaWYKfQoKdm9pZCBub2RlX3RleF9jbG91ZHModmVjMyBjbywgZmxvYXQgc2l6ZSwgb3V0IHZlYzQgY29sb3IsIG91dCBmbG9hdCBmYWMpCnsKCWNvbG9yID0gdmVjNCgxLjApOwoJZmFjID0gMS4wOwp9Cgp2b2lkIG5vZGVfdGV4X2Vudmlyb25tZW50X2VxdWlyZWN0YW5ndWxhcih2ZWMzIGNvLCBzYW1wbGVyMkQgaW1hLCBvdXQgdmVjNCBjb2xvcikKewoJdmVjMyBuY28gPSBub3JtYWxpemUoY28pOwoJZmxvYXQgdSA9IC1hdGFuKG5jby55LCBuY28ueCkgLyAoMi4wICogTV9QSSkgKyAwLjU7CglmbG9hdCB2ID0gYXRhbihuY28ueiwgaHlwb3QobmNvLngsIG5jby55KSkgLyBNX1BJICsgMC41OwoKCWNvbG9yID0gdGV4dHVyZTJEKGltYSwgdmVjMih1LCB2KSk7Cn0KCnZvaWQgbm9kZV90ZXhfZW52aXJvbm1lbnRfbWlycm9yX2JhbGwodmVjMyBjbywgc2FtcGxlcjJEIGltYSwgb3V0IHZlYzQgY29sb3IpCnsKCXZlYzMgbmNvID0gbm9ybWFsaXplKGNvKTsKCgluY28ueSAtPSAxLjA7CgoJZmxvYXQgZGl2ID0gMi4wICogc3FydChtYXgoLTAuNSAqIG5jby55LCAwLjApKTsKCWlmIChkaXYgPiAwLjApCgkJbmNvIC89IGRpdjsKCglmbG9hdCB1ID0gMC41ICogKG5jby54ICsgMS4wKTsKCWZsb2F0IHYgPSAwLjUgKiAobmNvLnogKyAxLjApOwoKCWNvbG9yID0gdGV4dHVyZTJEKGltYSwgdmVjMih1LCB2KSk7Cn0KCnZvaWQgbm9kZV90ZXhfZW52aXJvbm1lbnRfZW1wdHkodmVjMyBjbywgb3V0IHZlYzQgY29sb3IpCnsKCWNvbG9yID0gdmVjNCgxLjAsIDAuMCwgMS4wLCAxLjApOwp9Cgp2b2lkIG5vZGVfdGV4X2ltYWdlKHZlYzMgY28sIHNhbXBsZXIyRCBpbWEsIG91dCB2ZWM0IGNvbG9yLCBvdXQgZmxvYXQgYWxwaGEpCnsKCWNvbG9yID0gdGV4dHVyZTJEKGltYSwgY28ueHkpOwoJYWxwaGEgPSBjb2xvci5hOwp9Cgp2b2lkIG5vZGVfdGV4X2ltYWdlX2JveCh2ZWMzIHRleGNvLAogICAgICAgICAgICAgICAgICAgICAgICB2ZWMzIG5vYiwKICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlcjJEIGltYSwKICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgYmxlbmQsCiAgICAgICAgICAgICAgICAgICAgICAgIG91dCB2ZWM0IGNvbG9yLAogICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgYWxwaGEpCnsKCS8qIHByb2plY3QgZnJvbSBkaXJlY3Rpb24gdmVjdG9yIHRvIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIHZhcnlpbmcgdHJpYW5nbGVzICovCglub2IgPSB2ZWMzKGFicyhub2IueCksIGFicyhub2IueSksIGFicyhub2IueikpOwoJbm9iIC89IChub2IueCArIG5vYi55ICsgbm9iLnopOwoKCS8qIGJhc2ljIGlkZWEgaXMgdG8gdGhpbmsgb2YgdGhpcyBhcyBhIHRyaWFuZ2xlLCBlYWNoIGNvcm5lciByZXByZXNlbnRpbmcKCSAqIG9uZSBvZiB0aGUgMyBmYWNlcyBvZiB0aGUgY3ViZS4gdmFyeWluZyB0aGUgY29ybmVycyB3ZSBoYXZlIHNpbmdsZSB0ZXh0dXJlcywKCSAqIHZhcnlpbmcgYmV0d2VlbiB3ZSBibGVuZCBiZXR3ZWVuIHR3byB0ZXh0dXJlcywgYW5kIHZhcnlpbmcgdGhlIG1pZGRsZSB3ZSBhIGJsZW5kCgkgKiBiZXR3ZWVuIHRocmVlIHRleHR1cmVzLgoJICoKCSAqIHRoZSBOeHl6IHZhbHVlcyBhcmUgdGhlIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIHZhcnlpbmcgYW4gZXF1aWxhdGVyYWwKCSAqIHRyaWFuZ2xlLCB3aGljaCB2YXJ5aW5nIGNhc2Ugb2YgYmxlbmRpbmcsIHZhcnlpbmcgdGhlIG1pZGRsZSBoYXMgYSBzbWFsbGVyCgkgKiBlcXVpbGF0ZXJhbCB0cmlhbmdsZSB3aGVyZSAzIHRleHR1cmVzIGJsZW5kLiB0aGlzIGRpdmlkZXMgdGhpbmdzIGludG8KCSAqIDcgem9uZXMsIHdpdGggYW4gaWYgKCkgdGVzdCBmb3IgZWFjaCB6b25lICovCgoJdmVjMyB3ZWlnaHQgPSB2ZWMzKDAuMCwgMC4wLCAwLjApOwoJZmxvYXQgbGltaXQgPSAwLjUgKiAoMS4wICsgYmxlbmQpOwoKCS8qIGZpcnN0IHRlc3QgZm9yIGNvcm5lcnMgd2l0aCBzaW5nbGUgdGV4dHVyZSAqLwoJaWYgKG5vYi54ID4gbGltaXQgKiAobm9iLnggKyBub2IueSkgJiYgbm9iLnggPiBsaW1pdCAqIChub2IueCArIG5vYi56KSkgewoJCXdlaWdodC54ID0gMS4wOwoJfQoJZWxzZSBpZiAobm9iLnkgPiBsaW1pdCAqIChub2IueCArIG5vYi55KSAmJiBub2IueSA+IGxpbWl0ICogKG5vYi55ICsgbm9iLnopKSB7CgkJd2VpZ2h0LnkgPSAxLjA7Cgl9CgllbHNlIGlmIChub2IueiA+IGxpbWl0ICogKG5vYi54ICsgbm9iLnopICYmIG5vYi56ID4gbGltaXQgKiAobm9iLnkgKyBub2IueikpIHsKCQl3ZWlnaHQueiA9IDEuMDsKCX0KCWVsc2UgaWYgKGJsZW5kID4gMC4wKSB7CgkJLyogdmFyeWluZyBjYXNlIG9mIGJsZW5kaW5nLCB0ZXN0IGZvciBtaXhlcyBiZXR3ZWVuIHR3byB0ZXh0dXJlcyAqLwoJCWlmIChub2IueiA8ICgxLjAgLSBsaW1pdCkgKiAobm9iLnkgKyBub2IueCkpIHsKCQkJd2VpZ2h0LnggPSBub2IueCAvIChub2IueCArIG5vYi55KTsKCQkJd2VpZ2h0LnggPSBjbGFtcCgod2VpZ2h0LnggLSAwLjUgKiAoMS4wIC0gYmxlbmQpKSAvIGJsZW5kLCAwLjAsIDEuMCk7CgkJCXdlaWdodC55ID0gMS4wIC0gd2VpZ2h0Lng7CgkJfQoJCWVsc2UgaWYgKG5vYi54IDwgKDEuMCAtIGxpbWl0KSAqIChub2IueSArIG5vYi56KSkgewoJCQl3ZWlnaHQueSA9IG5vYi55IC8gKG5vYi55ICsgbm9iLnopOwoJCQl3ZWlnaHQueSA9IGNsYW1wKCh3ZWlnaHQueSAtIDAuNSAqICgxLjAgLSBibGVuZCkpIC8gYmxlbmQsIDAuMCwgMS4wKTsKCQkJd2VpZ2h0LnogPSAxLjAgLSB3ZWlnaHQueTsKCQl9CgkJZWxzZSBpZiAobm9iLnkgPCAoMS4wIC0gbGltaXQpICogKG5vYi54ICsgbm9iLnopKSB7CgkJCXdlaWdodC54ID0gbm9iLnggLyAobm9iLnggKyBub2Iueik7CgkJCXdlaWdodC54ID0gY2xhbXAoKHdlaWdodC54IC0gMC41ICogKDEuMCAtIGJsZW5kKSkgLyBibGVuZCwgMC4wLCAxLjApOwoJCQl3ZWlnaHQueiA9IDEuMCAtIHdlaWdodC54OwoJCX0KCQllbHNlIHsKCQkJLyogbGFzdCBjYXNlLCB3ZSBoYXZlIGEgbWl4IGJldHdlZW4gdGhyZWUgKi8KCQkJd2VpZ2h0LnggPSAoKDIuMCAtIGxpbWl0KSAqIG5vYi54ICsgKGxpbWl0IC0gMS4wKSkgLyAoMi4wICogbGltaXQgLSAxLjApOwoJCQl3ZWlnaHQueSA9ICgoMi4wIC0gbGltaXQpICogbm9iLnkgKyAobGltaXQgLSAxLjApKSAvICgyLjAgKiBsaW1pdCAtIDEuMCk7CgkJCXdlaWdodC56ID0gKCgyLjAgLSBsaW1pdCkgKiBub2IueiArIChsaW1pdCAtIDEuMCkpIC8gKDIuMCAqIGxpbWl0IC0gMS4wKTsKCQl9Cgl9CgllbHNlIHsKCQkvKiBEZXNwZXJhdGUgbW9kZSwgbm8gdmFsaWQgY2hvaWNlIGFueXdheSwgZmFsbGJhY2sgdG8gb25lIHNpZGUuKi8KCQl3ZWlnaHQueCA9IDEuMDsKCX0KCWNvbG9yID0gdmVjNCgwKTsKCWlmICh3ZWlnaHQueCA+IDAuMCkgewoJCWNvbG9yICs9IHdlaWdodC54ICogdGV4dHVyZTJEKGltYSwgdGV4Y28ueXopOwoJfQoJaWYgKHdlaWdodC55ID4gMC4wKSB7CgkJY29sb3IgKz0gd2VpZ2h0LnkgKiB0ZXh0dXJlMkQoaW1hLCB0ZXhjby54eik7Cgl9CglpZiAod2VpZ2h0LnogPiAwLjApIHsKCQljb2xvciArPSB3ZWlnaHQueiAqIHRleHR1cmUyRChpbWEsIHRleGNvLnl4KTsKCX0KCglhbHBoYSA9IGNvbG9yLmE7Cn0KCnZvaWQgbm9kZV90ZXhfaW1hZ2VfZW1wdHkodmVjMyBjbywgb3V0IHZlYzQgY29sb3IsIG91dCBmbG9hdCBhbHBoYSkKewoJY29sb3IgPSB2ZWM0KDAuMCk7CglhbHBoYSA9IDAuMDsKfQoKdm9pZCBub2RlX3RleF9tYWdpYyh2ZWMzIGNvLCBmbG9hdCBzY2FsZSwgZmxvYXQgZGlzdG9ydGlvbiwgZmxvYXQgZGVwdGgsIG91dCB2ZWM0IGNvbG9yLCBvdXQgZmxvYXQgZmFjKQp7Cgl2ZWMzIHAgPSBjbyAqIHNjYWxlOwoJZmxvYXQgeCA9IHNpbigocC54ICsgcC55ICsgcC56KSAqIDUuMCk7CglmbG9hdCB5ID0gY29zKCgtcC54ICsgcC55IC0gcC56KSAqIDUuMCk7CglmbG9hdCB6ID0gLWNvcygoLXAueCAtIHAueSArIHAueikgKiA1LjApOwoKCWlmIChkZXB0aCA+IDApIHsKCQl4ICo9IGRpc3RvcnRpb247CgkJeSAqPSBkaXN0b3J0aW9uOwoJCXogKj0gZGlzdG9ydGlvbjsKCQl5ID0gLWNvcyh4IC0geSArIHopOwoJCXkgKj0gZGlzdG9ydGlvbjsKCQlpZiAoZGVwdGggPiAxKSB7CgkJCXggPSBjb3MoeCAtIHkgLSB6KTsKCQkJeCAqPSBkaXN0b3J0aW9uOwoJCQlpZiAoZGVwdGggPiAyKSB7CgkJCQl6ID0gc2luKC14IC0geSAtIHopOwoJCQkJeiAqPSBkaXN0b3J0aW9uOwoJCQkJaWYgKGRlcHRoID4gMykgewoJCQkJCXggPSAtY29zKC14ICsgeSAtIHopOwoJCQkJCXggKj0gZGlzdG9ydGlvbjsKCQkJCQlpZiAoZGVwdGggPiA0KSB7CgkJCQkJCXkgPSAtc2luKC14ICsgeSArIHopOwoJCQkJCQl5ICo9IGRpc3RvcnRpb247CgkJCQkJCWlmIChkZXB0aCA+IDUpIHsKCQkJCQkJCXkgPSAtY29zKC14ICsgeSArIHopOwoJCQkJCQkJeSAqPSBkaXN0b3J0aW9uOwoJCQkJCQkJaWYgKGRlcHRoID4gNikgewoJCQkJCQkJCXggPSBjb3MoeCArIHkgKyB6KTsKCQkJCQkJCQl4ICo9IGRpc3RvcnRpb247CgkJCQkJCQkJaWYgKGRlcHRoID4gNykgewoJCQkJCQkJCQl6ID0gc2luKHggKyB5IC0geik7CgkJCQkJCQkJCXogKj0gZGlzdG9ydGlvbjsKCQkJCQkJCQkJaWYgKGRlcHRoID4gOCkgewoJCQkJCQkJCQkJeCA9IC1jb3MoLXggLSB5ICsgeik7CgkJCQkJCQkJCQl4ICo9IGRpc3RvcnRpb247CgkJCQkJCQkJCQlpZiAoZGVwdGggPiA5KSB7CgkJCQkJCQkJCQkJeSA9IC1zaW4oeCAtIHkgKyB6KTsKCQkJCQkJCQkJCQl5ICo9IGRpc3RvcnRpb247CgkJCQkJCQkJCQl9CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9Cgl9CglpZiAoZGlzdG9ydGlvbiAhPSAwLjApIHsKCQlkaXN0b3J0aW9uICo9IDIuMDsKCQl4IC89IGRpc3RvcnRpb247CgkJeSAvPSBkaXN0b3J0aW9uOwoJCXogLz0gZGlzdG9ydGlvbjsKCX0KCgljb2xvciA9IHZlYzQoMC41IC0geCwgMC41IC0geSwgMC41IC0geiwgMS4wKTsKCWZhYyA9IChjb2xvci54ICsgY29sb3IueSArIGNvbG9yLnopIC8gMy4wOwp9CgojaWZkZWYgQklUX09QRVJBVElPTlMKZmxvYXQgbm9pc2VfZmFkZShmbG9hdCB0KQp7CglyZXR1cm4gdCAqIHQgKiB0ICogKHQgKiAodCAqIDYuMCAtIDE1LjApICsgMTAuMCk7Cn0KCmZsb2F0IG5vaXNlX3NjYWxlMyhmbG9hdCByZXN1bHQpCnsKCXJldHVybiAwLjk4MjAgKiByZXN1bHQ7Cn0KCmZsb2F0IG5vaXNlX25lcnAoZmxvYXQgdCwgZmxvYXQgYSwgZmxvYXQgYikKewoJcmV0dXJuICgxLjAgLSB0KSAqIGEgKyB0ICogYjsKfQoKZmxvYXQgbm9pc2VfZ3JhZCh1aW50IGhhc2gsIGZsb2F0IHgsIGZsb2F0IHksIGZsb2F0IHopCnsKCXVpbnQgaCA9IGhhc2ggJiAxNXU7CglmbG9hdCB1ID0gaCA8IDh1ID8geCA6IHk7CglmbG9hdCB2dCA9ICgoaCA9PSAxMnUpIHx8IChoID09IDE0dSkpID8geCA6IHo7CglmbG9hdCB2ID0gaCA8IDR1ID8geSA6IHZ0OwoJcmV0dXJuICgoKGggJiAxdSkgIT0gMHUpID8gLXUgOiB1KSArICgoKGggJiAydSkgIT0gMHUpID8gLXYgOiB2KTsKfQoKZmxvYXQgbm9pc2VfcGVybGluKGZsb2F0IHgsIGZsb2F0IHksIGZsb2F0IHopCnsKCWludCBYOyBmbG9hdCBmeCA9IGZsb29yZnJhYyh4LCBYKTsKCWludCBZOyBmbG9hdCBmeSA9IGZsb29yZnJhYyh5LCBZKTsKCWludCBaOyBmbG9hdCBmeiA9IGZsb29yZnJhYyh6LCBaKTsKCglmbG9hdCB1ID0gbm9pc2VfZmFkZShmeCk7CglmbG9hdCB2ID0gbm9pc2VfZmFkZShmeSk7CglmbG9hdCB3ID0gbm9pc2VfZmFkZShmeik7CgoJZmxvYXQgcmVzdWx0OwoKCXJlc3VsdCA9IG5vaXNlX25lcnAodywgbm9pc2VfbmVycCh2LCBub2lzZV9uZXJwKHUsIG5vaXNlX2dyYWQoaGFzaChYLCBZLCBaKSwgZngsIGZ5LCBmeiksCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2lzZV9ncmFkKGhhc2goWCArIDEsIFksIFopLCBmeCAtIDEuMCwgZnksIGZ6KSksCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9pc2VfbmVycCh1LCBub2lzZV9ncmFkKGhhc2goWCwgWSArIDEsIFopLCBmeCwgZnkgLSAxLjAsIGZ6KSwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vaXNlX2dyYWQoaGFzaChYICsgMSwgWSArIDEsIFopLCBmeCAtIDEuMCwgZnkgLSAxLjAsIGZ6KSkpLAoJICAgICAgICAgICAgICAgICAgICBub2lzZV9uZXJwKHYsIG5vaXNlX25lcnAodSwgbm9pc2VfZ3JhZChoYXNoKFgsIFksIFogKyAxKSwgZngsIGZ5LCBmeiAtIDEuMCksCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2lzZV9ncmFkKGhhc2goWCArIDEsIFksIFogKyAxKSwgZnggLSAxLjAsIGZ5LCBmeiAtIDEuMCkpLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vaXNlX25lcnAodSwgbm9pc2VfZ3JhZChoYXNoKFgsIFkgKyAxLCBaICsgMSksIGZ4LCBmeSAtIDEuMCwgZnogLSAxLjApLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9pc2VfZ3JhZChoYXNoKFggKyAxLCBZICsgMSwgWiArIDEpLCBmeCAtIDEuMCwgZnkgLSAxLjAsIGZ6IC0gMS4wKSkpKTsKCXJldHVybiBub2lzZV9zY2FsZTMocmVzdWx0KTsKfQoKZmxvYXQgbm9pc2UodmVjMyBwKQp7CglyZXR1cm4gMC41ICogbm9pc2VfcGVybGluKHAueCwgcC55LCBwLnopICsgMC41Owp9CgpmbG9hdCBzbm9pc2UodmVjMyBwKQp7CglyZXR1cm4gbm9pc2VfcGVybGluKHAueCwgcC55LCBwLnopOwp9CgpmbG9hdCBub2lzZV90dXJidWxlbmNlKHZlYzMgcCwgZmxvYXQgb2N0YXZlcywgaW50IGhhcmQpCnsKCWZsb2F0IGZzY2FsZSA9IDEuMDsKCWZsb2F0IGFtcCA9IDEuMDsKCWZsb2F0IHN1bSA9IDAuMDsKCWludCBpLCBuOwoJb2N0YXZlcyA9IGNsYW1wKG9jdGF2ZXMsIDAuMCwgMTYuMCk7CgluID0gaW50KG9jdGF2ZXMpOwoJZm9yIChpID0gMDsgaSA8PSBuOyBpKyspIHsKCQlmbG9hdCB0ID0gbm9pc2UoZnNjYWxlICogcCk7CgkJaWYgKGhhcmQgIT0gMCkgewoJCQl0ID0gYWJzKDIuMCAqIHQgLSAxLjApOwoJCX0KCQlzdW0gKz0gdCAqIGFtcDsKCQlhbXAgKj0gMC41OwoJCWZzY2FsZSAqPSAyLjA7Cgl9CglmbG9hdCBybWQgPSBvY3RhdmVzIC0gZmxvb3Iob2N0YXZlcyk7CglpZiAgKHJtZCAhPSAwLjApIHsKCQlmbG9hdCB0ID0gbm9pc2UoZnNjYWxlICogcCk7CgkJaWYgKGhhcmQgIT0gMCkgewoJCQl0ID0gYWJzKDIuMCAqIHQgLSAxLjApOwoJCX0KCQlmbG9hdCBzdW0yID0gc3VtICsgdCAqIGFtcDsKCQlzdW0gKj0gKGZsb2F0KDEgPDwgbikgLyBmbG9hdCgoMSA8PCAobiArIDEpKSAtIDEpKTsKCQlzdW0yICo9IChmbG9hdCgxIDw8IChuICsgMSkpIC8gZmxvYXQoKDEgPDwgKG4gKyAyKSkgLSAxKSk7CgkJcmV0dXJuICgxLjAgLSBybWQpICogc3VtICsgcm1kICogc3VtMjsKCX0KCWVsc2UgewoJCXN1bSAqPSAoZmxvYXQoMSA8PCBuKSAvIGZsb2F0KCgxIDw8IChuICsgMSkpIC0gMSkpOwoJCXJldHVybiBzdW07Cgl9Cn0KI2VuZGlmICAvLyBCSVRfT1BFUkFUSU9OUwoKdm9pZCBub2RlX3RleF9ub2lzZSh2ZWMzIGNvLCBmbG9hdCBzY2FsZSwgZmxvYXQgZGV0YWlsLCBmbG9hdCBkaXN0b3J0aW9uLCBvdXQgdmVjNCBjb2xvciwgb3V0IGZsb2F0IGZhYykKewojaWZkZWYgQklUX09QRVJBVElPTlMKCXZlYzMgcCA9IGNvICogc2NhbGU7CglpbnQgaGFyZCA9IDA7CglpZiAoZGlzdG9ydGlvbiAhPSAwLjApIHsKCQl2ZWMzIHIsIG9mZnNldCA9IHZlYzMoMTMuNSwgMTMuNSwgMTMuNSk7CgkJci54ID0gbm9pc2UocCArIG9mZnNldCkgKiBkaXN0b3J0aW9uOwoJCXIueSA9IG5vaXNlKHApICogZGlzdG9ydGlvbjsKCQlyLnogPSBub2lzZShwIC0gb2Zmc2V0KSAqIGRpc3RvcnRpb247CgkJcCArPSByOwoJfQoKCWZhYyA9IG5vaXNlX3R1cmJ1bGVuY2UocCwgZGV0YWlsLCBoYXJkKTsKCWNvbG9yID0gdmVjNChmYWMsCgkgICAgICAgICAgICAgbm9pc2VfdHVyYnVsZW5jZSh2ZWMzKHAueSwgcC54LCBwLnopLCBkZXRhaWwsIGhhcmQpLAoJICAgICAgICAgICAgIG5vaXNlX3R1cmJ1bGVuY2UodmVjMyhwLnksIHAueiwgcC54KSwgZGV0YWlsLCBoYXJkKSwKCSAgICAgICAgICAgICAxKTsKI2Vsc2UgIC8vIEJJVF9PUEVSQVRJT05TCgljb2xvciA9IHZlYzQoMS4wKTsKCWZhYyA9IDEuMDsKI2VuZGlmICAvLyBCSVRfT1BFUkFUSU9OUwp9CgoKI2lmZGVmIEJJVF9PUEVSQVRJT05TCgovKiBNdXNncmF2ZSBmQm0KICoKICogSDogZnJhY3RhbCBpbmNyZW1lbnQgcGFyYW1ldGVyCiAqIGxhY3VuYXJpdHk6IGdhcCBiZXR3ZWVuIHN1Y2Nlc3NpdmUgZnJlcXVlbmNpZXMKICogb2N0YXZlczogbnVtYmVyIG9mIGZyZXF1ZW5jaWVzIHZhcnlpbmcgdGhlIGZCbQogKgogKiBmcm9tICJUZXh0dXJpbmcgYW5kIE1vZGVsbGluZzogQSBwcm9jZWR1cmFsIGFwcHJvYWNoIgogKi8KCmZsb2F0IG5vaXNlX211c2dyYXZlX2ZCbSh2ZWMzIHAsIGZsb2F0IEgsIGZsb2F0IGxhY3VuYXJpdHksIGZsb2F0IG9jdGF2ZXMpCnsKCWZsb2F0IHJtZDsKCWZsb2F0IHZhbHVlID0gMC4wOwoJZmxvYXQgcHdyID0gMS4wOwoJZmxvYXQgcHdITCA9IHBvdyhsYWN1bmFyaXR5LCAtSCk7CglpbnQgaTsKCglmb3IgKGkgPSAwOyBpIDwgaW50KG9jdGF2ZXMpOyBpKyspIHsKCQl2YWx1ZSArPSBzbm9pc2UocCkgKiBwd3I7CgkJcHdyICo9IHB3SEw7CgkJcCAqPSBsYWN1bmFyaXR5OwoJfQoKCXJtZCA9IG9jdGF2ZXMgLSBmbG9vcihvY3RhdmVzKTsKCWlmIChybWQgIT0gMC4wKQoJCXZhbHVlICs9IHJtZCAqIHNub2lzZShwKSAqIHB3cjsKCglyZXR1cm4gdmFsdWU7Cn0KCi8qIE11c2dyYXZlIE11bHRpZnJhY3RhbAogKgogKiBIOiBoaWdoZXN0IGZyYWN0YWwgZGltZW5zaW9uCiAqIGxhY3VuYXJpdHk6IGdhcCBiZXR3ZWVuIHN1Y2Nlc3NpdmUgZnJlcXVlbmNpZXMKICogb2N0YXZlczogbnVtYmVyIG9mIGZyZXF1ZW5jaWVzIHZhcnlpbmcgdGhlIGZCbQogKi8KCmZsb2F0IG5vaXNlX211c2dyYXZlX211bHRpX2ZyYWN0YWwodmVjMyBwLCBmbG9hdCBILCBmbG9hdCBsYWN1bmFyaXR5LCBmbG9hdCBvY3RhdmVzKQp7CglmbG9hdCBybWQ7CglmbG9hdCB2YWx1ZSA9IDEuMDsKCWZsb2F0IHB3ciA9IDEuMDsKCWZsb2F0IHB3SEwgPSBwb3cobGFjdW5hcml0eSwgLUgpOwoJaW50IGk7CgoJZm9yIChpID0gMDsgaSA8IGludChvY3RhdmVzKTsgaSsrKSB7CgkJdmFsdWUgKj0gKHB3ciAqIHNub2lzZShwKSArIDEuMCk7CgkJcHdyICo9IHB3SEw7CgkJcCAqPSBsYWN1bmFyaXR5OwoJfQoKCXJtZCA9IG9jdGF2ZXMgLSBmbG9vcihvY3RhdmVzKTsKCWlmIChybWQgIT0gMC4wKQoJCXZhbHVlICo9IChybWQgKiBwd3IgKiBzbm9pc2UocCkgKyAxLjApOyAvKiBjb3JyZWN0PyAqLwoKCXJldHVybiB2YWx1ZTsKfQoKLyogTXVzZ3JhdmUgSGV0ZXJvZ2VuZW91cyBUZXJyYWluCiAqCiAqIEg6IGZyYWN0YWwgZGltZW5zaW9uIG9mIHRoZSByb3VnaGVzdCBhcmVhCiAqIGxhY3VuYXJpdHk6IGdhcCBiZXR3ZWVuIHN1Y2Nlc3NpdmUgZnJlcXVlbmNpZXMKICogb2N0YXZlczogbnVtYmVyIG9mIGZyZXF1ZW5jaWVzIHZhcnlpbmcgdGhlIGZCbQogKiBvZmZzZXQ6IHJhaXNlcyB0aGUgdGVycmFpbiBmcm9tIGBzZWEgbGV2ZWwnCiAqLwoKZmxvYXQgbm9pc2VfbXVzZ3JhdmVfaGV0ZXJvX3RlcnJhaW4odmVjMyBwLCBmbG9hdCBILCBmbG9hdCBsYWN1bmFyaXR5LCBmbG9hdCBvY3RhdmVzLCBmbG9hdCBvZmZzZXQpCnsKCWZsb2F0IHZhbHVlLCBpbmNyZW1lbnQsIHJtZDsKCWZsb2F0IHB3SEwgPSBwb3cobGFjdW5hcml0eSwgLUgpOwoJZmxvYXQgcHdyID0gcHdITDsKCWludCBpOwoKCS8qIGZpcnN0IHVuc2NhbGVkIG9jdGF2ZSBvZiBmdW5jdGlvbjsgbGF0ZXIgb2N0YXZlcyBhcmUgc2NhbGVkICovCgl2YWx1ZSA9IG9mZnNldCArIHNub2lzZShwKTsKCXAgKj0gbGFjdW5hcml0eTsKCglmb3IgKGkgPSAxOyBpIDwgaW50KG9jdGF2ZXMpOyBpKyspIHsKCQlpbmNyZW1lbnQgPSAoc25vaXNlKHApICsgb2Zmc2V0KSAqIHB3ciAqIHZhbHVlOwoJCXZhbHVlICs9IGluY3JlbWVudDsKCQlwd3IgKj0gcHdITDsKCQlwICo9IGxhY3VuYXJpdHk7Cgl9CgoJcm1kID0gb2N0YXZlcyAtIGZsb29yKG9jdGF2ZXMpOwoJaWYgKHJtZCAhPSAwLjApIHsKCQlpbmNyZW1lbnQgPSAoc25vaXNlKHApICsgb2Zmc2V0KSAqIHB3ciAqIHZhbHVlOwoJCXZhbHVlICs9IHJtZCAqIGluY3JlbWVudDsKCX0KCglyZXR1cm4gdmFsdWU7Cn0KCi8qIEh5YnJpZCBBZGRpdGl2ZS9NdWx0aXBsaWNhdGl2ZSBNdWx0aWZyYWN0YWwgVGVycmFpbgogKgogKiBIOiBmcmFjdGFsIGRpbWVuc2lvbiBvZiB0aGUgcm91Z2hlc3QgYXJlYQogKiBsYWN1bmFyaXR5OiBnYXAgYmV0d2VlbiBzdWNjZXNzaXZlIGZyZXF1ZW5jaWVzCiAqIG9jdGF2ZXM6IG51bWJlciBvZiBmcmVxdWVuY2llcyB2YXJ5aW5nIHRoZSBmQm0KICogb2Zmc2V0OiByYWlzZXMgdGhlIHRlcnJhaW4gZnJvbSBgc2VhIGxldmVsJwogKi8KCmZsb2F0IG5vaXNlX211c2dyYXZlX2h5YnJpZF9tdWx0aV9mcmFjdGFsKHZlYzMgcCwgZmxvYXQgSCwgZmxvYXQgbGFjdW5hcml0eSwgZmxvYXQgb2N0YXZlcywgZmxvYXQgb2Zmc2V0LCBmbG9hdCBnYWluKQp7CglmbG9hdCByZXN1bHQsIHNpZ25hbCwgd2VpZ2h0LCBybWQ7CglmbG9hdCBwd0hMID0gcG93KGxhY3VuYXJpdHksIC1IKTsKCWZsb2F0IHB3ciA9IHB3SEw7CglpbnQgaTsKCglyZXN1bHQgPSBzbm9pc2UocCkgKyBvZmZzZXQ7Cgl3ZWlnaHQgPSBnYWluICogcmVzdWx0OwoJcCAqPSBsYWN1bmFyaXR5OwoKCWZvciAoaSA9IDE7ICh3ZWlnaHQgPiAwLjAwMWYpICYmIChpIDwgaW50KG9jdGF2ZXMpKTsgaSsrKSB7CgkJaWYgKHdlaWdodCA+IDEuMCkKCQkJd2VpZ2h0ID0gMS4wOwoKCQlzaWduYWwgPSAoc25vaXNlKHApICsgb2Zmc2V0KSAqIHB3cjsKCQlwd3IgKj0gcHdITDsKCQlyZXN1bHQgKz0gd2VpZ2h0ICogc2lnbmFsOwoJCXdlaWdodCAqPSBnYWluICogc2lnbmFsOwoJCXAgKj0gbGFjdW5hcml0eTsKCX0KCglybWQgPSBvY3RhdmVzIC0gZmxvb3Iob2N0YXZlcyk7CglpZiAocm1kICE9IDAuMCkKCQlyZXN1bHQgKz0gcm1kICogKChzbm9pc2UocCkgKyBvZmZzZXQpICogcHdyKTsKCglyZXR1cm4gcmVzdWx0Owp9CgovKiBSaWRnZWQgTXVsdGlmcmFjdGFsIFRlcnJhaW4KICoKICogSDogZnJhY3RhbCBkaW1lbnNpb24gb2YgdGhlIHJvdWdoZXN0IGFyZWEKICogbGFjdW5hcml0eTogZ2FwIGJldHdlZW4gc3VjY2Vzc2l2ZSBmcmVxdWVuY2llcwogKiBvY3RhdmVzOiBudW1iZXIgb2YgZnJlcXVlbmNpZXMgdmFyeWluZyB0aGUgZkJtCiAqIG9mZnNldDogcmFpc2VzIHRoZSB0ZXJyYWluIGZyb20gYHNlYSBsZXZlbCcKICovCgpmbG9hdCBub2lzZV9tdXNncmF2ZV9yaWRnZWRfbXVsdGlfZnJhY3RhbCh2ZWMzIHAsIGZsb2F0IEgsIGZsb2F0IGxhY3VuYXJpdHksIGZsb2F0IG9jdGF2ZXMsIGZsb2F0IG9mZnNldCwgZmxvYXQgZ2FpbikKewoJZmxvYXQgcmVzdWx0LCBzaWduYWwsIHdlaWdodDsKCWZsb2F0IHB3SEwgPSBwb3cobGFjdW5hcml0eSwgLUgpOwoJZmxvYXQgcHdyID0gcHdITDsKCWludCBpOwoKCXNpZ25hbCA9IG9mZnNldCAtIGFicyhzbm9pc2UocCkpOwoJc2lnbmFsICo9IHNpZ25hbDsKCXJlc3VsdCA9IHNpZ25hbDsKCXdlaWdodCA9IDEuMDsKCglmb3IgKGkgPSAxOyBpIDwgaW50KG9jdGF2ZXMpOyBpKyspIHsKCQlwICo9IGxhY3VuYXJpdHk7CgkJd2VpZ2h0ID0gY2xhbXAoc2lnbmFsICogZ2FpbiwgMC4wLCAxLjApOwoJCXNpZ25hbCA9IG9mZnNldCAtIGFicyhzbm9pc2UocCkpOwoJCXNpZ25hbCAqPSBzaWduYWw7CgkJc2lnbmFsICo9IHdlaWdodDsKCQlyZXN1bHQgKz0gc2lnbmFsICogcHdyOwoJCXB3ciAqPSBwd0hMOwoJfQoKCXJldHVybiByZXN1bHQ7Cn0KCmZsb2F0IHN2bV9tdXNncmF2ZShpbnQgdHlwZSwKICAgICAgICAgICAgICAgICAgIGZsb2F0IGRpbWVuc2lvbiwKICAgICAgICAgICAgICAgICAgIGZsb2F0IGxhY3VuYXJpdHksCiAgICAgICAgICAgICAgICAgICBmbG9hdCBvY3RhdmVzLAogICAgICAgICAgICAgICAgICAgZmxvYXQgb2Zmc2V0LAogICAgICAgICAgICAgICAgICAgZmxvYXQgaW50ZW5zaXR5LAogICAgICAgICAgICAgICAgICAgZmxvYXQgZ2FpbiwKICAgICAgICAgICAgICAgICAgIHZlYzMgcCkKewoJaWYgKHR5cGUgPT0gMCAvKk5PREVfTVVTR1JBVkVfTVVMVElGUkFDVEFMKi8pCgkJcmV0dXJuIGludGVuc2l0eSAqIG5vaXNlX211c2dyYXZlX211bHRpX2ZyYWN0YWwocCwgZGltZW5zaW9uLCBsYWN1bmFyaXR5LCBvY3RhdmVzKTsKCWVsc2UgaWYgKHR5cGUgPT0gMSAvKk5PREVfTVVTR1JBVkVfRkJNKi8pCgkJcmV0dXJuIGludGVuc2l0eSAqIG5vaXNlX211c2dyYXZlX2ZCbShwLCBkaW1lbnNpb24sIGxhY3VuYXJpdHksIG9jdGF2ZXMpOwoJZWxzZSBpZiAodHlwZSA9PSAyIC8qTk9ERV9NVVNHUkFWRV9IWUJSSURfTVVMVElGUkFDVEFMKi8pCgkJcmV0dXJuIGludGVuc2l0eSAqIG5vaXNlX211c2dyYXZlX2h5YnJpZF9tdWx0aV9mcmFjdGFsKHAsIGRpbWVuc2lvbiwgbGFjdW5hcml0eSwgb2N0YXZlcywgb2Zmc2V0LCBnYWluKTsKCWVsc2UgaWYgKHR5cGUgPT0gMyAvKk5PREVfTVVTR1JBVkVfUklER0VEX01VTFRJRlJBQ1RBTCovKQoJCXJldHVybiBpbnRlbnNpdHkgKiBub2lzZV9tdXNncmF2ZV9yaWRnZWRfbXVsdGlfZnJhY3RhbChwLCBkaW1lbnNpb24sIGxhY3VuYXJpdHksIG9jdGF2ZXMsIG9mZnNldCwgZ2Fpbik7CgllbHNlIGlmICh0eXBlID09IDQgLypOT0RFX01VU0dSQVZFX0hFVEVST19URVJSQUlOKi8pCgkJcmV0dXJuIGludGVuc2l0eSAqIG5vaXNlX211c2dyYXZlX2hldGVyb190ZXJyYWluKHAsIGRpbWVuc2lvbiwgbGFjdW5hcml0eSwgb2N0YXZlcywgb2Zmc2V0KTsKCXJldHVybiAwLjA7Cn0KI2VuZGlmICAvLyAjaWZkZWYgQklUX09QRVJBVElPTlMKCnZvaWQgbm9kZV90ZXhfbXVzZ3JhdmUodmVjMyBjbywKICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBzY2FsZSwKICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBkZXRhaWwsCiAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgZGltZW5zaW9uLAogICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IGxhY3VuYXJpdHksCiAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgb2Zmc2V0LAogICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IGdhaW4sCiAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICBvdXQgdmVjNCBjb2xvciwKICAgICAgICAgICAgICAgICAgICAgICBvdXQgZmxvYXQgZmFjKQp7CiNpZmRlZiBCSVRfT1BFUkFUSU9OUwoJZmFjID0gc3ZtX211c2dyYXZlKGludCh0eXBlKSwKCSAgICAgICAgICAgICAgICAgICBkaW1lbnNpb24sCgkgICAgICAgICAgICAgICAgICAgbGFjdW5hcml0eSwKCSAgICAgICAgICAgICAgICAgICBkZXRhaWwsCgkgICAgICAgICAgICAgICAgICAgb2Zmc2V0LAoJICAgICAgICAgICAgICAgICAgIDEuMCwKCSAgICAgICAgICAgICAgICAgICBnYWluLAoJICAgICAgICAgICAgICAgICAgIGNvICogc2NhbGUpOwojZWxzZQoJZmFjID0gMS4wOwojZW5kaWYKCgljb2xvciA9IHZlYzQoZmFjLCBmYWMsIGZhYywgMS4wKTsKfQoKdm9pZCBub2RlX3RleF9za3kodmVjMyBjbywgb3V0IHZlYzQgY29sb3IpCnsKCWNvbG9yID0gdmVjNCgxLjApOwp9Cgp2b2lkIG5vZGVfdGV4X3Zvcm9ub2kodmVjMyBjbywgZmxvYXQgc2NhbGUsIGZsb2F0IGNvbG9yaW5nLCBvdXQgdmVjNCBjb2xvciwgb3V0IGZsb2F0IGZhYykKewojaWZkZWYgQklUX09QRVJBVElPTlMKCXZlYzMgcCA9IGNvICogc2NhbGU7CglpbnQgeHgsIHl5LCB6eiwgeGksIHlpLCB6aTsKCWZsb2F0IGRhWzRdOwoJdmVjMyBwYVs0XTsKCgl4aSA9IGZsb29yX3RvX2ludChwWzBdKTsKCXlpID0gZmxvb3JfdG9faW50KHBbMV0pOwoJemkgPSBmbG9vcl90b19pbnQocFsyXSk7CgoJZGFbMF0gPSAxZSsxMDsKCWRhWzFdID0gMWUrMTA7CglkYVsyXSA9IDFlKzEwOwoJZGFbM10gPSAxZSsxMDsKCglmb3IgKHh4ID0geGkgLSAxOyB4eCA8PSB4aSArIDE7IHh4KyspIHsKCQlmb3IgKHl5ID0geWkgLSAxOyB5eSA8PSB5aSArIDE7IHl5KyspIHsKCQkJZm9yICh6eiA9IHppIC0gMTsgenogPD0gemkgKyAxOyB6eisrKSB7CgkJCQl2ZWMzIGlwID0gdmVjMyh4eCwgeXksIHp6KTsKCQkJCXZlYzMgdnAgPSBjZWxsbm9pc2VfY29sb3IoaXApOwoJCQkJdmVjMyBwZCA9IHAgLSAodnAgKyBpcCk7CgkJCQlmbG9hdCBkID0gZG90KHBkLCBwZCk7CgkJCQl2cCArPSB2ZWMzKHh4LCB5eSwgenopOwoJCQkJaWYgKGQgPCBkYVswXSkgewoJCQkJCWRhWzNdID0gZGFbMl07CgkJCQkJZGFbMl0gPSBkYVsxXTsKCQkJCQlkYVsxXSA9IGRhWzBdOwoJCQkJCWRhWzBdID0gZDsKCQkJCQlwYVszXSA9IHBhWzJdOwoJCQkJCXBhWzJdID0gcGFbMV07CgkJCQkJcGFbMV0gPSBwYVswXTsKCQkJCQlwYVswXSA9IHZwOwoJCQkJfQoJCQkJZWxzZSBpZiAoZCA8IGRhWzFdKSB7CgkJCQkJZGFbM10gPSBkYVsyXTsKCQkJCQlkYVsyXSA9IGRhWzFdOwoJCQkJCWRhWzFdID0gZDsKCgkJCQkJcGFbM10gPSBwYVsyXTsKCQkJCQlwYVsyXSA9IHBhWzFdOwoJCQkJCXBhWzFdID0gdnA7CgkJCQl9CgkJCQllbHNlIGlmIChkIDwgZGFbMl0pIHsKCQkJCQlkYVszXSA9IGRhWzJdOwoJCQkJCWRhWzJdID0gZDsKCgkJCQkJcGFbM10gPSBwYVsyXTsKCQkJCQlwYVsyXSA9IHZwOwoJCQkJfQoJCQkJZWxzZSBpZiAoZCA8IGRhWzNdKSB7CgkJCQkJZGFbM10gPSBkOwoJCQkJCXBhWzNdID0gdnA7CgkJCQl9CgkJCX0KCQl9Cgl9CgoJaWYgKGNvbG9yaW5nID09IDAuMCkgewoJCWZhYyA9IGFicyhkYVswXSk7CgkJY29sb3IgPSB2ZWM0KGZhYywgZmFjLCBmYWMsIDEpOwoJfQoJZWxzZSB7CgkJY29sb3IgPSB2ZWM0KGNlbGxub2lzZV9jb2xvcihwYVswXSksIDEpOwoJCWZhYyA9IChjb2xvci54ICsgY29sb3IueSArIGNvbG9yLnopICogKDEuMCAvIDMuMCk7Cgl9CiNlbHNlICAvLyBCSVRfT1BFUkFUSU9OUwoJY29sb3IgPSB2ZWM0KDEuMCk7CglmYWMgPSAxLjA7CiNlbmRpZiAgLy8gQklUX09QRVJBVElPTlMKfQoKI2lmZGVmIEJJVF9PUEVSQVRJT05TCmZsb2F0IGNhbGNfd2F2ZSh2ZWMzIHAsIGZsb2F0IGRpc3RvcnRpb24sIGZsb2F0IGRldGFpbCwgZmxvYXQgZGV0YWlsX3NjYWxlLCBpbnQgd2F2ZV90eXBlLCBpbnQgd2F2ZV9wcm9maWxlKQp7CglmbG9hdCBuOwoKCWlmICh3YXZlX3R5cGUgPT0gMCkgLyogdHlwZSBiYW5kcyAqLwoJCW4gPSAocC54ICsgcC55ICsgcC56KSAqIDEwLjA7CgllbHNlIC8qIHR5cGUgcmluZ3MgKi8KCQluID0gbGVuZ3RoKHApICogMjAuMDsKCglpZiAoZGlzdG9ydGlvbiAhPSAwLjApCgkJbiArPSBkaXN0b3J0aW9uICogbm9pc2VfdHVyYnVsZW5jZShwICogZGV0YWlsX3NjYWxlLCBkZXRhaWwsIDApOwoKCWlmICh3YXZlX3Byb2ZpbGUgPT0gMCkgeyAvKiBwcm9maWxlIHNpbiAqLwoJCXJldHVybiAwLjUgKyAwLjUgKiBzaW4obik7Cgl9CgllbHNlIHsgLyogcHJvZmlsZSBzYXcgKi8KCQluIC89IDIuMCAqIE1fUEk7CgkJbiAtPSBpbnQobik7CgkJcmV0dXJuIChuIDwgMC4wKSA/IG4gKyAxLjAgOiBuOwoJfQp9CiNlbmRpZiAgLy8gQklUX09QRVJBVElPTlMKCnZvaWQgbm9kZV90ZXhfd2F2ZSgKICAgICAgICB2ZWMzIGNvLCBmbG9hdCBzY2FsZSwgZmxvYXQgZGlzdG9ydGlvbiwgZmxvYXQgZGV0YWlsLCBmbG9hdCBkZXRhaWxfc2NhbGUsIGZsb2F0IHdhdmVfdHlwZSwgZmxvYXQgd2F2ZV9wcm9maWxlLAogICAgICAgIG91dCB2ZWM0IGNvbG9yLCBvdXQgZmxvYXQgZmFjKQp7CiNpZmRlZiBCSVRfT1BFUkFUSU9OUwoJZmxvYXQgZjsKCWYgPSBjYWxjX3dhdmUoY28gKiBzY2FsZSwgZGlzdG9ydGlvbiwgZGV0YWlsLCBkZXRhaWxfc2NhbGUsIGludCh3YXZlX3R5cGUpLCBpbnQod2F2ZV9wcm9maWxlKSk7CgoJY29sb3IgPSB2ZWM0KGYsIGYsIGYsIDEuMCk7CglmYWMgPSBmOwojZWxzZSAgLy8gQklUX09QRVJBVElPTlMKCWNvbG9yID0gdmVjNCgxLjApOwoJZmFjID0gMTsKI2VuZGlmICAvLyBCSVRfT1BFUkFUSU9OUwp9CgovKiBsaWdodCBwYXRoICovCgp2b2lkIG5vZGVfbGlnaHRfcGF0aCgKCW91dCBmbG9hdCBpc19jYW1lcmFfcmF5LAoJb3V0IGZsb2F0IGlzX3NoYWRvd19yYXksCglvdXQgZmxvYXQgaXNfZGlmZnVzZV9yYXksCglvdXQgZmxvYXQgaXNfZ2xvc3N5X3JheSwKCW91dCBmbG9hdCBpc19zaW5ndWxhcl9yYXksCglvdXQgZmxvYXQgaXNfcmVmbGVjdGlvbl9yYXksCglvdXQgZmxvYXQgaXNfdHJhbnNtaXNzaW9uX3JheSwKCW91dCBmbG9hdCByYXlfbGVuZ3RoLAoJb3V0IGZsb2F0IHJheV9kZXB0aCwKCW91dCBmbG9hdCBkaWZmdXNlX2RlcHRoLAoJb3V0IGZsb2F0IGdsb3NzeV9kZXB0aCwKCW91dCBmbG9hdCB0cmFuc3BhcmVudF9kZXB0aCwKCW91dCBmbG9hdCB0cmFuc21pc3Npb25fZGVwdGgpCnsKCWlzX2NhbWVyYV9yYXkgPSAxLjA7Cglpc19zaGFkb3dfcmF5ID0gMC4wOwoJaXNfZGlmZnVzZV9yYXkgPSAwLjA7Cglpc19nbG9zc3lfcmF5ID0gMC4wOwoJaXNfc2luZ3VsYXJfcmF5ID0gMC4wOwoJaXNfcmVmbGVjdGlvbl9yYXkgPSAwLjA7Cglpc190cmFuc21pc3Npb25fcmF5ID0gMC4wOwoJcmF5X2xlbmd0aCA9IDEuMDsKCXJheV9kZXB0aCA9IDEuMDsKCWRpZmZ1c2VfZGVwdGggPSAxLjA7CglnbG9zc3lfZGVwdGggPSAxLjA7Cgl0cmFuc3BhcmVudF9kZXB0aCA9IDEuMDsKCXRyYW5zbWlzc2lvbl9kZXB0aCA9IDEuMDsKfQoKdm9pZCBub2RlX2xpZ2h0X2ZhbGxvZmYoZmxvYXQgc3RyZW5ndGgsIGZsb2F0IHRzbW9vdGgsIG91dCBmbG9hdCBxdWFkcmF0aWMsIG91dCBmbG9hdCBsaW5lYXIsIG91dCBmbG9hdCBjb25zdGFudCkKewoJcXVhZHJhdGljID0gc3RyZW5ndGg7CglsaW5lYXIgPSBzdHJlbmd0aDsKCWNvbnN0YW50ID0gc3RyZW5ndGg7Cn0KCnZvaWQgbm9kZV9vYmplY3RfaW5mbyhvdXQgdmVjMyBsb2NhdGlvbiwgb3V0IGZsb2F0IG9iamVjdF9pbmRleCwgb3V0IGZsb2F0IG1hdGVyaWFsX2luZGV4LCBvdXQgZmxvYXQgcmFuZG9tKQp7Cglsb2NhdGlvbiA9IHZlYzMoMC4wKTsKCW9iamVjdF9pbmRleCA9IDAuMDsKCW1hdGVyaWFsX2luZGV4ID0gMC4wOwoJcmFuZG9tID0gMC4wOwp9Cgp2b2lkIG5vZGVfbm9ybWFsX21hcCh2ZWM0IHRhbmdlbnQsIHZlYzMgbm9ybWFsLCB2ZWMzIHRleG5vcm1hbCwgb3V0IHZlYzMgb3V0bm9ybWFsKQp7Cgl2ZWMzIEIgPSB0YW5nZW50LncgKiBjcm9zcyhub3JtYWwsIHRhbmdlbnQueHl6KTsKCglvdXRub3JtYWwgPSB0ZXhub3JtYWwueCAqIHRhbmdlbnQueHl6ICsgdGV4bm9ybWFsLnkgKiBCICsgdGV4bm9ybWFsLnogKiBub3JtYWw7CglvdXRub3JtYWwgPSBub3JtYWxpemUob3V0bm9ybWFsKTsKfQoKdm9pZCBub2RlX2J1bXAoZmxvYXQgc3RyZW5ndGgsIGZsb2F0IGRpc3QsIGZsb2F0IGhlaWdodCwgdmVjMyBOLCB2ZWMzIHN1cmZfcG9zLCBmbG9hdCBpbnZlcnQsIG91dCB2ZWMzIHJlc3VsdCkKewoJaWYgKGludmVydCAhPSAwLjApIHsKCQlkaXN0ICo9IC0xLjA7Cgl9Cgl2ZWMzIGRQZHggPSBkRmR4KHN1cmZfcG9zKTsKCXZlYzMgZFBkeSA9IGRGZHkoc3VyZl9wb3MpOwoKCS8qIEdldCBzdXJmYWNlIHRhbmdlbnRzIGZyb20gbm9ybWFsLiAqLwoJdmVjMyBSeCA9IGNyb3NzKGRQZHksIE4pOwoJdmVjMyBSeSA9IGNyb3NzKE4sIGRQZHgpOwoKCS8qIENvbXB1dGUgc3VyZmFjZSBncmFkaWVudCBhbmQgZGV0ZXJtaW5hbnQuICovCglmbG9hdCBkZXQgPSBkb3QoZFBkeCwgUngpOwoJZmxvYXQgYWJzZGV0ID0gYWJzKGRldCk7CgoJZmxvYXQgZEhkeCA9IGRGZHgoaGVpZ2h0KTsKCWZsb2F0IGRIZHkgPSBkRmR5KGhlaWdodCk7Cgl2ZWMzIHN1cmZncmFkID0gZEhkeCAqIFJ4ICsgZEhkeSAqIFJ5OwoKCXN0cmVuZ3RoID0gbWF4KHN0cmVuZ3RoLCAwLjApOwoKCXJlc3VsdCA9IG5vcm1hbGl6ZShhYnNkZXQgKiBOIC0gZGlzdCAqIHNpZ24oZGV0KSAqIHN1cmZncmFkKTsKCXJlc3VsdCA9IG5vcm1hbGl6ZShzdHJlbmd0aCAqIHJlc3VsdCArICgxLjAgLSBzdHJlbmd0aCkgKiBOKTsKfQoKLyogb3V0cHV0ICovCgp2b2lkIG5vZGVfb3V0cHV0X21hdGVyaWFsKHZlYzQgc3VyZmFjZSwgdmVjNCB2b2x1bWUsIGZsb2F0IGRpc3BsYWNlbWVudCwgb3V0IHZlYzQgcmVzdWx0KQp7CglyZXN1bHQgPSBzdXJmYWNlOwp9Cgp2b2lkIG5vZGVfb3V0cHV0X3dvcmxkKHZlYzQgc3VyZmFjZSwgdmVjNCB2b2x1bWUsIG91dCB2ZWM0IHJlc3VsdCkKewoJcmVzdWx0ID0gc3VyZmFjZTsKfQoKLyogKioqKioqKioqKioqKioqKioqKioqKiBtYXRjYXAgc3R5bGUgcmVuZGVyICoqKioqKioqKioqKioqKioqKioqICovCgp2b2lkIG1hdGVyaWFsX3ByZXZpZXdfbWF0Y2FwKHZlYzQgY29sb3IsIHNhbXBsZXIyRCBpbWEsIHZlYzQgTiwgdmVjNCBtYXNrLCBvdXQgdmVjNCByZXN1bHQpCnsKCXZlYzMgbm9ybWFsOwoJdmVjMiB0ZXg7CgkKI2lmbmRlZiBVU0VfT1BFTlNVQkRJVgoJLyogcmVtYXAgdG8gMC4wIC0gMS4wIHJhbmdlLiBUaGlzIGlzIGRvbmUgYmVjYXVzZSBPcGVuR0wgMi4wIGNsYW1wcyBjb2xvcnMKCSAqIGJldHdlZW4gc2hhZGVyIHN0YWdlcyBhbmQgd2Ugd2FudCB0aGUgZnVsbCByYW5nZSBvZiB0aGUgbm9ybWFsICovCglub3JtYWwgPSB2ZWMzKDIuMCwgMi4wLCAyLjApICogdmVjMyhOLngsIE4ueSwgTi56KSAtIHZlYzMoMS4wLCAxLjAsIDEuMCk7CglpZiAobm9ybWFsLnogPCAwLjApIHsKCQlub3JtYWwueiA9IDAuMDsKCX0KCW5vcm1hbCA9IG5vcm1hbGl6ZShub3JtYWwpOwojZWxzZQoJbm9ybWFsID0gaW5wdC52Lm5vcm1hbDsKCW1hc2sgPSB2ZWM0KDEuMCwgMS4wLCAxLjAsIDEuMCk7CiNlbmRpZgoKCXRleC54ID0gMC41ICsgMC40OSAqIG5vcm1hbC54OwoJdGV4LnkgPSAwLjUgKyAwLjQ5ICogbm9ybWFsLnk7CglyZXN1bHQgPSB0ZXh0dXJlMkQoaW1hLCB0ZXgpICogbWFzazsKfQpjb25zdCB2ZWM0IGNvbnMxID0gdmVjNCgwLjA4MDY0MywgMC4zNzkzNzYsIDAuODAwMDAwLCAxLjAwMDAwMCk7CmNvbnN0IGZsb2F0IGNvbnMyID0gZmxvYXQoMS4wMDAwMDApOwp2YXJ5aW5nIHZlYzMgdmFybm9ybWFsOwpjb25zdCB2ZWM0IGNvbnM2ID0gdmVjNCgwLjAwMDAwMCwgMC4wMDAwMDAsIDAuMDAwMDAwLCAxLjAwMDAwMCk7CmNvbnN0IGZsb2F0IGNvbnM3ID0gZmxvYXQoMC4wMDAwMDApOwoKdm9pZCBtYWluKCkKewoJdmVjMyBmYWNpbmdub3JtYWwgPSBnbF9Gcm9udEZhY2luZz8gdmFybm9ybWFsOiAtdmFybm9ybWFsOwoJdmVjNCB0bXA0OwoJdmVjNCB0bXA4OwoJdmVjNCB0bXAxMDsKCglub2RlX2VtaXNzaW9uKGNvbnMxLCBjb25zMiwgZmFjaW5nbm9ybWFsLCB0bXA0KTsKCW5vZGVfb3V0cHV0X21hdGVyaWFsKHRtcDQsIGNvbnM2LCBjb25zNywgdG1wOCk7CglsaW5lYXJyZ2JfdG9fc3JnYih0bXA4LCB0bXAxMCk7CgoJZ2xfRnJhZ0NvbG9yID0gdG1wMTA7Cn0K"
        },
        "shaders_BlueVS": {
            "name": "BlueVS",
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKCgp2YXJ5aW5nIHZlYzMgdmFycG9zaXRpb247CnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7CgoKCgovKiBDb2xvciwga2VlcCBhdHRyaWJ1dGUgc3luYyB3aXRoOiBncHVfc2hhZGVyX3ZlcnRleF93b3JsZC5nbHNsICovCgpmbG9hdCBzcmdiX3RvX2xpbmVhcnJnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDQwNDUpCgkJcmV0dXJuIChjIDwgMC4wKSA/IDAuMCA6IGMgKiAoMS4wIC8gMTIuOTIpOwoJZWxzZQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOwp9Cgp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pCnsKCWNvbF90by5yID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20ucik7Cgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOwoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsKfQoKdm9pZCBzcmdiX3RvX2xpbmVhcnJnYih2ZWM0IGNvbF9mcm9tLCB2YXJ5aW5nIHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCmJvb2wgaXNfc3JnYihpbnQgaW5mbykKewojaWZkZWYgVVNFX05FV19TSEFESU5HCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOwojZWxzZQoJcmV0dXJuIGZhbHNlOwojZW5kaWYKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpCnsKCXZhciA9IGF0dHI7Cn0KCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMiBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMyIHZhcikKewoJdmFyID0gYXR0cjsKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMzIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzMgdmFyKQp7CglpZiAoaXNfc3JnYihpbmZvKSkgewoJCXNyZ2JfdG9fbGluZWFycmdiKGF0dHIsIHZhcik7Cgl9CgllbHNlIHsKCQl2YXIgPSBhdHRyOwoJfQp9Cgp2b2lkIHNldF92YXJfZnJvbV9hdHRyKHZlYzQgYXR0ciwgaW50IGluZm8sIHZhcnlpbmcgdmVjNCB2YXIpCnsKCWlmIChpc19zcmdiKGluZm8pKSB7CgkJc3JnYl90b19saW5lYXJyZ2IoYXR0ciwgdmFyKTsKCX0KCWVsc2UgewoJCXZhciA9IGF0dHI7Cgl9Cn0KCi8qIGVuZCBjb2xvciBjb2RlICovCgoKdm9pZCBtYWluKCkKewoKCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7Cgl2ZWMzIG5vcm1hbCA9IGJsX05vcm1hbDsKCgoJdmVjNCBjbyA9IGJsX01vZGVsVmlld01hdHJpeCAqIHBvc2l0aW9uOwoKCXZhcnBvc2l0aW9uID0gY28ueHl6OwoJdmFybm9ybWFsID0gbm9ybWFsaXplKGJsX05vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CglnbF9Qb3NpdGlvbiA9IGJsX1Byb2plY3Rpb25NYXRyaXggKiBjbzsKCiAKCgp9Cg=="
        },
        "shaders_PinkGlassFS": {
            "name": "PinkGlassFS",
            "type": 35632,
            "uri": "data:text/plain;base64,"
        },
        "shaders_PinkGlassVS": {
            "name": "PinkGlassVS",
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKCgp2YXJ5aW5nIHZlYzMgdmFycG9zaXRpb247CnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7CgoKCgovKiBDb2xvciwga2VlcCBhdHRyaWJ1dGUgc3luYyB3aXRoOiBncHVfc2hhZGVyX3ZlcnRleF93b3JsZC5nbHNsICovCgpmbG9hdCBzcmdiX3RvX2xpbmVhcnJnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDQwNDUpCgkJcmV0dXJuIChjIDwgMC4wKSA/IDAuMCA6IGMgKiAoMS4wIC8gMTIuOTIpOwoJZWxzZQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOwp9Cgp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pCnsKCWNvbF90by5yID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20ucik7Cgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOwoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsKfQoKdm9pZCBzcmdiX3RvX2xpbmVhcnJnYih2ZWM0IGNvbF9mcm9tLCB2YXJ5aW5nIHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCmJvb2wgaXNfc3JnYihpbnQgaW5mbykKewojaWZkZWYgVVNFX05FV19TSEFESU5HCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOwojZWxzZQoJcmV0dXJuIGZhbHNlOwojZW5kaWYKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpCnsKCXZhciA9IGF0dHI7Cn0KCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMiBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMyIHZhcikKewoJdmFyID0gYXR0cjsKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMzIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzMgdmFyKQp7CglpZiAoaXNfc3JnYihpbmZvKSkgewoJCXNyZ2JfdG9fbGluZWFycmdiKGF0dHIsIHZhcik7Cgl9CgllbHNlIHsKCQl2YXIgPSBhdHRyOwoJfQp9Cgp2b2lkIHNldF92YXJfZnJvbV9hdHRyKHZlYzQgYXR0ciwgaW50IGluZm8sIHZhcnlpbmcgdmVjNCB2YXIpCnsKCWlmIChpc19zcmdiKGluZm8pKSB7CgkJc3JnYl90b19saW5lYXJyZ2IoYXR0ciwgdmFyKTsKCX0KCWVsc2UgewoJCXZhciA9IGF0dHI7Cgl9Cn0KCi8qIGVuZCBjb2xvciBjb2RlICovCgoKdm9pZCBtYWluKCkKewoKCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7Cgl2ZWMzIG5vcm1hbCA9IGJsX05vcm1hbDsKCgoJdmVjNCBjbyA9IGJsX01vZGVsVmlld01hdHJpeCAqIHBvc2l0aW9uOwoKCXZhcnBvc2l0aW9uID0gY28ueHl6OwoJdmFybm9ybWFsID0gbm9ybWFsaXplKGJsX05vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CglnbF9Qb3NpdGlvbiA9IGJsX1Byb2plY3Rpb25NYXRyaXggKiBjbzsKCiAKCgp9Cg=="
        },
        "shaders_PinkGlowFS": {
            "name": "PinkGlowFS",
            "type": 35632,
            "uri": "data:text/plain;base64,"
        },
        "shaders_PinkGlowVS": {
            "name": "PinkGlowVS",
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKCgp2YXJ5aW5nIHZlYzMgdmFycG9zaXRpb247CnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7CgoKCgovKiBDb2xvciwga2VlcCBhdHRyaWJ1dGUgc3luYyB3aXRoOiBncHVfc2hhZGVyX3ZlcnRleF93b3JsZC5nbHNsICovCgpmbG9hdCBzcmdiX3RvX2xpbmVhcnJnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDQwNDUpCgkJcmV0dXJuIChjIDwgMC4wKSA/IDAuMCA6IGMgKiAoMS4wIC8gMTIuOTIpOwoJZWxzZQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOwp9Cgp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pCnsKCWNvbF90by5yID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20ucik7Cgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOwoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsKfQoKdm9pZCBzcmdiX3RvX2xpbmVhcnJnYih2ZWM0IGNvbF9mcm9tLCB2YXJ5aW5nIHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCmJvb2wgaXNfc3JnYihpbnQgaW5mbykKewojaWZkZWYgVVNFX05FV19TSEFESU5HCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOwojZWxzZQoJcmV0dXJuIGZhbHNlOwojZW5kaWYKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpCnsKCXZhciA9IGF0dHI7Cn0KCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMiBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMyIHZhcikKewoJdmFyID0gYXR0cjsKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMzIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzMgdmFyKQp7CglpZiAoaXNfc3JnYihpbmZvKSkgewoJCXNyZ2JfdG9fbGluZWFycmdiKGF0dHIsIHZhcik7Cgl9CgllbHNlIHsKCQl2YXIgPSBhdHRyOwoJfQp9Cgp2b2lkIHNldF92YXJfZnJvbV9hdHRyKHZlYzQgYXR0ciwgaW50IGluZm8sIHZhcnlpbmcgdmVjNCB2YXIpCnsKCWlmIChpc19zcmdiKGluZm8pKSB7CgkJc3JnYl90b19saW5lYXJyZ2IoYXR0ciwgdmFyKTsKCX0KCWVsc2UgewoJCXZhciA9IGF0dHI7Cgl9Cn0KCi8qIGVuZCBjb2xvciBjb2RlICovCgoKdm9pZCBtYWluKCkKewoKCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7Cgl2ZWMzIG5vcm1hbCA9IGJsX05vcm1hbDsKCgoJdmVjNCBjbyA9IGJsX01vZGVsVmlld01hdHJpeCAqIHBvc2l0aW9uOwoKCXZhcnBvc2l0aW9uID0gY28ueHl6OwoJdmFybm9ybWFsID0gbm9ybWFsaXplKGJsX05vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CglnbF9Qb3NpdGlvbiA9IGJsX1Byb2plY3Rpb25NYXRyaXggKiBjbzsKCiAKCgp9Cg=="
        },
        "shaders_blueglassFS": {
            "name": "blueglassFS",
            "type": 35632,
            "uri": "data:text/plain;base64,"
        },
        "shaders_blueglassVS": {
            "name": "blueglassVS",
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKCgp2YXJ5aW5nIHZlYzMgdmFycG9zaXRpb247CnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7CgoKCgovKiBDb2xvciwga2VlcCBhdHRyaWJ1dGUgc3luYyB3aXRoOiBncHVfc2hhZGVyX3ZlcnRleF93b3JsZC5nbHNsICovCgpmbG9hdCBzcmdiX3RvX2xpbmVhcnJnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDQwNDUpCgkJcmV0dXJuIChjIDwgMC4wKSA/IDAuMCA6IGMgKiAoMS4wIC8gMTIuOTIpOwoJZWxzZQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOwp9Cgp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pCnsKCWNvbF90by5yID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20ucik7Cgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOwoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsKfQoKdm9pZCBzcmdiX3RvX2xpbmVhcnJnYih2ZWM0IGNvbF9mcm9tLCB2YXJ5aW5nIHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCmJvb2wgaXNfc3JnYihpbnQgaW5mbykKewojaWZkZWYgVVNFX05FV19TSEFESU5HCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOwojZWxzZQoJcmV0dXJuIGZhbHNlOwojZW5kaWYKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpCnsKCXZhciA9IGF0dHI7Cn0KCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMiBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMyIHZhcikKewoJdmFyID0gYXR0cjsKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMzIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzMgdmFyKQp7CglpZiAoaXNfc3JnYihpbmZvKSkgewoJCXNyZ2JfdG9fbGluZWFycmdiKGF0dHIsIHZhcik7Cgl9CgllbHNlIHsKCQl2YXIgPSBhdHRyOwoJfQp9Cgp2b2lkIHNldF92YXJfZnJvbV9hdHRyKHZlYzQgYXR0ciwgaW50IGluZm8sIHZhcnlpbmcgdmVjNCB2YXIpCnsKCWlmIChpc19zcmdiKGluZm8pKSB7CgkJc3JnYl90b19saW5lYXJyZ2IoYXR0ciwgdmFyKTsKCX0KCWVsc2UgewoJCXZhciA9IGF0dHI7Cgl9Cn0KCi8qIGVuZCBjb2xvciBjb2RlICovCgoKdm9pZCBtYWluKCkKewoKCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7Cgl2ZWMzIG5vcm1hbCA9IGJsX05vcm1hbDsKCgoJdmVjNCBjbyA9IGJsX01vZGVsVmlld01hdHJpeCAqIHBvc2l0aW9uOwoKCXZhcnBvc2l0aW9uID0gY28ueHl6OwoJdmFybm9ybWFsID0gbm9ybWFsaXplKGJsX05vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CglnbF9Qb3NpdGlvbiA9IGJsX1Byb2plY3Rpb25NYXRyaXggKiBjbzsKCiAKCgp9Cg=="
        },
        "shaders_greenGlassFS": {
            "name": "greenGlassFS",
            "type": 35632,
            "uri": "data:text/plain;base64,"
        },
        "shaders_greenGlassVS": {
            "name": "greenGlassVS",
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKCgp2YXJ5aW5nIHZlYzMgdmFycG9zaXRpb247CnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7CgoKCgovKiBDb2xvciwga2VlcCBhdHRyaWJ1dGUgc3luYyB3aXRoOiBncHVfc2hhZGVyX3ZlcnRleF93b3JsZC5nbHNsICovCgpmbG9hdCBzcmdiX3RvX2xpbmVhcnJnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDQwNDUpCgkJcmV0dXJuIChjIDwgMC4wKSA/IDAuMCA6IGMgKiAoMS4wIC8gMTIuOTIpOwoJZWxzZQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOwp9Cgp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pCnsKCWNvbF90by5yID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20ucik7Cgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOwoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsKfQoKdm9pZCBzcmdiX3RvX2xpbmVhcnJnYih2ZWM0IGNvbF9mcm9tLCB2YXJ5aW5nIHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCmJvb2wgaXNfc3JnYihpbnQgaW5mbykKewojaWZkZWYgVVNFX05FV19TSEFESU5HCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOwojZWxzZQoJcmV0dXJuIGZhbHNlOwojZW5kaWYKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpCnsKCXZhciA9IGF0dHI7Cn0KCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMiBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMyIHZhcikKewoJdmFyID0gYXR0cjsKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMzIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzMgdmFyKQp7CglpZiAoaXNfc3JnYihpbmZvKSkgewoJCXNyZ2JfdG9fbGluZWFycmdiKGF0dHIsIHZhcik7Cgl9CgllbHNlIHsKCQl2YXIgPSBhdHRyOwoJfQp9Cgp2b2lkIHNldF92YXJfZnJvbV9hdHRyKHZlYzQgYXR0ciwgaW50IGluZm8sIHZhcnlpbmcgdmVjNCB2YXIpCnsKCWlmIChpc19zcmdiKGluZm8pKSB7CgkJc3JnYl90b19saW5lYXJyZ2IoYXR0ciwgdmFyKTsKCX0KCWVsc2UgewoJCXZhciA9IGF0dHI7Cgl9Cn0KCi8qIGVuZCBjb2xvciBjb2RlICovCgoKdm9pZCBtYWluKCkKewoKCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7Cgl2ZWMzIG5vcm1hbCA9IGJsX05vcm1hbDsKCgoJdmVjNCBjbyA9IGJsX01vZGVsVmlld01hdHJpeCAqIHBvc2l0aW9uOwoKCXZhcnBvc2l0aW9uID0gY28ueHl6OwoJdmFybm9ybWFsID0gbm9ybWFsaXplKGJsX05vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CglnbF9Qb3NpdGlvbiA9IGJsX1Byb2plY3Rpb25NYXRyaXggKiBjbzsKCiAKCgp9Cg=="
        },
        "shaders_greenGlowFS": {
            "name": "greenGlowFS",
            "type": 35632,
            "uri": "data:text/plain;base64,"
        },
        "shaders_greenGlowVS": {
            "name": "greenGlowVS",
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKCgp2YXJ5aW5nIHZlYzMgdmFycG9zaXRpb247CnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7CgoKCgovKiBDb2xvciwga2VlcCBhdHRyaWJ1dGUgc3luYyB3aXRoOiBncHVfc2hhZGVyX3ZlcnRleF93b3JsZC5nbHNsICovCgpmbG9hdCBzcmdiX3RvX2xpbmVhcnJnYihmbG9hdCBjKQp7CglpZiAoYyA8IDAuMDQwNDUpCgkJcmV0dXJuIChjIDwgMC4wKSA/IDAuMCA6IGMgKiAoMS4wIC8gMTIuOTIpOwoJZWxzZQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOwp9Cgp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pCnsKCWNvbF90by5yID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20ucik7Cgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOwoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsKfQoKdm9pZCBzcmdiX3RvX2xpbmVhcnJnYih2ZWM0IGNvbF9mcm9tLCB2YXJ5aW5nIHZlYzQgY29sX3RvKQp7Cgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOwoJY29sX3RvLmcgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5nKTsKCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7Cgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7Cn0KCmJvb2wgaXNfc3JnYihpbnQgaW5mbykKewojaWZkZWYgVVNFX05FV19TSEFESU5HCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOwojZWxzZQoJcmV0dXJuIGZhbHNlOwojZW5kaWYKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpCnsKCXZhciA9IGF0dHI7Cn0KCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMiBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMyIHZhcikKewoJdmFyID0gYXR0cjsKfQoKdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMzIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzMgdmFyKQp7CglpZiAoaXNfc3JnYihpbmZvKSkgewoJCXNyZ2JfdG9fbGluZWFycmdiKGF0dHIsIHZhcik7Cgl9CgllbHNlIHsKCQl2YXIgPSBhdHRyOwoJfQp9Cgp2b2lkIHNldF92YXJfZnJvbV9hdHRyKHZlYzQgYXR0ciwgaW50IGluZm8sIHZhcnlpbmcgdmVjNCB2YXIpCnsKCWlmIChpc19zcmdiKGluZm8pKSB7CgkJc3JnYl90b19saW5lYXJyZ2IoYXR0ciwgdmFyKTsKCX0KCWVsc2UgewoJCXZhciA9IGF0dHI7Cgl9Cn0KCi8qIGVuZCBjb2xvciBjb2RlICovCgoKdm9pZCBtYWluKCkKewoKCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7Cgl2ZWMzIG5vcm1hbCA9IGJsX05vcm1hbDsKCgoJdmVjNCBjbyA9IGJsX01vZGVsVmlld01hdHJpeCAqIHBvc2l0aW9uOwoKCXZhcnBvc2l0aW9uID0gY28ueHl6OwoJdmFybm9ybWFsID0gbm9ybWFsaXplKGJsX05vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CglnbF9Qb3NpdGlvbiA9IGJsX1Byb2plY3Rpb25NYXRyaXggKiBjbzsKCiAKCgp9Cg=="
        }
    },
    "techniques": {
        "techniques_Blue": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "name": "Blue",
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                }
            },
            "program": "programs_Blue",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix"
            }
        },
        "techniques_PinkGlass": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "name": "PinkGlass",
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                }
            },
            "program": "programs_PinkGlass",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix"
            }
        },
        "techniques_PinkGlow": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "name": "PinkGlow",
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                }
            },
            "program": "programs_PinkGlow",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix"
            }
        },
        "techniques_blueglass": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "name": "blueglass",
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                }
            },
            "program": "programs_blueglass",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix"
            }
        },
        "techniques_greenGlass": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "name": "greenGlass",
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                },
                "inv_view_mat": {
                    "type": 35676,
                    "value": null
                },
                "view_mat": {
                    "type": 35676,
                    "value": null
                }
            },
            "program": "programs_greenGlass",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix",
                "unfinvviewmat": "inv_view_mat",
                "unfviewmat": "view_mat"
            }
        },
        "techniques_greenGlow": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "name": "greenGlow",
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                }
            },
            "program": "programs_greenGlow",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix"
            }
        }
    }
}
